<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lstrlib_8c_source" xml:lang="zh">
<title>D:/gitworkspace/lua/lstrlib.c</title>
<programlisting>00001 <emphasis role="comment">/*</emphasis>
00002 <emphasis role="comment">**&#32;$Id:&#32;lstrlib.c&#32;$</emphasis>
00003 <emphasis role="comment">**&#32;Standard&#32;library&#32;for&#32;string&#32;operations&#32;and&#32;pattern-matching</emphasis>
00004 <emphasis role="comment">**&#32;See&#32;Copyright&#32;Notice&#32;in&#32;lua.h</emphasis>
00005 <emphasis role="comment">*/</emphasis>
00006 
<anchor xml:id="_lstrlib_8c_source_1l00007"/><link linkend="_lstrlib_8c_1a7d519f7b443a6bce51922ce6bb0621a8">00007</link> <emphasis role="preprocessor">#define&#32;lstrlib_c</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00008"/><link linkend="_lstrlib_8c_1a884b19ad6094d6238c4072a8064aeb12">00008</link> <emphasis role="preprocessor">#define&#32;LUA_LIB</emphasis>
00009 
00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lprefix_8h">lprefix.h</link>&quot;</emphasis>
00011 
00012 
00013 <emphasis role="preprocessor">#include&#32;&lt;ctype.h&gt;</emphasis>
00014 <emphasis role="preprocessor">#include&#32;&lt;float.h&gt;</emphasis>
00015 <emphasis role="preprocessor">#include&#32;&lt;limits.h&gt;</emphasis>
00016 <emphasis role="preprocessor">#include&#32;&lt;locale.h&gt;</emphasis>
00017 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
00018 <emphasis role="preprocessor">#include&#32;&lt;stddef.h&gt;</emphasis>
00019 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
00021 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
00022 
00023 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lua_8h">lua.h</link>&quot;</emphasis>
00024 
00025 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lauxlib_8h">lauxlib.h</link>&quot;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lualib_8h">lualib.h</link>&quot;</emphasis>
00027 
00028 
00029 <emphasis role="comment">/*</emphasis>
00030 <emphasis role="comment">**&#32;maximum&#32;number&#32;of&#32;captures&#32;that&#32;a&#32;pattern&#32;can&#32;do&#32;during</emphasis>
00031 <emphasis role="comment">**&#32;pattern-matching.&#32;This&#32;limit&#32;is&#32;arbitrary,&#32;but&#32;must&#32;fit&#32;in</emphasis>
00032 <emphasis role="comment">**&#32;an&#32;unsigned&#32;char.</emphasis>
00033 <emphasis role="comment">*/</emphasis>
00034 <emphasis role="preprocessor">#if&#32;!defined(LUA_MAXCAPTURES)</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00035"/><link linkend="_lstrlib_8c_1a7cecfa7bbfb47e8a8598a9bfbfbcab54">00035</link> <emphasis role="preprocessor">#define&#32;LUA_MAXCAPTURES&#32;&#32;&#32;&#32;&#32;32</emphasis>
00036 <emphasis role="preprocessor">#endif</emphasis>
00037 
00038 
00039 <emphasis role="comment">/*&#32;macro&#32;to&#32;&apos;unsign&apos;&#32;a&#32;character&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00040"/><link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">00040</link> <emphasis role="preprocessor">#define&#32;uchar(c)&#32;&#32;&#32;&#32;((unsigned&#32;char)(c))</emphasis>
00041 
00042 
00043 <emphasis role="comment">/*</emphasis>
00044 <emphasis role="comment">**&#32;Some&#32;sizes&#32;are&#32;better&#32;limited&#32;to&#32;fit&#32;in&#32;&apos;int&apos;,&#32;but&#32;must&#32;also&#32;fit&#32;in</emphasis>
00045 <emphasis role="comment">**&#32;&apos;size_t&apos;.&#32;(We&#32;assume&#32;that&#32;&apos;lua_Integer&apos;&#32;cannot&#32;be&#32;smaller&#32;than&#32;&apos;int&apos;.)</emphasis>
00046 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00047"/><link linkend="_lstrlib_8c_1aa927c7bf177c162feda3483e1e972b3a">00047</link> <emphasis role="preprocessor">#define&#32;MAX_SIZET&#32;&#32;&#32;((size_t)(~(size_t)0))</emphasis>
00048 
<anchor xml:id="_lstrlib_8c_source_1l00049"/><link linkend="_lstrlib_8c_1a2a37b4217917105aac7557862ccc19c3">00049</link> <emphasis role="preprocessor">#define&#32;MAXSIZE&#32;&#32;\</emphasis>
00050 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(sizeof(size_t)&#32;&lt;&#32;sizeof(int)&#32;?&#32;MAX_SIZET&#32;:&#32;(size_t)(INT_MAX))</emphasis>
00051 
00052 
00053 
00054 
<anchor xml:id="_lstrlib_8c_source_1l00055"/><link linkend="_lstrlib_8c_1a357ce37478dde24252724e3c4c66ce11">00055</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a357ce37478dde24252724e3c4c66ce11">str_len</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00056 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l;
00057 &#32;&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;l);
00058 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>)l);
00059 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00060 }
00061 
00062 
00063 <emphasis role="comment">/*</emphasis>
00064 <emphasis role="comment">**&#32;translate&#32;a&#32;relative&#32;initial&#32;string&#32;position</emphasis>
00065 <emphasis role="comment">**&#32;(negative&#32;means&#32;back&#32;from&#32;end):&#32;clip&#32;result&#32;to&#32;[1,&#32;inf).</emphasis>
00066 <emphasis role="comment">**&#32;The&#32;length&#32;of&#32;any&#32;string&#32;in&#32;Lua&#32;must&#32;fit&#32;in&#32;a&#32;lua_Integer,</emphasis>
00067 <emphasis role="comment">**&#32;so&#32;there&#32;are&#32;no&#32;overflows&#32;in&#32;the&#32;casts.</emphasis>
00068 <emphasis role="comment">**&#32;The&#32;inverted&#32;comparison&#32;avoids&#32;a&#32;possible&#32;overflow</emphasis>
00069 <emphasis role="comment">**&#32;computing&#32;&apos;-pos&apos;.</emphasis>
00070 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00071"/><link linkend="_lstrlib_8c_1a5d66236d294a1cd3e310292e43d5c3c6">00071</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_lstrlib_8c_1a5d66236d294a1cd3e310292e43d5c3c6">posrelatI</link>&#32;(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;pos,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len)&#32;{
00072 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&gt;&#32;0)
00073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>)pos;
00074 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;==&#32;0)
00075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00076 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&lt;&#32;-(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>)len)&#32;&#32;<emphasis role="comment">/*&#32;inverted&#32;comparison&#32;*/</emphasis>
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;clip&#32;to&#32;1&#32;*/</emphasis>
00078 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;len&#32;+&#32;(size_t)pos&#32;+&#32;1;
00079 }
00080 
00081 
00082 <emphasis role="comment">/*</emphasis>
00083 <emphasis role="comment">**&#32;Gets&#32;an&#32;optional&#32;ending&#32;string&#32;position&#32;from&#32;argument&#32;&apos;arg&apos;,</emphasis>
00084 <emphasis role="comment">**&#32;with&#32;default&#32;value&#32;&apos;def&apos;.</emphasis>
00085 <emphasis role="comment">**&#32;Negative&#32;means&#32;back&#32;from&#32;end:&#32;clip&#32;result&#32;to&#32;[0,&#32;len]</emphasis>
00086 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00087"/><link linkend="_lstrlib_8c_1a9ed9b9b49334e68a83251eeff8427a5a">00087</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_lstrlib_8c_1a9ed9b9b49334e68a83251eeff8427a5a">getendpos</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">int</emphasis>&#32;arg,&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;def,
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len)&#32;{
00089 &#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;pos&#32;=&#32;<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;arg,&#32;def);
00090 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&gt;&#32;(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>)len)
00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;len;
00092 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&gt;=&#32;0)
00093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>)pos;
00094 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos&#32;&lt;&#32;-(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>)len)
00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00096 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;len&#32;+&#32;(size_t)pos&#32;+&#32;1;
00097 }
00098 
00099 
<anchor xml:id="_lstrlib_8c_source_1l00100"/><link linkend="_lstrlib_8c_1a039b391d5f43533a0ce750c5e40d7752">00100</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a039b391d5f43533a0ce750c5e40d7752">str_sub</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00101 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l;
00102 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;l);
00103 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;start&#32;=&#32;<link linkend="_lstrlib_8c_1a5d66236d294a1cd3e310292e43d5c3c6">posrelatI</link>(<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;2),&#32;l);
00104 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;end&#32;=&#32;<link linkend="_lstrlib_8c_1a9ed9b9b49334e68a83251eeff8427a5a">getendpos</link>(L,&#32;3,&#32;-1,&#32;l);
00105 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&lt;=&#32;end)
00106 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a2c325311534c23450cdf11931a8db0ae">lua_pushlstring</link>(L,&#32;s&#32;+&#32;start&#32;-&#32;1,&#32;(end&#32;-&#32;start)&#32;+&#32;1);
00107 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_lua_8h_1a47854189a679002ed743ebbcb30b1b26">lua_pushliteral</link>(L,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
00108 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00109 }
00110 
00111 
<anchor xml:id="_lstrlib_8c_source_1l00112"/><link linkend="_lstrlib_8c_1a4b2ffac60e817b9bfc54b32f8da3a6b4">00112</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a4b2ffac60e817b9bfc54b32f8da3a6b4">str_reverse</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00113 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l,&#32;i;
00114 &#32;&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;b;
00115 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;l);
00116 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;<link linkend="_lauxlib_8c_1a4f1a8d2f28779b1680587982b1385b61">luaL_buffinitsize</link>(L,&#32;&amp;b,&#32;l);
00117 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;l;&#32;i++)
00118 &#32;&#32;&#32;&#32;p[i]&#32;=&#32;s[l&#32;-&#32;i&#32;-&#32;1];
00119 &#32;&#32;<link linkend="_lauxlib_8c_1aae36c3a2c184f1b2619ad7f99f2b4c16">luaL_pushresultsize</link>(&amp;b,&#32;l);
00120 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00121 }
00122 
00123 
<anchor xml:id="_lstrlib_8c_source_1l00124"/><link linkend="_lstrlib_8c_1ab2235f81205d0482d03c8ae456a98992">00124</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ab2235f81205d0482d03c8ae456a98992">str_lower</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00125 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l;
00126 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i;
00127 &#32;&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;b;
00128 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;l);
00129 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;<link linkend="_lauxlib_8c_1a4f1a8d2f28779b1680587982b1385b61">luaL_buffinitsize</link>(L,&#32;&amp;b,&#32;l);
00130 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;l;&#32;i++)
00131 &#32;&#32;&#32;&#32;p[i]&#32;=&#32;tolower(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(s[i]));
00132 &#32;&#32;<link linkend="_lauxlib_8c_1aae36c3a2c184f1b2619ad7f99f2b4c16">luaL_pushresultsize</link>(&amp;b,&#32;l);
00133 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00134 }
00135 
00136 
<anchor xml:id="_lstrlib_8c_source_1l00137"/><link linkend="_lstrlib_8c_1a38ed99b74af58070449ca344a7351f6a">00137</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a38ed99b74af58070449ca344a7351f6a">str_upper</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00138 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l;
00139 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i;
00140 &#32;&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;b;
00141 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;l);
00142 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;<link linkend="_lauxlib_8c_1a4f1a8d2f28779b1680587982b1385b61">luaL_buffinitsize</link>(L,&#32;&amp;b,&#32;l);
00143 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;l;&#32;i++)
00144 &#32;&#32;&#32;&#32;p[i]&#32;=&#32;toupper(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(s[i]));
00145 &#32;&#32;<link linkend="_lauxlib_8c_1aae36c3a2c184f1b2619ad7f99f2b4c16">luaL_pushresultsize</link>(&amp;b,&#32;l);
00146 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00147 }
00148 
00149 
<anchor xml:id="_lstrlib_8c_source_1l00150"/><link linkend="_lstrlib_8c_1acaee4c84f29e2ec7366728ca04d3569c">00150</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1acaee4c84f29e2ec7366728ca04d3569c">str_rep</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00151 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l,&#32;lsep;
00152 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;l);
00153 &#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;n&#32;=&#32;<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;2);
00154 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*sep&#32;=&#32;<link linkend="_lauxlib_8c_1a78e227b41b881001dc0e95a263690816">luaL_optlstring</link>(L,&#32;3,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;&amp;lsep);
00155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;=&#32;0)&#32;<link linkend="_lua_8h_1a47854189a679002ed743ebbcb30b1b26">lua_pushliteral</link>(L,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
00156 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l&#32;+&#32;lsep&#32;&lt;&#32;l&#32;||&#32;l&#32;+&#32;lsep&#32;&gt;&#32;<link linkend="_lstrlib_8c_1a2a37b4217917105aac7557862ccc19c3">MAXSIZE</link>&#32;/&#32;n)&#32;&#32;<emphasis role="comment">/*&#32;may&#32;overflow?&#32;*/</emphasis>
00157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;resulting&#32;string&#32;too&#32;large&quot;</emphasis>);
00158 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;totallen&#32;=&#32;(size_t)n&#32;*&#32;l&#32;+&#32;(<emphasis role="keywordtype">size_t</emphasis>)(n&#32;-&#32;1)&#32;*&#32;lsep;
00160 &#32;&#32;&#32;&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;b;
00161 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;<link linkend="_lauxlib_8c_1a4f1a8d2f28779b1680587982b1385b61">luaL_buffinitsize</link>(L,&#32;&amp;b,&#32;totallen);
00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(n--&#32;&gt;&#32;1)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;first&#32;n-1&#32;copies&#32;(followed&#32;by&#32;separator)&#32;*/</emphasis>
00163 &#32;&#32;&#32;&#32;&#32;&#32;memcpy(p,&#32;s,&#32;l&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>));&#32;p&#32;+=&#32;l;
00164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lsep&#32;&gt;&#32;0)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;empty&#32;&apos;memcpy&apos;&#32;is&#32;not&#32;that&#32;cheap&#32;*/</emphasis>
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(p,&#32;sep,&#32;lsep&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>));
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;lsep;
00167 &#32;&#32;&#32;&#32;&#32;&#32;}
00168 &#32;&#32;&#32;&#32;}
00169 &#32;&#32;&#32;&#32;memcpy(p,&#32;s,&#32;l&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>));&#32;&#32;<emphasis role="comment">/*&#32;last&#32;copy&#32;(not&#32;followed&#32;by&#32;separator)&#32;*/</emphasis>
00170 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1aae36c3a2c184f1b2619ad7f99f2b4c16">luaL_pushresultsize</link>(&amp;b,&#32;totallen);
00171 &#32;&#32;}
00172 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00173 }
00174 
00175 
<anchor xml:id="_lstrlib_8c_source_1l00176"/><link linkend="_lstrlib_8c_1ae561770420cfd1894054415df9d4c423">00176</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ae561770420cfd1894054415df9d4c423">str_byte</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00177 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l;
00178 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;l);
00179 &#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;pi&#32;=&#32;<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;2,&#32;1);
00180 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;posi&#32;=&#32;<link linkend="_lstrlib_8c_1a5d66236d294a1cd3e310292e43d5c3c6">posrelatI</link>(pi,&#32;l);
00181 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pose&#32;=&#32;<link linkend="_lstrlib_8c_1a9ed9b9b49334e68a83251eeff8427a5a">getendpos</link>(L,&#32;3,&#32;pi,&#32;l);
00182 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;i;
00183 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(posi&#32;&gt;&#32;pose)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;empty&#32;interval;&#32;return&#32;no&#32;values&#32;*/</emphasis>
00184 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pose&#32;-&#32;posi&#32;&gt;=&#32;(<emphasis role="keywordtype">size_t</emphasis>)INT_MAX)&#32;&#32;<emphasis role="comment">/*&#32;arithmetic&#32;overflow?&#32;*/</emphasis>
00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;string&#32;slice&#32;too&#32;long&quot;</emphasis>);
00186 &#32;&#32;n&#32;=&#32;(int)(pose&#32;-&#32;&#32;posi)&#32;+&#32;1;
00187 &#32;&#32;<link linkend="_lauxlib_8c_1a7c46517055e0e8cb25e61b959709083a">luaL_checkstack</link>(L,&#32;n,&#32;<emphasis role="stringliteral">&quot;string&#32;slice&#32;too&#32;long&quot;</emphasis>);
00188 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;n;&#32;i++)
00189 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(s[posi+i-1]));
00190 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
00191 }
00192 
00193 
<anchor xml:id="_lstrlib_8c_source_1l00194"/><link linkend="_lstrlib_8c_1a3f7db8b2258dca5459ad52d2cbf9f28c">00194</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a3f7db8b2258dca5459ad52d2cbf9f28c">str_char</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00195 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L);&#32;&#32;<emphasis role="comment">/*&#32;number&#32;of&#32;arguments&#32;*/</emphasis>
00196 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00197 &#32;&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;b;
00198 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;<link linkend="_lauxlib_8c_1a4f1a8d2f28779b1680587982b1385b61">luaL_buffinitsize</link>(L,&#32;&amp;b,&#32;n);
00199 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=1;&#32;i&lt;=n;&#32;i++)&#32;{
00200 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>&#32;c&#32;=&#32;(<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>)<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;i);
00201 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;c&#32;&lt;=&#32;(<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>)UCHAR_MAX,&#32;i,&#32;<emphasis role="stringliteral">&quot;value&#32;out&#32;of&#32;range&quot;</emphasis>);
00202 &#32;&#32;&#32;&#32;p[i&#32;-&#32;1]&#32;=&#32;<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(c);
00203 &#32;&#32;}
00204 &#32;&#32;<link linkend="_lauxlib_8c_1aae36c3a2c184f1b2619ad7f99f2b4c16">luaL_pushresultsize</link>(&amp;b,&#32;n);
00205 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00206 }
00207 
00208 
00209 <emphasis role="comment">/*</emphasis>
00210 <emphasis role="comment">**&#32;Buffer&#32;to&#32;store&#32;the&#32;result&#32;of&#32;&apos;string.dump&apos;.&#32;It&#32;must&#32;be&#32;initialized</emphasis>
00211 <emphasis role="comment">**&#32;after&#32;the&#32;call&#32;to&#32;&apos;lua_dump&apos;,&#32;to&#32;ensure&#32;that&#32;the&#32;function&#32;is&#32;on&#32;the</emphasis>
00212 <emphasis role="comment">**&#32;top&#32;of&#32;the&#32;stack&#32;when&#32;&apos;lua_dump&apos;&#32;is&#32;called.&#32;(&apos;luaL_buffinit&apos;&#32;might</emphasis>
00213 <emphasis role="comment">**&#32;push&#32;stuff.)</emphasis>
00214 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00215"/><link linkend="_structstr___writer">00215</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structstr___writer">str_Writer</link>&#32;{
<anchor xml:id="_lstrlib_8c_source_1l00216"/><link linkend="_structstr___writer_1a795ea50921b36311ffd5e7baa2ef1f7e">00216</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structstr___writer_1a795ea50921b36311ffd5e7baa2ef1f7e">init</link>;&#32;&#32;<emphasis role="comment">/*&#32;true&#32;iff&#32;buffer&#32;has&#32;been&#32;initialized&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00217"/><link linkend="_structstr___writer_1a8dbf5e39661da6c2f7fd0a56fb16954c">00217</link> &#32;&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;<link linkend="_structstr___writer_1a8dbf5e39661da6c2f7fd0a56fb16954c">B</link>;
00218 };
00219 
00220 
<anchor xml:id="_lstrlib_8c_source_1l00221"/><link linkend="_lstrlib_8c_1a1f7ab2869b4517a93412ce096243ead0">00221</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a1f7ab2869b4517a93412ce096243ead0">writer</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*ud)&#32;{
00222 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structstr___writer">str_Writer</link>&#32;*state&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structstr___writer">str_Writer</link>&#32;*)ud;
00223 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!state-&gt;<link linkend="_structstr___writer_1a795ea50921b36311ffd5e7baa2ef1f7e">init</link>)&#32;{
00224 &#32;&#32;&#32;&#32;state-&gt;<link linkend="_structstr___writer_1a795ea50921b36311ffd5e7baa2ef1f7e">init</link>&#32;=&#32;1;
00225 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0830ef75e335f6d7590b0e058f82a5eb">luaL_buffinit</link>(L,&#32;&amp;state-&gt;<link linkend="_structstr___writer_1a8dbf5e39661da6c2f7fd0a56fb16954c">B</link>);
00226 &#32;&#32;}
00227 &#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(&amp;state-&gt;<link linkend="_structstr___writer_1a8dbf5e39661da6c2f7fd0a56fb16954c">B</link>,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)b,&#32;size);
00228 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00229 }
00230 
00231 
<anchor xml:id="_lstrlib_8c_source_1l00232"/><link linkend="_lstrlib_8c_1abc94e3a13f1b6ddb2c9b20c9fd89e87f">00232</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1abc94e3a13f1b6ddb2c9b20c9fd89e87f">str_dump</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00233 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structstr___writer">str_Writer</link>&#32;state;
00234 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;strip&#32;=&#32;<link linkend="_lapi_8c_1a444aee9aa56b0b06175ee3c7bcf7927c">lua_toboolean</link>(L,&#32;2);
00235 &#32;&#32;<link linkend="_lauxlib_8c_1a0f8f78c4edc5cbf890690b3cf9615dc8">luaL_checktype</link>(L,&#32;1,&#32;<link linkend="_lua_8h_1adaa7fa6e2561c1bc428ba8d265171494">LUA_TFUNCTION</link>);
00236 &#32;&#32;<link linkend="_lapi_8c_1adaa30f0d34786144c94644039d1d1b6e">lua_settop</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;ensure&#32;function&#32;is&#32;on&#32;the&#32;top&#32;of&#32;the&#32;stack&#32;*/</emphasis>
00237 &#32;&#32;state.<link linkend="_structstr___writer_1a795ea50921b36311ffd5e7baa2ef1f7e">init</link>&#32;=&#32;0;
00238 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lapi_8c_1a68295f56f04fd0d5c0adfb1793a04b4c">lua_dump</link>(L,&#32;<link linkend="_lstrlib_8c_1a1f7ab2869b4517a93412ce096243ead0">writer</link>,&#32;&amp;state,&#32;strip)&#32;!=&#32;0)
00239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;unable&#32;to&#32;dump&#32;given&#32;function&quot;</emphasis>);
00240 &#32;&#32;<link linkend="_lauxlib_8c_1a3a1f80033814e2057583a7d24cee23b4">luaL_pushresult</link>(&amp;state.<link linkend="_structstr___writer_1a8dbf5e39661da6c2f7fd0a56fb16954c">B</link>);
00241 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00242 }
00243 
00244 
00245 
00246 <emphasis role="comment">/*</emphasis>
00247 <emphasis role="comment">**&#32;{======================================================</emphasis>
00248 <emphasis role="comment">**&#32;METAMETHODS</emphasis>
00249 <emphasis role="comment">**&#32;=======================================================</emphasis>
00250 <emphasis role="comment">*/</emphasis>
00251 
00252 <emphasis role="preprocessor">#if&#32;defined(LUA_NOCVTS2N)&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;{&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
00253 
00254 <emphasis role="comment">/*&#32;no&#32;coercion&#32;from&#32;strings&#32;to&#32;numbers&#32;*/</emphasis>
00255 
00256 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structlua_l___reg">luaL_Reg</link>&#32;<link linkend="_lstrlib_8c_1a7168e6e571c41a6ac8f204f884d661fe">stringmetamethods</link>[]&#32;=&#32;{
00257 &#32;&#32;{<emphasis role="stringliteral">&quot;__index&quot;</emphasis>,&#32;NULL},&#32;&#32;<emphasis role="comment">/*&#32;placeholder&#32;*/</emphasis>
00258 &#32;&#32;{NULL,&#32;NULL}
00259 };
00260 
00261 <emphasis role="preprocessor">#else&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;}{&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
00262 
<anchor xml:id="_lstrlib_8c_source_1l00263"/><link linkend="_lstrlib_8c_1a29c672037c89ca25af99c1694e04c294">00263</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a29c672037c89ca25af99c1694e04c294">tonum</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">int</emphasis>&#32;arg)&#32;{
00264 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lapi_8c_1a652b273947f0656686f998d8e90cd3ea">lua_type</link>(L,&#32;arg)&#32;==&#32;<link linkend="_lua_8h_1a7f62ecb240cb38da9c8a53b41fe21ed9">LUA_TNUMBER</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;already&#32;a&#32;number?&#32;*/</emphasis>
00265 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a602f61a9b583d69dc1c72c8970bd65e8">lua_pushvalue</link>(L,&#32;arg);
00266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00267 &#32;&#32;}
00268 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;check&#32;whether&#32;it&#32;is&#32;a&#32;numerical&#32;string&#32;*/</emphasis>
00269 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len;
00270 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lapi_8c_1a3fc7dbcac3f2610f3d687ec15343bd3f">lua_tolstring</link>(L,&#32;arg,&#32;&amp;len);
00271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(s&#32;!=&#32;NULL&#32;&amp;&amp;&#32;<link linkend="_lapi_8c_1ab9c2fb9e2b2c7dad7474dd4b6f1bbcd0">lua_stringtonumber</link>(L,&#32;s)&#32;==&#32;len&#32;+&#32;1);
00272 &#32;&#32;}
00273 }
00274 
00275 
<anchor xml:id="_lstrlib_8c_source_1l00276"/><link linkend="_lstrlib_8c_1a0f8612c62e1158d37a19d06453dcbc97">00276</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a0f8612c62e1158d37a19d06453dcbc97">trymt</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*mtname)&#32;{
00277 &#32;&#32;<link linkend="_lapi_8c_1adaa30f0d34786144c94644039d1d1b6e">lua_settop</link>(L,&#32;2);&#32;&#32;<emphasis role="comment">/*&#32;back&#32;to&#32;the&#32;original&#32;arguments&#32;*/</emphasis>
00278 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lapi_8c_1a652b273947f0656686f998d8e90cd3ea">lua_type</link>(L,&#32;2)&#32;==&#32;<link linkend="_lua_8h_1a57de20d87bb5131a3159f2bd52e3fab6">LUA_TSTRING</link>&#32;||&#32;!<link linkend="_lauxlib_8c_1add7cea31816ff3f61014031248e0daa6">luaL_getmetafield</link>(L,&#32;2,&#32;mtname))
00279 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;attempt&#32;to&#32;%s&#32;a&#32;&apos;%s&apos;&#32;with&#32;a&#32;&apos;%s&apos;&quot;</emphasis>,&#32;mtname&#32;+&#32;2,
00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a2bee94954917c5bccb05d6578f3c675b">luaL_typename</link>(L,&#32;-2),&#32;<link linkend="_lauxlib_8h_1a2bee94954917c5bccb05d6578f3c675b">luaL_typename</link>(L,&#32;-1));
00281 &#32;&#32;<link linkend="_lua_8h_1a1ba55afa0e7f756a4599e86cf46d92e0">lua_insert</link>(L,&#32;-3);&#32;&#32;<emphasis role="comment">/*&#32;put&#32;metamethod&#32;before&#32;arguments&#32;*/</emphasis>
00282 &#32;&#32;<link linkend="_lua_8h_1a89cbf40f871b6fae2dd2df814c7ac1ba">lua_call</link>(L,&#32;2,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;call&#32;metamethod&#32;*/</emphasis>
00283 }
00284 
00285 
<anchor xml:id="_lstrlib_8c_source_1l00286"/><link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">00286</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">arith</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">int</emphasis>&#32;op,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*mtname)&#32;{
00287 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lstrlib_8c_1a29c672037c89ca25af99c1694e04c294">tonum</link>(L,&#32;1)&#32;&amp;&amp;&#32;<link linkend="_lstrlib_8c_1a29c672037c89ca25af99c1694e04c294">tonum</link>(L,&#32;2))
00288 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a08501a34884feca01759dec174d69c88">lua_arith</link>(L,&#32;op);&#32;&#32;<emphasis role="comment">/*&#32;result&#32;will&#32;be&#32;on&#32;the&#32;top&#32;*/</emphasis>
00289 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00290 &#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a0f8612c62e1158d37a19d06453dcbc97">trymt</link>(L,&#32;mtname);
00291 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00292 }
00293 
00294 
<anchor xml:id="_lstrlib_8c_source_1l00295"/><link linkend="_lstrlib_8c_1a83cdf2094cab994d34c18858a990e555">00295</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a83cdf2094cab994d34c18858a990e555">arith_add</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00296 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">arith</link>(L,&#32;<link linkend="_lua_8h_1acfd183382ff4ae12fc5f987e969f9e30">LUA_OPADD</link>,&#32;<emphasis role="stringliteral">&quot;__add&quot;</emphasis>);
00297 }
00298 
<anchor xml:id="_lstrlib_8c_source_1l00299"/><link linkend="_lstrlib_8c_1a2c0d2a7efd64b03bb81a22f2dd974fc3">00299</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a2c0d2a7efd64b03bb81a22f2dd974fc3">arith_sub</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00300 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">arith</link>(L,&#32;<link linkend="_lua_8h_1a4f3cb6128bd199ff110a205f9807be29">LUA_OPSUB</link>,&#32;<emphasis role="stringliteral">&quot;__sub&quot;</emphasis>);
00301 }
00302 
<anchor xml:id="_lstrlib_8c_source_1l00303"/><link linkend="_lstrlib_8c_1a9162078e35bac5d03f26e9473a0ebf37">00303</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a9162078e35bac5d03f26e9473a0ebf37">arith_mul</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00304 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">arith</link>(L,&#32;<link linkend="_lua_8h_1a62ad68cacfd4a6add7757e7c9515389f">LUA_OPMUL</link>,&#32;<emphasis role="stringliteral">&quot;__mul&quot;</emphasis>);
00305 }
00306 
<anchor xml:id="_lstrlib_8c_source_1l00307"/><link linkend="_lstrlib_8c_1a2a1f4d692fc02d6586bc12a07924f488">00307</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a2a1f4d692fc02d6586bc12a07924f488">arith_mod</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00308 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">arith</link>(L,&#32;<link linkend="_lua_8h_1a92ae2587e93cb450c82ce23682e4a222">LUA_OPMOD</link>,&#32;<emphasis role="stringliteral">&quot;__mod&quot;</emphasis>);
00309 }
00310 
<anchor xml:id="_lstrlib_8c_source_1l00311"/><link linkend="_lstrlib_8c_1ad8c2b27458937cc9a19a949872938fc6">00311</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ad8c2b27458937cc9a19a949872938fc6">arith_pow</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00312 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">arith</link>(L,&#32;<link linkend="_lua_8h_1ad9cff37d2d620494406c11d285c166a6">LUA_OPPOW</link>,&#32;<emphasis role="stringliteral">&quot;__pow&quot;</emphasis>);
00313 }
00314 
<anchor xml:id="_lstrlib_8c_source_1l00315"/><link linkend="_lstrlib_8c_1afd1d2f5e7f8c83185c68d20fc5dc8600">00315</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1afd1d2f5e7f8c83185c68d20fc5dc8600">arith_div</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00316 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">arith</link>(L,&#32;<link linkend="_lua_8h_1aec6bf4df427174d6e5f1eb67fa2a39b5">LUA_OPDIV</link>,&#32;<emphasis role="stringliteral">&quot;__div&quot;</emphasis>);
00317 }
00318 
<anchor xml:id="_lstrlib_8c_source_1l00319"/><link linkend="_lstrlib_8c_1a86a1afce81f747da4c0cf708065acd92">00319</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a86a1afce81f747da4c0cf708065acd92">arith_idiv</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00320 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">arith</link>(L,&#32;<link linkend="_lua_8h_1af47e0652301e786beec5c429ae6ac5ea">LUA_OPIDIV</link>,&#32;<emphasis role="stringliteral">&quot;__idiv&quot;</emphasis>);
00321 }
00322 
<anchor xml:id="_lstrlib_8c_source_1l00323"/><link linkend="_lstrlib_8c_1ac78f63c6c1908d139ffadb3f28d14c21">00323</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ac78f63c6c1908d139ffadb3f28d14c21">arith_unm</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00324 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1afa2c944dafe82820f6f04dff68703634">arith</link>(L,&#32;<link linkend="_lua_8h_1ae976b4a61ff4d4b3bb8cd85cdcceda10">LUA_OPUNM</link>,&#32;<emphasis role="stringliteral">&quot;__unm&quot;</emphasis>);
00325 }
00326 
00327 
<anchor xml:id="_lstrlib_8c_source_1l00328"/><link linkend="_lstrlib_8c_1a7168e6e571c41a6ac8f204f884d661fe">00328</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structlua_l___reg">luaL_Reg</link>&#32;<link linkend="_lstrlib_8c_1a7168e6e571c41a6ac8f204f884d661fe">stringmetamethods</link>[]&#32;=&#32;{
00329 &#32;&#32;{<emphasis role="stringliteral">&quot;__add&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a83cdf2094cab994d34c18858a990e555">arith_add</link>},
00330 &#32;&#32;{<emphasis role="stringliteral">&quot;__sub&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a2c0d2a7efd64b03bb81a22f2dd974fc3">arith_sub</link>},
00331 &#32;&#32;{<emphasis role="stringliteral">&quot;__mul&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a9162078e35bac5d03f26e9473a0ebf37">arith_mul</link>},
00332 &#32;&#32;{<emphasis role="stringliteral">&quot;__mod&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a2a1f4d692fc02d6586bc12a07924f488">arith_mod</link>},
00333 &#32;&#32;{<emphasis role="stringliteral">&quot;__pow&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1ad8c2b27458937cc9a19a949872938fc6">arith_pow</link>},
00334 &#32;&#32;{<emphasis role="stringliteral">&quot;__div&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1afd1d2f5e7f8c83185c68d20fc5dc8600">arith_div</link>},
00335 &#32;&#32;{<emphasis role="stringliteral">&quot;__idiv&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a86a1afce81f747da4c0cf708065acd92">arith_idiv</link>},
00336 &#32;&#32;{<emphasis role="stringliteral">&quot;__unm&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1ac78f63c6c1908d139ffadb3f28d14c21">arith_unm</link>},
00337 &#32;&#32;{<emphasis role="stringliteral">&quot;__index&quot;</emphasis>,&#32;NULL},&#32;&#32;<emphasis role="comment">/*&#32;placeholder&#32;*/</emphasis>
00338 &#32;&#32;{NULL,&#32;NULL}
00339 };
00340 
00341 <emphasis role="preprocessor">#endif&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;}&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
00342 
00343 <emphasis role="comment">/*&#32;}======================================================&#32;*/</emphasis>
00344 
00345 <emphasis role="comment">/*</emphasis>
00346 <emphasis role="comment">**&#32;{======================================================</emphasis>
00347 <emphasis role="comment">**&#32;PATTERN&#32;MATCHING</emphasis>
00348 <emphasis role="comment">**&#32;=======================================================</emphasis>
00349 <emphasis role="comment">*/</emphasis>
00350 
00351 
<anchor xml:id="_lstrlib_8c_source_1l00352"/><link linkend="_lstrlib_8c_1a414cda9a27ce2f01d4a6bb9a20787250">00352</link> <emphasis role="preprocessor">#define&#32;CAP_UNFINISHED&#32;&#32;(-1)</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00353"/><link linkend="_lstrlib_8c_1a921f0f27e58ca4be1e9b0cf12447e118">00353</link> <emphasis role="preprocessor">#define&#32;CAP_POSITION&#32;&#32;&#32;&#32;(-2)</emphasis>
00354 
00355 
<anchor xml:id="_lstrlib_8c_source_1l00356"/><link linkend="_struct_match_state">00356</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_match_state">MatchState</link>&#32;{
<anchor xml:id="_lstrlib_8c_source_1l00357"/><link linkend="_struct_match_state_1a0ddce57660a4a58a17e80cd34b39e368">00357</link> &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_match_state_1a0ddce57660a4a58a17e80cd34b39e368">src_init</link>;&#32;&#32;<emphasis role="comment">/*&#32;init&#32;of&#32;source&#32;string&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00358"/><link linkend="_struct_match_state_1a8c42f98c8a3c104c2c9c811fe37dda64">00358</link> &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_match_state_1a8c42f98c8a3c104c2c9c811fe37dda64">src_end</link>;&#32;&#32;<emphasis role="comment">/*&#32;end&#32;(&apos;\0&apos;)&#32;of&#32;source&#32;string&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00359"/><link linkend="_struct_match_state_1a9b854d2ea44e76b82135be1c200ba6f1">00359</link> &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_match_state_1a9b854d2ea44e76b82135be1c200ba6f1">p_end</link>;&#32;&#32;<emphasis role="comment">/*&#32;end&#32;(&apos;\0&apos;)&#32;of&#32;pattern&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00360"/><link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">00360</link> &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>;
<anchor xml:id="_lstrlib_8c_source_1l00361"/><link linkend="_struct_match_state_1ab33b896a52a581bbab5035e924e250b6">00361</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_match_state_1ab33b896a52a581bbab5035e924e250b6">matchdepth</link>;&#32;&#32;<emphasis role="comment">/*&#32;control&#32;for&#32;recursive&#32;depth&#32;(to&#32;avoid&#32;C&#32;stack&#32;overflow)&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00362"/><link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">00362</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>;&#32;&#32;<emphasis role="comment">/*&#32;total&#32;number&#32;of&#32;captures&#32;(finished&#32;or&#32;unfinished)&#32;*/</emphasis>
00363 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_lstrlib_8c_source_1l00364"/><link linkend="_struct_match_state_1a2b0f38f6e0a0fe73b63ef9442cec258f">00364</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_match_state_1a2b0f38f6e0a0fe73b63ef9442cec258f">init</link>;
<anchor xml:id="_lstrlib_8c_source_1l00365"/><link linkend="_struct_match_state_1a74d0a603db96c1c2a9f4052db8522375">00365</link> &#32;&#32;&#32;&#32;ptrdiff_t&#32;<link linkend="_struct_match_state_1a74d0a603db96c1c2a9f4052db8522375">len</link>;
<anchor xml:id="_lstrlib_8c_source_1l00366"/><link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">00366</link> &#32;&#32;}&#32;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[<link linkend="_lstrlib_8c_1a7cecfa7bbfb47e8a8598a9bfbfbcab54">LUA_MAXCAPTURES</link>];
<anchor xml:id="_lstrlib_8c_source_1l00367"/><link linkend="_lstrlib_8c_1aa2763c4d01615ca8073c5889d844559d">00367</link> }&#32;<link linkend="_lstrlib_8c_1aa2763c4d01615ca8073c5889d844559d">MatchState</link>;
00368 
00369 
00370 <emphasis role="comment">/*&#32;recursive&#32;function&#32;*/</emphasis>
00371 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p);
00372 
00373 
00374 <emphasis role="comment">/*&#32;maximum&#32;recursion&#32;depth&#32;for&#32;&apos;match&apos;&#32;*/</emphasis>
00375 <emphasis role="preprocessor">#if&#32;!defined(MAXCCALLS)</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00376"/><link linkend="_lstrlib_8c_1a16241c11b1579d50b07598e91ed7327a">00376</link> <emphasis role="preprocessor">#define&#32;MAXCCALLS&#32;&#32;&#32;200</emphasis>
00377 <emphasis role="preprocessor">#endif</emphasis>
00378 
00379 
<anchor xml:id="_lstrlib_8c_source_1l00380"/><link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">00380</link> <emphasis role="preprocessor">#define&#32;L_ESC&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;%&apos;</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00381"/><link linkend="_lstrlib_8c_1a2e1ba74d2e5a4b6bdb7e2b1d00f4f4c0">00381</link> <emphasis role="preprocessor">#define&#32;SPECIALS&#32;&#32;&#32;&#32;&quot;^$*+?.([%-&quot;</emphasis>
00382 
00383 
<anchor xml:id="_lstrlib_8c_source_1l00384"/><link linkend="_lstrlib_8c_1aa8c1a193fa762ecfe81888d86981a586">00384</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1aa8c1a193fa762ecfe81888d86981a586">check_capture</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keywordtype">int</emphasis>&#32;l)&#32;{
00385 &#32;&#32;l&#32;-=&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>;
00386 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l&#32;&lt;&#32;0&#32;||&#32;l&#32;&gt;=&#32;ms-&gt;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>&#32;||&#32;ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[l].<link linkend="_struct_match_state_1a74d0a603db96c1c2a9f4052db8522375">len</link>&#32;==&#32;<link linkend="_lstrlib_8c_1a414cda9a27ce2f01d4a6bb9a20787250">CAP_UNFINISHED</link>)
00387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;invalid&#32;capture&#32;index&#32;%%%d&quot;</emphasis>,&#32;l&#32;+&#32;1);
00388 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;l;
00389 }
00390 
00391 
<anchor xml:id="_lstrlib_8c_source_1l00392"/><link linkend="_lstrlib_8c_1a5e8b364a8f8d4300aa5007c0feb42abf">00392</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a5e8b364a8f8d4300aa5007c0feb42abf">capture_to_close</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms)&#32;{
00393 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;level&#32;=&#32;ms-&gt;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>;
00394 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(level--;&#32;level&gt;=0;&#32;level--)
00395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[level].<link linkend="_struct_match_state_1a74d0a603db96c1c2a9f4052db8522375">len</link>&#32;==&#32;<link linkend="_lstrlib_8c_1a414cda9a27ce2f01d4a6bb9a20787250">CAP_UNFINISHED</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;level;
00396 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;invalid&#32;pattern&#32;capture&quot;</emphasis>);
00397 }
00398 
00399 
<anchor xml:id="_lstrlib_8c_source_1l00400"/><link linkend="_lstrlib_8c_1a72b26c2a339f5e84ef087e961b547f95">00400</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1a72b26c2a339f5e84ef087e961b547f95">classend</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p)&#32;{
00401 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(*p++)&#32;{
00402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>:&#32;{
00403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;==&#32;ms-&gt;<link linkend="_struct_match_state_1a9b854d2ea44e76b82135be1c200ba6f1">p_end</link>)
00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;malformed&#32;pattern&#32;(ends&#32;with&#32;&apos;%%&apos;)&quot;</emphasis>);
00405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p+1;
00406 &#32;&#32;&#32;&#32;}
00407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:&#32;{
00408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;^&apos;</emphasis>)&#32;p++;
00409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;look&#32;for&#32;a&#32;&apos;]&apos;&#32;*/</emphasis>
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;==&#32;ms-&gt;<link linkend="_struct_match_state_1a9b854d2ea44e76b82135be1c200ba6f1">p_end</link>)
00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;malformed&#32;pattern&#32;(missing&#32;&apos;]&apos;)&quot;</emphasis>);
00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*(p++)&#32;==&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>&#32;&amp;&amp;&#32;p&#32;&lt;&#32;ms-&gt;p_end)
00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p++;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;escapes&#32;(e.g.&#32;&apos;%]&apos;)&#32;*/</emphasis>
00414 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*p&#32;!=&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>);
00415 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p+1;
00416 &#32;&#32;&#32;&#32;}
00417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{
00418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
00419 &#32;&#32;&#32;&#32;}
00420 &#32;&#32;}
00421 }
00422 
00423 
<anchor xml:id="_lstrlib_8c_source_1l00424"/><link linkend="_lstrlib_8c_1a46c1d8d4310cb940caa503ef10a0decf">00424</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a46c1d8d4310cb940caa503ef10a0decf">match_class</link>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;c,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cl)&#32;{
00425 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;res;
00426 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(tolower(cl))&#32;{
00427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;:&#32;res&#32;=&#32;isalpha(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;c&apos;</emphasis>&#32;:&#32;res&#32;=&#32;iscntrl(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>&#32;:&#32;res&#32;=&#32;isdigit(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;g&apos;</emphasis>&#32;:&#32;res&#32;=&#32;isgraph(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>&#32;:&#32;res&#32;=&#32;islower(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;p&apos;</emphasis>&#32;:&#32;res&#32;=&#32;ispunct(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;s&apos;</emphasis>&#32;:&#32;res&#32;=&#32;isspace(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>&#32;:&#32;res&#32;=&#32;isupper(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;w&apos;</emphasis>&#32;:&#32;res&#32;=&#32;isalnum(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;x&apos;</emphasis>&#32;:&#32;res&#32;=&#32;isxdigit(c);&#32;<emphasis role="keywordflow">break</emphasis>;
00437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;z&apos;</emphasis>&#32;:&#32;res&#32;=&#32;(c&#32;==&#32;0);&#32;<emphasis role="keywordflow">break</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;deprecated&#32;option&#32;*/</emphasis>
00438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cl&#32;==&#32;c);
00439 &#32;&#32;}
00440 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(islower(cl)&#32;?&#32;res&#32;:&#32;!res);
00441 }
00442 
00443 
<anchor xml:id="_lstrlib_8c_source_1l00444"/><link linkend="_lstrlib_8c_1a14c5b9fff2918ecc568b9bcf1bfdb241">00444</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a14c5b9fff2918ecc568b9bcf1bfdb241">matchbracketclass</link>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;c,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ec)&#32;{
00445 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sig&#32;=&#32;1;
00446 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*(p+1)&#32;==&#32;<emphasis role="charliteral">&apos;^&apos;</emphasis>)&#32;{
00447 &#32;&#32;&#32;&#32;sig&#32;=&#32;0;
00448 &#32;&#32;&#32;&#32;p++;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;the&#32;&apos;^&apos;&#32;*/</emphasis>
00449 &#32;&#32;}
00450 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++p&#32;&lt;&#32;ec)&#32;{
00451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>)&#32;{
00452 &#32;&#32;&#32;&#32;&#32;&#32;p++;
00453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lstrlib_8c_1a46c1d8d4310cb940caa503ef10a0decf">match_class</link>(c,&#32;<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p)))
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sig;
00455 &#32;&#32;&#32;&#32;}
00456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*(p+1)&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;&amp;&amp;&#32;(p+2&#32;&lt;&#32;ec))&#32;{
00457 &#32;&#32;&#32;&#32;&#32;&#32;p+=2;
00458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*(p-2))&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p))
00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sig;
00460 &#32;&#32;&#32;&#32;}
00461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p)&#32;==&#32;c)&#32;<emphasis role="keywordflow">return</emphasis>&#32;sig;
00462 &#32;&#32;}
00463 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!sig;
00464 }
00465 
00466 
<anchor xml:id="_lstrlib_8c_source_1l00467"/><link linkend="_lstrlib_8c_1a0fe170ffbc6b4ec3181d2db25ea4deb0">00467</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a0fe170ffbc6b4ec3181d2db25ea4deb0">singlematch</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p,
00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ep)&#32;{
00469 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;&gt;=&#32;ms-&gt;<link linkend="_struct_match_state_1a8c42f98c8a3c104c2c9c811fe37dda64">src_end</link>)
00470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00471 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00472 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*s);
00473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(*p)&#32;{
00474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;matches&#32;any&#32;char&#32;*/</emphasis>
00475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a46c1d8d4310cb940caa503ef10a0decf">match_class</link>(c,&#32;<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*(p+1)));
00476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a14c5b9fff2918ecc568b9bcf1bfdb241">matchbracketclass</link>(c,&#32;p,&#32;ep-1);
00477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p)&#32;==&#32;c);
00478 &#32;&#32;&#32;&#32;}
00479 &#32;&#32;}
00480 }
00481 
00482 
<anchor xml:id="_lstrlib_8c_source_1l00483"/><link linkend="_lstrlib_8c_1aacb8f9104a816720da707ecf5219a96e">00483</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1aacb8f9104a816720da707ecf5219a96e">matchbalance</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p)&#32;{
00485 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;&gt;=&#32;ms-&gt;<link linkend="_struct_match_state_1a9b854d2ea44e76b82135be1c200ba6f1">p_end</link>&#32;-&#32;1)
00486 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;malformed&#32;pattern&#32;(missing&#32;arguments&#32;to&#32;&apos;%%b&apos;)&quot;</emphasis>);
00487 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*s&#32;!=&#32;*p)&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
00488 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00489 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;b&#32;=&#32;*p;
00490 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;e&#32;=&#32;*(p+1);
00491 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cont&#32;=&#32;1;
00492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++s&#32;&lt;&#32;ms-&gt;src_end)&#32;{
00493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*s&#32;==&#32;e)&#32;{
00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--cont&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;s+1;
00495 &#32;&#32;&#32;&#32;&#32;&#32;}
00496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*s&#32;==&#32;b)&#32;cont++;
00497 &#32;&#32;&#32;&#32;}
00498 &#32;&#32;}
00499 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;string&#32;ends&#32;out&#32;of&#32;balance&#32;*/</emphasis>
00500 }
00501 
00502 
<anchor xml:id="_lstrlib_8c_source_1l00503"/><link linkend="_lstrlib_8c_1ad0b55e65b16045801315919fb67a4070">00503</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1ad0b55e65b16045801315919fb67a4070">max_expand</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,
00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ep)&#32;{
00505 &#32;&#32;ptrdiff_t&#32;i&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;counts&#32;maximum&#32;expand&#32;for&#32;item&#32;*/</emphasis>
00506 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_lstrlib_8c_1a0fe170ffbc6b4ec3181d2db25ea4deb0">singlematch</link>(ms,&#32;s&#32;+&#32;i,&#32;p,&#32;ep))
00507 &#32;&#32;&#32;&#32;i++;
00508 &#32;&#32;<emphasis role="comment">/*&#32;keeps&#32;trying&#32;to&#32;match&#32;with&#32;the&#32;maximum&#32;repetitions&#32;*/</emphasis>
00509 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&gt;=0)&#32;{
00510 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*res&#32;=&#32;<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>(ms,&#32;(s+i),&#32;ep+1);
00511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(res)&#32;<emphasis role="keywordflow">return</emphasis>&#32;res;
00512 &#32;&#32;&#32;&#32;i--;&#32;&#32;<emphasis role="comment">/*&#32;else&#32;didn&apos;t&#32;match;&#32;reduce&#32;1&#32;repetition&#32;to&#32;try&#32;again&#32;*/</emphasis>
00513 &#32;&#32;}
00514 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
00515 }
00516 
00517 
<anchor xml:id="_lstrlib_8c_source_1l00518"/><link linkend="_lstrlib_8c_1a3b42ede2ccaf027b891a6a4f1cdf3902">00518</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1a3b42ede2ccaf027b891a6a4f1cdf3902">min_expand</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,
00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ep)&#32;{
00520 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)&#32;{
00521 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*res&#32;=&#32;<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>(ms,&#32;s,&#32;ep+1);
00522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(res&#32;!=&#32;NULL)
00523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res;
00524 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lstrlib_8c_1a0fe170ffbc6b4ec3181d2db25ea4deb0">singlematch</link>(ms,&#32;s,&#32;p,&#32;ep))
00525 &#32;&#32;&#32;&#32;&#32;&#32;s++;&#32;&#32;<emphasis role="comment">/*&#32;try&#32;with&#32;one&#32;more&#32;repetition&#32;*/</emphasis>
00526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
00527 &#32;&#32;}
00528 }
00529 
00530 
<anchor xml:id="_lstrlib_8c_source_1l00531"/><link linkend="_lstrlib_8c_1a31cf026bdaa00bf9c72a1e4f72319147">00531</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1a31cf026bdaa00bf9c72a1e4f72319147">start_capture</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p,&#32;<emphasis role="keywordtype">int</emphasis>&#32;what)&#32;{
00533 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*res;
00534 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;level&#32;=&#32;ms-&gt;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>;
00535 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(level&#32;&gt;=&#32;<link linkend="_lstrlib_8c_1a7cecfa7bbfb47e8a8598a9bfbfbcab54">LUA_MAXCAPTURES</link>)&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;too&#32;many&#32;captures&quot;</emphasis>);
00536 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[level].<link linkend="_struct_match_state_1a2b0f38f6e0a0fe73b63ef9442cec258f">init</link>&#32;=&#32;s;
00537 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[level].<link linkend="_struct_match_state_1a74d0a603db96c1c2a9f4052db8522375">len</link>&#32;=&#32;what;
00538 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>&#32;=&#32;level+1;
00539 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((res=<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>(ms,&#32;s,&#32;p))&#32;==&#32;NULL)&#32;&#32;<emphasis role="comment">/*&#32;match&#32;failed?&#32;*/</emphasis>
00540 &#32;&#32;&#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>--;&#32;&#32;<emphasis role="comment">/*&#32;undo&#32;capture&#32;*/</emphasis>
00541 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res;
00542 }
00543 
00544 
<anchor xml:id="_lstrlib_8c_source_1l00545"/><link linkend="_lstrlib_8c_1ab0ecc0f25602beb821f6a5e62517d18e">00545</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1ab0ecc0f25602beb821f6a5e62517d18e">end_capture</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,
00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p)&#32;{
00547 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;l&#32;=&#32;<link linkend="_lstrlib_8c_1a5e8b364a8f8d4300aa5007c0feb42abf">capture_to_close</link>(ms);
00548 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*res;
00549 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[l].<link linkend="_struct_match_state_1a74d0a603db96c1c2a9f4052db8522375">len</link>&#32;=&#32;s&#32;-&#32;ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[l].<link linkend="_struct_match_state_1a2b0f38f6e0a0fe73b63ef9442cec258f">init</link>;&#32;&#32;<emphasis role="comment">/*&#32;close&#32;capture&#32;*/</emphasis>
00550 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((res&#32;=&#32;<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>(ms,&#32;s,&#32;p))&#32;==&#32;NULL)&#32;&#32;<emphasis role="comment">/*&#32;match&#32;failed?&#32;*/</emphasis>
00551 &#32;&#32;&#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[l].<link linkend="_struct_match_state_1a74d0a603db96c1c2a9f4052db8522375">len</link>&#32;=&#32;<link linkend="_lstrlib_8c_1a414cda9a27ce2f01d4a6bb9a20787250">CAP_UNFINISHED</link>;&#32;&#32;<emphasis role="comment">/*&#32;undo&#32;capture&#32;*/</emphasis>
00552 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res;
00553 }
00554 
00555 
<anchor xml:id="_lstrlib_8c_source_1l00556"/><link linkend="_lstrlib_8c_1af71e61c103df8b6163925c900470ee37">00556</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1af71e61c103df8b6163925c900470ee37">match_capture</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;l)&#32;{
00557 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len;
00558 &#32;&#32;l&#32;=&#32;<link linkend="_lstrlib_8c_1aa8c1a193fa762ecfe81888d86981a586">check_capture</link>(ms,&#32;l);
00559 &#32;&#32;len&#32;=&#32;ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[l].<link linkend="_struct_match_state_1a74d0a603db96c1c2a9f4052db8522375">len</link>;
00560 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="keywordtype">size_t</emphasis>)(ms-&gt;<link linkend="_struct_match_state_1a8c42f98c8a3c104c2c9c811fe37dda64">src_end</link>-s)&#32;&gt;=&#32;len&#32;&amp;&amp;
00561 &#32;&#32;&#32;&#32;&#32;&#32;memcmp(ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[l].<link linkend="_struct_match_state_1a2b0f38f6e0a0fe73b63ef9442cec258f">init</link>,&#32;s,&#32;len)&#32;==&#32;0)
00562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s+len;
00563 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
00564 }
00565 
00566 
<anchor xml:id="_lstrlib_8c_source_1l00567"/><link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">00567</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p)&#32;{
00568 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ms-&gt;<link linkend="_struct_match_state_1ab33b896a52a581bbab5035e924e250b6">matchdepth</link>--&#32;==&#32;0)
00569 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;pattern&#32;too&#32;complex&quot;</emphasis>);
00570 &#32;&#32;init:&#32;<emphasis role="comment">/*&#32;using&#32;goto&apos;s&#32;to&#32;optimize&#32;tail&#32;recursion&#32;*/</emphasis>
00571 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;!=&#32;ms-&gt;<link linkend="_struct_match_state_1a9b854d2ea44e76b82135be1c200ba6f1">p_end</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;end&#32;of&#32;pattern?&#32;*/</emphasis>
00572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(*p)&#32;{
00573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;start&#32;capture&#32;*/</emphasis>
00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*(p&#32;+&#32;1)&#32;==&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>)&#32;&#32;<emphasis role="comment">/*&#32;position&#32;capture?&#32;*/</emphasis>
00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;<link linkend="_lstrlib_8c_1a31cf026bdaa00bf9c72a1e4f72319147">start_capture</link>(ms,&#32;s,&#32;p&#32;+&#32;2,&#32;<link linkend="_lstrlib_8c_1a921f0f27e58ca4be1e9b0cf12447e118">CAP_POSITION</link>);
00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;<link linkend="_lstrlib_8c_1a31cf026bdaa00bf9c72a1e4f72319147">start_capture</link>(ms,&#32;s,&#32;p&#32;+&#32;1,&#32;<link linkend="_lstrlib_8c_1a414cda9a27ce2f01d4a6bb9a20787250">CAP_UNFINISHED</link>);
00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00579 &#32;&#32;&#32;&#32;&#32;&#32;}
00580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;end&#32;capture&#32;*/</emphasis>
00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;<link linkend="_lstrlib_8c_1ab0ecc0f25602beb821f6a5e62517d18e">end_capture</link>(ms,&#32;s,&#32;p&#32;+&#32;1);
00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00583 &#32;&#32;&#32;&#32;&#32;&#32;}
00584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;$&apos;</emphasis>:&#32;{
00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((p&#32;+&#32;1)&#32;!=&#32;ms-&gt;<link linkend="_struct_match_state_1a9b854d2ea44e76b82135be1c200ba6f1">p_end</link>)&#32;&#32;<emphasis role="comment">/*&#32;is&#32;the&#32;&apos;$&apos;&#32;the&#32;last&#32;char&#32;in&#32;pattern?&#32;*/</emphasis>
00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;dflt;&#32;&#32;<emphasis role="comment">/*&#32;no;&#32;go&#32;to&#32;default&#32;*/</emphasis>
00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;(s&#32;==&#32;ms-&gt;<link linkend="_struct_match_state_1a8c42f98c8a3c104c2c9c811fe37dda64">src_end</link>)&#32;?&#32;s&#32;:&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;check&#32;end&#32;of&#32;string&#32;*/</emphasis>
00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00589 &#32;&#32;&#32;&#32;&#32;&#32;}
00590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;escaped&#32;sequences&#32;not&#32;in&#32;the&#32;format&#32;class[*+?-]?&#32;*/</emphasis>
00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(*(p&#32;+&#32;1))&#32;{
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;b&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;balanced&#32;string?&#32;*/</emphasis>
00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;<link linkend="_lstrlib_8c_1aacb8f9104a816720da707ecf5219a96e">matchbalance</link>(ms,&#32;s,&#32;p&#32;+&#32;2);
00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;!=&#32;NULL)&#32;{
00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;4;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;init;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;match(ms,&#32;s,&#32;p&#32;+&#32;4);&#32;*/</emphasis>
00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">/*&#32;else&#32;fail&#32;(s&#32;==&#32;NULL)&#32;*/</emphasis>
00597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;frontier?&#32;*/</emphasis>
00600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ep;&#32;<emphasis role="keywordtype">char</emphasis>&#32;previous;
00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;2;
00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;!=&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>)
00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;missing&#32;&apos;[&apos;&#32;after&#32;&apos;%%f&apos;&#32;in&#32;pattern&quot;</emphasis>);
00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ep&#32;=&#32;<link linkend="_lstrlib_8c_1a72b26c2a339f5e84ef087e961b547f95">classend</link>(ms,&#32;p);&#32;&#32;<emphasis role="comment">/*&#32;points&#32;to&#32;what&#32;is&#32;next&#32;*/</emphasis>
00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previous&#32;=&#32;(s&#32;==&#32;ms-&gt;<link linkend="_struct_match_state_1a0ddce57660a4a58a17e80cd34b39e368">src_init</link>)&#32;?&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;:&#32;*(s&#32;-&#32;1);
00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lstrlib_8c_1a14c5b9fff2918ecc568b9bcf1bfdb241">matchbracketclass</link>(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(previous),&#32;p,&#32;ep&#32;-&#32;1)&#32;&amp;&amp;
00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a14c5b9fff2918ecc568b9bcf1bfdb241">matchbracketclass</link>(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*s),&#32;p,&#32;ep&#32;-&#32;1))&#32;{
00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;ep;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;init;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;match(ms,&#32;s,&#32;ep);&#32;*/</emphasis>
00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;match&#32;failed&#32;*/</emphasis>
00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:
00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>:
00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;capture&#32;results&#32;(%0-%9)?&#32;*/</emphasis>
00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;<link linkend="_lstrlib_8c_1af71e61c103df8b6163925c900470ee37">match_capture</link>(ms,&#32;s,&#32;<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*(p&#32;+&#32;1)));
00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;!=&#32;NULL)&#32;{
00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;2;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;init;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;match(ms,&#32;s,&#32;p&#32;+&#32;2)&#32;*/</emphasis>
00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">goto</emphasis>&#32;dflt;
00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00625 &#32;&#32;&#32;&#32;&#32;&#32;}
00626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;dflt:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;pattern&#32;class&#32;plus&#32;optional&#32;suffix&#32;*/</emphasis>
00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ep&#32;=&#32;<link linkend="_lstrlib_8c_1a72b26c2a339f5e84ef087e961b547f95">classend</link>(ms,&#32;p);&#32;&#32;<emphasis role="comment">/*&#32;points&#32;to&#32;optional&#32;suffix&#32;*/</emphasis>
00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;does&#32;not&#32;match&#32;at&#32;least&#32;once?&#32;*/</emphasis>
00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lstrlib_8c_1a0fe170ffbc6b4ec3181d2db25ea4deb0">singlematch</link>(ms,&#32;s,&#32;p,&#32;ep))&#32;{
00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*ep&#32;==&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>&#32;||&#32;*ep&#32;==&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>&#32;||&#32;*ep&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;accept&#32;empty?&#32;*/</emphasis>
00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;ep&#32;+&#32;1;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;init;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;match(ms,&#32;s,&#32;ep&#32;+&#32;1);&#32;*/</emphasis>
00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;&apos;+&apos;&#32;or&#32;no&#32;suffix&#32;*/</emphasis>
00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;fail&#32;*/</emphasis>
00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;matched&#32;once&#32;*/</emphasis>
00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(*ep)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;handle&#32;optional&#32;suffix&#32;*/</emphasis>
00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;optional&#32;*/</emphasis>
00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*res;
00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((res&#32;=&#32;<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>(ms,&#32;s&#32;+&#32;1,&#32;ep&#32;+&#32;1))&#32;!=&#32;NULL)
00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;res;
00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;ep&#32;+&#32;1;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;init;&#32;&#32;<emphasis role="comment">/*&#32;else&#32;return&#32;match(ms,&#32;s,&#32;ep&#32;+&#32;1);&#32;*/</emphasis>
00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>:&#32;&#32;<emphasis role="comment">/*&#32;1&#32;or&#32;more&#32;repetitions&#32;*/</emphasis>
00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s++;&#32;&#32;<emphasis role="comment">/*&#32;1&#32;match&#32;already&#32;done&#32;*/</emphasis>
00649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;FALLTHROUGH&#32;*/</emphasis>
00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>:&#32;&#32;<emphasis role="comment">/*&#32;0&#32;or&#32;more&#32;repetitions&#32;*/</emphasis>
00651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;<link linkend="_lstrlib_8c_1ad0b55e65b16045801315919fb67a4070">max_expand</link>(ms,&#32;s,&#32;p,&#32;ep);
00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>:&#32;&#32;<emphasis role="comment">/*&#32;0&#32;or&#32;more&#32;repetitions&#32;(minimum)&#32;*/</emphasis>
00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;<link linkend="_lstrlib_8c_1a3b42ede2ccaf027b891a6a4f1cdf3902">min_expand</link>(ms,&#32;s,&#32;p,&#32;ep);
00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;<emphasis role="comment">/*&#32;no&#32;suffix&#32;*/</emphasis>
00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s++;&#32;p&#32;=&#32;ep;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;init;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;match(ms,&#32;s&#32;+&#32;1,&#32;ep);&#32;*/</emphasis>
00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00661 &#32;&#32;&#32;&#32;&#32;&#32;}
00662 &#32;&#32;&#32;&#32;}
00663 &#32;&#32;}
00664 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1ab33b896a52a581bbab5035e924e250b6">matchdepth</link>++;
00665 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
00666 }
00667 
00668 
00669 
<anchor xml:id="_lstrlib_8c_source_1l00670"/><link linkend="_lstrlib_8c_1a894e95aeb2179634e0b62277f23c303e">00670</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1a894e95aeb2179634e0b62277f23c303e">lmemfind</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l1,
00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l2)&#32;{
00672 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l2&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;s1;&#32;&#32;<emphasis role="comment">/*&#32;empty&#32;strings&#32;are&#32;everywhere&#32;*/</emphasis>
00673 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l2&#32;&gt;&#32;l1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;avoids&#32;a&#32;negative&#32;&apos;l1&apos;&#32;*/</emphasis>
00674 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00675 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*init;&#32;&#32;<emphasis role="comment">/*&#32;to&#32;search&#32;for&#32;a&#32;&apos;*s2&apos;&#32;inside&#32;&apos;s1&apos;&#32;*/</emphasis>
00676 &#32;&#32;&#32;&#32;l2--;&#32;&#32;<emphasis role="comment">/*&#32;1st&#32;char&#32;will&#32;be&#32;checked&#32;by&#32;&apos;memchr&apos;&#32;*/</emphasis>
00677 &#32;&#32;&#32;&#32;l1&#32;=&#32;l1-l2;&#32;&#32;<emphasis role="comment">/*&#32;&apos;s2&apos;&#32;cannot&#32;be&#32;found&#32;after&#32;that&#32;*/</emphasis>
00678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(l1&#32;&gt;&#32;0&#32;&amp;&amp;&#32;(init&#32;=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)memchr(s1,&#32;*s2,&#32;l1))&#32;!=&#32;NULL)&#32;{
00679 &#32;&#32;&#32;&#32;&#32;&#32;init++;&#32;&#32;&#32;<emphasis role="comment">/*&#32;1st&#32;char&#32;is&#32;already&#32;checked&#32;*/</emphasis>
00680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memcmp(init,&#32;s2+1,&#32;l2)&#32;==&#32;0)
00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;init-1;
00682 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;correct&#32;&apos;l1&apos;&#32;and&#32;&apos;s1&apos;&#32;to&#32;try&#32;again&#32;*/</emphasis>
00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l1&#32;-=&#32;init-s1;
00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s1&#32;=&#32;init;
00685 &#32;&#32;&#32;&#32;&#32;&#32;}
00686 &#32;&#32;&#32;&#32;}
00687 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;found&#32;*/</emphasis>
00688 &#32;&#32;}
00689 }
00690 
00691 
00692 <emphasis role="comment">/*</emphasis>
00693 <emphasis role="comment">**&#32;get&#32;information&#32;about&#32;the&#32;i-th&#32;capture.&#32;If&#32;there&#32;are&#32;no&#32;captures</emphasis>
00694 <emphasis role="comment">**&#32;and&#32;&apos;i==0&apos;,&#32;return&#32;information&#32;about&#32;the&#32;whole&#32;match,&#32;which</emphasis>
00695 <emphasis role="comment">**&#32;is&#32;the&#32;range&#32;&apos;s&apos;..&apos;e&apos;.&#32;If&#32;the&#32;capture&#32;is&#32;a&#32;string,&#32;return</emphasis>
00696 <emphasis role="comment">**&#32;its&#32;length&#32;and&#32;put&#32;its&#32;address&#32;in&#32;&apos;*cap&apos;.&#32;If&#32;it&#32;is&#32;an&#32;integer</emphasis>
00697 <emphasis role="comment">**&#32;(a&#32;position),&#32;push&#32;it&#32;on&#32;the&#32;stack&#32;and&#32;return&#32;CAP_POSITION.</emphasis>
00698 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00699"/><link linkend="_lstrlib_8c_1afa9ea8e071a60a2c554c79f7def3bb39">00699</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_lstrlib_8c_1afa9ea8e071a60a2c554c79f7def3bb39">get_onecapture</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,
00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*e,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**cap)&#32;{
00701 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&gt;=&#32;ms-&gt;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>)&#32;{
00702 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;0)
00703 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;invalid&#32;capture&#32;index&#32;%%%d&quot;</emphasis>,&#32;i&#32;+&#32;1);
00704 &#32;&#32;&#32;&#32;*cap&#32;=&#32;s;
00705 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;e&#32;-&#32;s;
00706 &#32;&#32;}
00707 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00708 &#32;&#32;&#32;&#32;ptrdiff_t&#32;capl&#32;=&#32;ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[i].<link linkend="_struct_match_state_1a74d0a603db96c1c2a9f4052db8522375">len</link>;
00709 &#32;&#32;&#32;&#32;*cap&#32;=&#32;ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[i].<link linkend="_struct_match_state_1a2b0f38f6e0a0fe73b63ef9442cec258f">init</link>;
00710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(capl&#32;==&#32;<link linkend="_lstrlib_8c_1a414cda9a27ce2f01d4a6bb9a20787250">CAP_UNFINISHED</link>)
00711 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;unfinished&#32;capture&quot;</emphasis>);
00712 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(capl&#32;==&#32;<link linkend="_lstrlib_8c_1a921f0f27e58ca4be1e9b0cf12447e118">CAP_POSITION</link>)
00713 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;(ms-&gt;<link linkend="_struct_match_state_1a1ed97226837bc7f7d62d3b08c60b8bc3">capture</link>[i].<link linkend="_struct_match_state_1a2b0f38f6e0a0fe73b63ef9442cec258f">init</link>&#32;-&#32;ms-&gt;<link linkend="_struct_match_state_1a0ddce57660a4a58a17e80cd34b39e368">src_init</link>)&#32;+&#32;1);
00714 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;capl;
00715 &#32;&#32;}
00716 }
00717 
00718 
00719 <emphasis role="comment">/*</emphasis>
00720 <emphasis role="comment">**&#32;Push&#32;the&#32;i-th&#32;capture&#32;on&#32;the&#32;stack.</emphasis>
00721 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00722"/><link linkend="_lstrlib_8c_1a24a14b4e6e90bac4610dd334bb0b51b6">00722</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a24a14b4e6e90bac4610dd334bb0b51b6">push_onecapture</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,
00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*e)&#32;{
00724 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cap;
00725 &#32;&#32;ptrdiff_t&#32;l&#32;=&#32;<link linkend="_lstrlib_8c_1afa9ea8e071a60a2c554c79f7def3bb39">get_onecapture</link>(ms,&#32;i,&#32;s,&#32;e,&#32;&amp;cap);
00726 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l&#32;!=&#32;<link linkend="_lstrlib_8c_1a921f0f27e58ca4be1e9b0cf12447e118">CAP_POSITION</link>)
00727 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a2c325311534c23450cdf11931a8db0ae">lua_pushlstring</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;cap,&#32;l);
00728 &#32;&#32;<emphasis role="comment">/*&#32;else&#32;position&#32;was&#32;already&#32;pushed&#32;*/</emphasis>
00729 }
00730 
00731 
<anchor xml:id="_lstrlib_8c_source_1l00732"/><link linkend="_lstrlib_8c_1ad14703c4bc40d7c1951dedb7bc7554f7">00732</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ad14703c4bc40d7c1951dedb7bc7554f7">push_captures</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*e)&#32;{
00733 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00734 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nlevels&#32;=&#32;(ms-&gt;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>&#32;==&#32;0&#32;&amp;&amp;&#32;s)&#32;?&#32;1&#32;:&#32;ms-&gt;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>;
00735 &#32;&#32;<link linkend="_lauxlib_8c_1a7c46517055e0e8cb25e61b959709083a">luaL_checkstack</link>(ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;nlevels,&#32;<emphasis role="stringliteral">&quot;too&#32;many&#32;captures&quot;</emphasis>);
00736 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nlevels;&#32;i++)
00737 &#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a24a14b4e6e90bac4610dd334bb0b51b6">push_onecapture</link>(ms,&#32;i,&#32;s,&#32;e);
00738 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nlevels;&#32;&#32;<emphasis role="comment">/*&#32;number&#32;of&#32;strings&#32;pushed&#32;*/</emphasis>
00739 }
00740 
00741 
00742 <emphasis role="comment">/*&#32;check&#32;whether&#32;pattern&#32;has&#32;no&#32;special&#32;characters&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00743"/><link linkend="_lstrlib_8c_1a83e7db07fd9aab6eb84c649f0d9f4a0a">00743</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a83e7db07fd9aab6eb84c649f0d9f4a0a">nospecials</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l)&#32;{
00744 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;upto&#32;=&#32;0;
00745 &#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
00746 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strpbrk(p&#32;+&#32;upto,&#32;<link linkend="_lstrlib_8c_1a2e1ba74d2e5a4b6bdb7e2b1d00f4f4c0">SPECIALS</link>))
00747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;pattern&#32;has&#32;a&#32;special&#32;character&#32;*/</emphasis>
00748 &#32;&#32;&#32;&#32;upto&#32;+=&#32;strlen(p&#32;+&#32;upto)&#32;+&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;may&#32;have&#32;more&#32;after&#32;\0&#32;*/</emphasis>
00749 &#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(upto&#32;&lt;=&#32;l);
00750 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;special&#32;chars&#32;found&#32;*/</emphasis>
00751 }
00752 
00753 
<anchor xml:id="_lstrlib_8c_source_1l00754"/><link linkend="_lstrlib_8c_1a901e492edece737eb5d7197219fb0fa1">00754</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a901e492edece737eb5d7197219fb0fa1">prepstate</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L,
00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;ls,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;lp)&#32;{
00756 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>&#32;=&#32;L;
00757 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1ab33b896a52a581bbab5035e924e250b6">matchdepth</link>&#32;=&#32;<link linkend="_lstrlib_8c_1a16241c11b1579d50b07598e91ed7327a">MAXCCALLS</link>;
00758 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a0ddce57660a4a58a17e80cd34b39e368">src_init</link>&#32;=&#32;s;
00759 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a8c42f98c8a3c104c2c9c811fe37dda64">src_end</link>&#32;=&#32;s&#32;+&#32;ls;
00760 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a9b854d2ea44e76b82135be1c200ba6f1">p_end</link>&#32;=&#32;p&#32;+&#32;lp;
00761 }
00762 
00763 
<anchor xml:id="_lstrlib_8c_source_1l00764"/><link linkend="_lstrlib_8c_1a09158e3beed6006b5dd7d5329f4474c9">00764</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a09158e3beed6006b5dd7d5329f4474c9">reprepstate</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms)&#32;{
00765 &#32;&#32;ms-&gt;<link linkend="_struct_match_state_1a0d957bf1afecc6bd1ebcb451c7abe11d">level</link>&#32;=&#32;0;
00766 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(ms-&gt;<link linkend="_struct_match_state_1ab33b896a52a581bbab5035e924e250b6">matchdepth</link>&#32;==&#32;<link linkend="_lstrlib_8c_1a16241c11b1579d50b07598e91ed7327a">MAXCCALLS</link>);
00767 }
00768 
00769 
<anchor xml:id="_lstrlib_8c_source_1l00770"/><link linkend="_lstrlib_8c_1a692514aa32ae2668683a4db15259d26b">00770</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a692514aa32ae2668683a4db15259d26b">str_find_aux</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">int</emphasis>&#32;find)&#32;{
00771 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;ls,&#32;lp;
00772 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;ls);
00773 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;2,&#32;&amp;lp);
00774 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;init&#32;=&#32;<link linkend="_lstrlib_8c_1a5d66236d294a1cd3e310292e43d5c3c6">posrelatI</link>(<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;3,&#32;1),&#32;ls)&#32;-&#32;1;
00775 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(init&#32;&gt;&#32;ls)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;start&#32;after&#32;string&apos;s&#32;end?&#32;*/</emphasis>
00776 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a8666135f7a1412f5eaa14857aec279f0">luaL_pushfail</link>(L);&#32;&#32;<emphasis role="comment">/*&#32;cannot&#32;find&#32;anything&#32;*/</emphasis>
00777 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00778 &#32;&#32;}
00779 &#32;&#32;<emphasis role="comment">/*&#32;explicit&#32;request&#32;or&#32;no&#32;special&#32;characters?&#32;*/</emphasis>
00780 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(find&#32;&amp;&amp;&#32;(<link linkend="_lapi_8c_1a444aee9aa56b0b06175ee3c7bcf7927c">lua_toboolean</link>(L,&#32;4)&#32;||&#32;<link linkend="_lstrlib_8c_1a83e7db07fd9aab6eb84c649f0d9f4a0a">nospecials</link>(p,&#32;lp)))&#32;{
00781 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;do&#32;a&#32;plain&#32;search&#32;*/</emphasis>
00782 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s2&#32;=&#32;<link linkend="_lstrlib_8c_1a894e95aeb2179634e0b62277f23c303e">lmemfind</link>(s&#32;+&#32;init,&#32;ls&#32;-&#32;init,&#32;p,&#32;lp);
00783 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s2)&#32;{
00784 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;(s2&#32;-&#32;s)&#32;+&#32;1);
00785 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;(s2&#32;-&#32;s)&#32;+&#32;lp);
00786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;
00787 &#32;&#32;&#32;&#32;}
00788 &#32;&#32;}
00789 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00790 &#32;&#32;&#32;&#32;<link linkend="_struct_match_state">MatchState</link>&#32;ms;
00791 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s1&#32;=&#32;s&#32;+&#32;init;
00792 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;anchor&#32;=&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;^&apos;</emphasis>);
00793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(anchor)&#32;{
00794 &#32;&#32;&#32;&#32;&#32;&#32;p++;&#32;lp--;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;anchor&#32;character&#32;*/</emphasis>
00795 &#32;&#32;&#32;&#32;}
00796 &#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a901e492edece737eb5d7197219fb0fa1">prepstate</link>(&amp;ms,&#32;L,&#32;s,&#32;ls,&#32;p,&#32;lp);
00797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
00798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*res;
00799 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a09158e3beed6006b5dd7d5329f4474c9">reprepstate</link>(&amp;ms);
00800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((res=<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>(&amp;ms,&#32;s1,&#32;p))&#32;!=&#32;NULL)&#32;{
00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(find)&#32;{
00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;(s1&#32;-&#32;s)&#32;+&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;start&#32;*/</emphasis>
00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;res&#32;-&#32;s);&#32;&#32;&#32;<emphasis role="comment">/*&#32;end&#32;*/</emphasis>
00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1ad14703c4bc40d7c1951dedb7bc7554f7">push_captures</link>(&amp;ms,&#32;NULL,&#32;0)&#32;+&#32;2;
00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1ad14703c4bc40d7c1951dedb7bc7554f7">push_captures</link>(&amp;ms,&#32;s1,&#32;res);
00808 &#32;&#32;&#32;&#32;&#32;&#32;}
00809 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(s1++&#32;&lt;&#32;ms.<link linkend="_struct_match_state_1a8c42f98c8a3c104c2c9c811fe37dda64">src_end</link>&#32;&amp;&amp;&#32;!anchor);
00810 &#32;&#32;}
00811 &#32;&#32;<link linkend="_lauxlib_8h_1a8666135f7a1412f5eaa14857aec279f0">luaL_pushfail</link>(L);&#32;&#32;<emphasis role="comment">/*&#32;not&#32;found&#32;*/</emphasis>
00812 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00813 }
00814 
00815 
<anchor xml:id="_lstrlib_8c_source_1l00816"/><link linkend="_lstrlib_8c_1a362a4bc9ba81ce87253cc3d74f015808">00816</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a362a4bc9ba81ce87253cc3d74f015808">str_find</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00817 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a692514aa32ae2668683a4db15259d26b">str_find_aux</link>(L,&#32;1);
00818 }
00819 
00820 
<anchor xml:id="_lstrlib_8c_source_1l00821"/><link linkend="_lstrlib_8c_1a4b605e43b8f5738db9eae902bbc00f00">00821</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a4b605e43b8f5738db9eae902bbc00f00">str_match</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00822 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a692514aa32ae2668683a4db15259d26b">str_find_aux</link>(L,&#32;0);
00823 }
00824 
00825 
00826 <emphasis role="comment">/*&#32;state&#32;for&#32;&apos;gmatch&apos;&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00827"/><link linkend="_struct_g_match_state">00827</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_g_match_state">GMatchState</link>&#32;{
<anchor xml:id="_lstrlib_8c_source_1l00828"/><link linkend="_struct_g_match_state_1af51e37c9331049b1e3d250a7c8bc3c26">00828</link> &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_g_match_state_1af51e37c9331049b1e3d250a7c8bc3c26">src</link>;&#32;&#32;<emphasis role="comment">/*&#32;current&#32;position&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00829"/><link linkend="_struct_g_match_state_1a6bc6b007533335efe02bafff799ec64c">00829</link> &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_g_match_state_1a6bc6b007533335efe02bafff799ec64c">p</link>;&#32;&#32;<emphasis role="comment">/*&#32;pattern&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00830"/><link linkend="_struct_g_match_state_1a9ac943bbebcb619a29272db47d0b9679">00830</link> &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_g_match_state_1a9ac943bbebcb619a29272db47d0b9679">lastmatch</link>;&#32;&#32;<emphasis role="comment">/*&#32;end&#32;of&#32;last&#32;match&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00831"/><link linkend="_struct_g_match_state_1ad0ad55a98e593c646373697549f06bbd">00831</link> &#32;&#32;<link linkend="_struct_match_state">MatchState</link>&#32;<link linkend="_struct_g_match_state_1ad0ad55a98e593c646373697549f06bbd">ms</link>;&#32;&#32;<emphasis role="comment">/*&#32;match&#32;state&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00832"/><link linkend="_lstrlib_8c_1a470fb40b886615cdc88ff758c9cc7517">00832</link> }&#32;<link linkend="_lstrlib_8c_1a470fb40b886615cdc88ff758c9cc7517">GMatchState</link>;
00833 
00834 
<anchor xml:id="_lstrlib_8c_source_1l00835"/><link linkend="_lstrlib_8c_1ab7cb0ba6191e1aa9455f6522d3483a02">00835</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ab7cb0ba6191e1aa9455f6522d3483a02">gmatch_aux</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00836 &#32;&#32;<link linkend="_struct_g_match_state">GMatchState</link>&#32;*gm&#32;=&#32;(<link linkend="_struct_g_match_state">GMatchState</link>&#32;*)<link linkend="_lapi_8c_1a0444ddf13e5618bca969e4b3b47bc0cc">lua_touserdata</link>(L,&#32;<link linkend="_lua_8h_1ac3aa6665c25070f282c9827ec919fe6a">lua_upvalueindex</link>(3));
00837 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*src;
00838 &#32;&#32;gm-&gt;<link linkend="_struct_g_match_state_1ad0ad55a98e593c646373697549f06bbd">ms</link>.<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>&#32;=&#32;L;
00839 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(src&#32;=&#32;gm-&gt;<link linkend="_struct_g_match_state_1af51e37c9331049b1e3d250a7c8bc3c26">src</link>;&#32;src&#32;&lt;=&#32;gm-&gt;ms.src_end;&#32;src++)&#32;{
00840 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*e;
00841 &#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a09158e3beed6006b5dd7d5329f4474c9">reprepstate</link>(&amp;gm-&gt;<link linkend="_struct_g_match_state_1ad0ad55a98e593c646373697549f06bbd">ms</link>);
00842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((e&#32;=&#32;<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>(&amp;gm-&gt;<link linkend="_struct_g_match_state_1ad0ad55a98e593c646373697549f06bbd">ms</link>,&#32;src,&#32;gm-&gt;<link linkend="_struct_g_match_state_1a6bc6b007533335efe02bafff799ec64c">p</link>))&#32;!=&#32;NULL&#32;&amp;&amp;&#32;e&#32;!=&#32;gm-&gt;<link linkend="_struct_g_match_state_1a9ac943bbebcb619a29272db47d0b9679">lastmatch</link>)&#32;{
00843 &#32;&#32;&#32;&#32;&#32;&#32;gm-&gt;<link linkend="_struct_g_match_state_1af51e37c9331049b1e3d250a7c8bc3c26">src</link>&#32;=&#32;gm-&gt;<link linkend="_struct_g_match_state_1a9ac943bbebcb619a29272db47d0b9679">lastmatch</link>&#32;=&#32;e;
00844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1ad14703c4bc40d7c1951dedb7bc7554f7">push_captures</link>(&amp;gm-&gt;<link linkend="_struct_g_match_state_1ad0ad55a98e593c646373697549f06bbd">ms</link>,&#32;src,&#32;e);
00845 &#32;&#32;&#32;&#32;}
00846 &#32;&#32;}
00847 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;found&#32;*/</emphasis>
00848 }
00849 
00850 
<anchor xml:id="_lstrlib_8c_source_1l00851"/><link linkend="_lstrlib_8c_1ab55a72bb412d6186c82fd75de44cd031">00851</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ab55a72bb412d6186c82fd75de44cd031">gmatch</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00852 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;ls,&#32;lp;
00853 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;ls);
00854 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;2,&#32;&amp;lp);
00855 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;init&#32;=&#32;<link linkend="_lstrlib_8c_1a5d66236d294a1cd3e310292e43d5c3c6">posrelatI</link>(<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;3,&#32;1),&#32;ls)&#32;-&#32;1;
00856 &#32;&#32;<link linkend="_struct_g_match_state">GMatchState</link>&#32;*gm;
00857 &#32;&#32;<link linkend="_lapi_8c_1adaa30f0d34786144c94644039d1d1b6e">lua_settop</link>(L,&#32;2);&#32;&#32;<emphasis role="comment">/*&#32;keep&#32;strings&#32;on&#32;closure&#32;to&#32;avoid&#32;being&#32;collected&#32;*/</emphasis>
00858 &#32;&#32;gm&#32;=&#32;(<link linkend="_struct_g_match_state">GMatchState</link>&#32;*)<link linkend="_lapi_8c_1a9c09a58b86c71e997d7ccabb67f18c12">lua_newuserdatauv</link>(L,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_g_match_state">GMatchState</link>),&#32;0);
00859 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(init&#32;&gt;&#32;ls)&#32;&#32;<emphasis role="comment">/*&#32;start&#32;after&#32;string&apos;s&#32;end?&#32;*/</emphasis>
00860 &#32;&#32;&#32;&#32;init&#32;=&#32;ls&#32;+&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;avoid&#32;overflows&#32;in&#32;&apos;s&#32;+&#32;init&apos;&#32;*/</emphasis>
00861 &#32;&#32;<link linkend="_lstrlib_8c_1a901e492edece737eb5d7197219fb0fa1">prepstate</link>(&amp;gm-&gt;<link linkend="_struct_g_match_state_1ad0ad55a98e593c646373697549f06bbd">ms</link>,&#32;L,&#32;s,&#32;ls,&#32;p,&#32;lp);
00862 &#32;&#32;gm-&gt;<link linkend="_struct_g_match_state_1af51e37c9331049b1e3d250a7c8bc3c26">src</link>&#32;=&#32;s&#32;+&#32;init;&#32;gm-&gt;<link linkend="_struct_g_match_state_1a6bc6b007533335efe02bafff799ec64c">p</link>&#32;=&#32;p;&#32;gm-&gt;<link linkend="_struct_g_match_state_1a9ac943bbebcb619a29272db47d0b9679">lastmatch</link>&#32;=&#32;NULL;
00863 &#32;&#32;<link linkend="_lapi_8c_1a142802b91cdd22516b54599f51e101e4">lua_pushcclosure</link>(L,&#32;<link linkend="_lstrlib_8c_1ab7cb0ba6191e1aa9455f6522d3483a02">gmatch_aux</link>,&#32;3);
00864 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00865 }
00866 
00867 
<anchor xml:id="_lstrlib_8c_source_1l00868"/><link linkend="_lstrlib_8c_1ad5f7e3fbcadc8825f7f650ecf458fc72">00868</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1ad5f7e3fbcadc8825f7f650ecf458fc72">add_s</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;*b,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,
00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*e)&#32;{
00870 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l;
00871 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L&#32;=&#32;ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>;
00872 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*news&#32;=&#32;<link linkend="_lapi_8c_1a3fc7dbcac3f2610f3d687ec15343bd3f">lua_tolstring</link>(L,&#32;3,&#32;&amp;l);
00873 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p;
00874 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((p&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)memchr(news,&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>,&#32;l))&#32;!=&#32;NULL)&#32;{
00875 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(b,&#32;news,&#32;p&#32;-&#32;news);
00876 &#32;&#32;&#32;&#32;p++;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;ESC&#32;*/</emphasis>
00877 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>)&#32;&#32;<emphasis role="comment">/*&#32;&apos;%%&apos;&#32;*/</emphasis>
00878 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(b,&#32;*p);
00879 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;&#32;<emphasis role="comment">/*&#32;&apos;%0&apos;&#32;*/</emphasis>
00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(b,&#32;s,&#32;e&#32;-&#32;s);
00881 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isdigit(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p)))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;&apos;%n&apos;&#32;*/</emphasis>
00882 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cap;
00883 &#32;&#32;&#32;&#32;&#32;&#32;ptrdiff_t&#32;resl&#32;=&#32;<link linkend="_lstrlib_8c_1afa9ea8e071a60a2c554c79f7def3bb39">get_onecapture</link>(ms,&#32;*p&#32;-&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;s,&#32;e,&#32;&amp;cap);
00884 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(resl&#32;==&#32;<link linkend="_lstrlib_8c_1a921f0f27e58ca4be1e9b0cf12447e118">CAP_POSITION</link>)
00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a59a8ac34826fee305ad56101d97aee18">luaL_addvalue</link>(b);&#32;&#32;<emphasis role="comment">/*&#32;add&#32;position&#32;to&#32;accumulated&#32;result&#32;*/</emphasis>
00886 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(b,&#32;cap,&#32;resl);
00888 &#32;&#32;&#32;&#32;}
00889 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00890 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;invalid&#32;use&#32;of&#32;&apos;%c&apos;&#32;in&#32;replacement&#32;string&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>);
00891 &#32;&#32;&#32;&#32;l&#32;-=&#32;p&#32;+&#32;1&#32;-&#32;news;
00892 &#32;&#32;&#32;&#32;news&#32;=&#32;p&#32;+&#32;1;
00893 &#32;&#32;}
00894 &#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(b,&#32;news,&#32;l);
00895 }
00896 
00897 
00898 <emphasis role="comment">/*</emphasis>
00899 <emphasis role="comment">**&#32;Add&#32;the&#32;replacement&#32;value&#32;to&#32;the&#32;string&#32;buffer&#32;&apos;b&apos;.</emphasis>
00900 <emphasis role="comment">**&#32;Return&#32;true&#32;if&#32;the&#32;original&#32;string&#32;was&#32;changed.&#32;(Function&#32;calls&#32;and</emphasis>
00901 <emphasis role="comment">**&#32;table&#32;indexing&#32;resulting&#32;in&#32;nil&#32;or&#32;false&#32;do&#32;not&#32;change&#32;the&#32;subject.)</emphasis>
00902 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l00903"/><link linkend="_lstrlib_8c_1a853703c83ab694a70212461d5cfe7843">00903</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a853703c83ab694a70212461d5cfe7843">add_value</link>&#32;(<link linkend="_struct_match_state">MatchState</link>&#32;*ms,&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;*b,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,
00904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tr)&#32;{
00905 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L&#32;=&#32;ms-&gt;<link linkend="_struct_match_state_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>;
00906 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(tr)&#32;{
00907 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1adaa7fa6e2561c1bc428ba8d265171494">LUA_TFUNCTION</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;call&#32;the&#32;function&#32;*/</emphasis>
00908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n;
00909 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a602f61a9b583d69dc1c72c8970bd65e8">lua_pushvalue</link>(L,&#32;3);&#32;&#32;<emphasis role="comment">/*&#32;push&#32;the&#32;function&#32;*/</emphasis>
00910 &#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;<link linkend="_lstrlib_8c_1ad14703c4bc40d7c1951dedb7bc7554f7">push_captures</link>(ms,&#32;s,&#32;e);&#32;&#32;<emphasis role="comment">/*&#32;all&#32;captures&#32;as&#32;arguments&#32;*/</emphasis>
00911 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a89cbf40f871b6fae2dd2df814c7ac1ba">lua_call</link>(L,&#32;n,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;call&#32;it&#32;*/</emphasis>
00912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00913 &#32;&#32;&#32;&#32;}
00914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a31620fd8da5b655b7879e16a116ec31a">LUA_TTABLE</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;index&#32;the&#32;table&#32;*/</emphasis>
00915 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a24a14b4e6e90bac4610dd334bb0b51b6">push_onecapture</link>(ms,&#32;0,&#32;s,&#32;e);&#32;&#32;<emphasis role="comment">/*&#32;first&#32;capture&#32;is&#32;the&#32;index&#32;*/</emphasis>
00916 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1aa572dbc6e86f796a3e82ffcae4478aeb">lua_gettable</link>(L,&#32;3);
00917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00918 &#32;&#32;&#32;&#32;}
00919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;LUA_TNUMBER&#32;or&#32;LUA_TSTRING&#32;*/</emphasis>
00920 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1ad5f7e3fbcadc8825f7f650ecf458fc72">add_s</link>(ms,&#32;b,&#32;s,&#32;e);&#32;&#32;<emphasis role="comment">/*&#32;add&#32;value&#32;to&#32;the&#32;buffer&#32;*/</emphasis>
00921 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;something&#32;changed&#32;*/</emphasis>
00922 &#32;&#32;&#32;&#32;}
00923 &#32;&#32;}
00924 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lapi_8c_1a444aee9aa56b0b06175ee3c7bcf7927c">lua_toboolean</link>(L,&#32;-1))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;nil&#32;or&#32;false?&#32;*/</emphasis>
00925 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;value&#32;*/</emphasis>
00926 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(b,&#32;s,&#32;e&#32;-&#32;s);&#32;&#32;<emphasis role="comment">/*&#32;keep&#32;original&#32;text&#32;*/</emphasis>
00927 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;changes&#32;*/</emphasis>
00928 &#32;&#32;}
00929 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lapi_8c_1a9f20233199a414b04c1c4b43f5d040f3">lua_isstring</link>(L,&#32;-1))
00930 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;invalid&#32;replacement&#32;value&#32;(a&#32;%s)&quot;</emphasis>,
00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a2bee94954917c5bccb05d6578f3c675b">luaL_typename</link>(L,&#32;-1));
00932 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00933 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a59a8ac34826fee305ad56101d97aee18">luaL_addvalue</link>(b);&#32;&#32;<emphasis role="comment">/*&#32;add&#32;result&#32;to&#32;accumulator&#32;*/</emphasis>
00934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;something&#32;changed&#32;*/</emphasis>
00935 &#32;&#32;}
00936 }
00937 
00938 
<anchor xml:id="_lstrlib_8c_source_1l00939"/><link linkend="_lstrlib_8c_1a42337c674d265175bcc2b2f3809c7339">00939</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a42337c674d265175bcc2b2f3809c7339">str_gsub</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00940 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;srcl,&#32;lp;
00941 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*src&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;srcl);&#32;&#32;<emphasis role="comment">/*&#32;subject&#32;*/</emphasis>
00942 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;2,&#32;&amp;lp);&#32;&#32;<emphasis role="comment">/*&#32;pattern&#32;*/</emphasis>
00943 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*lastmatch&#32;=&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;end&#32;of&#32;last&#32;match&#32;*/</emphasis>
00944 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tr&#32;=&#32;<link linkend="_lapi_8c_1a652b273947f0656686f998d8e90cd3ea">lua_type</link>(L,&#32;3);&#32;&#32;<emphasis role="comment">/*&#32;replacement&#32;type&#32;*/</emphasis>
00945 &#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;max_s&#32;=&#32;<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;4,&#32;srcl&#32;+&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;max&#32;replacements&#32;*/</emphasis>
00946 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;anchor&#32;=&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;^&apos;</emphasis>);
00947 &#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;n&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;replacement&#32;count&#32;*/</emphasis>
00948 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;changed&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;change&#32;flag&#32;*/</emphasis>
00949 &#32;&#32;<link linkend="_struct_match_state">MatchState</link>&#32;ms;
00950 &#32;&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;b;
00951 &#32;&#32;<link linkend="_lauxlib_8h_1ad13737dbd230fffc0b9925b1c728c58e">luaL_argexpected</link>(L,&#32;tr&#32;==&#32;<link linkend="_lua_8h_1a7f62ecb240cb38da9c8a53b41fe21ed9">LUA_TNUMBER</link>&#32;||&#32;tr&#32;==&#32;<link linkend="_lua_8h_1a57de20d87bb5131a3159f2bd52e3fab6">LUA_TSTRING</link>&#32;||
00952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tr&#32;==&#32;<link linkend="_lua_8h_1adaa7fa6e2561c1bc428ba8d265171494">LUA_TFUNCTION</link>&#32;||&#32;tr&#32;==&#32;<link linkend="_lua_8h_1a31620fd8da5b655b7879e16a116ec31a">LUA_TTABLE</link>,&#32;3,
00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;string/function/table&quot;</emphasis>);
00954 &#32;&#32;<link linkend="_lauxlib_8c_1a0830ef75e335f6d7590b0e058f82a5eb">luaL_buffinit</link>(L,&#32;&amp;b);
00955 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(anchor)&#32;{
00956 &#32;&#32;&#32;&#32;p++;&#32;lp--;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;anchor&#32;character&#32;*/</emphasis>
00957 &#32;&#32;}
00958 &#32;&#32;<link linkend="_lstrlib_8c_1a901e492edece737eb5d7197219fb0fa1">prepstate</link>(&amp;ms,&#32;L,&#32;src,&#32;srcl,&#32;p,&#32;lp);
00959 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(n&#32;&lt;&#32;max_s)&#32;{
00960 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*e;
00961 &#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a09158e3beed6006b5dd7d5329f4474c9">reprepstate</link>(&amp;ms);&#32;&#32;<emphasis role="comment">/*&#32;(re)prepare&#32;state&#32;for&#32;new&#32;match&#32;*/</emphasis>
00962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((e&#32;=&#32;<link linkend="_lstrlib_8c_1a52a45835b75e5d31ec66421456bbb728">match</link>(&amp;ms,&#32;src,&#32;p))&#32;!=&#32;NULL&#32;&amp;&amp;&#32;e&#32;!=&#32;lastmatch)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;match?&#32;*/</emphasis>
00963 &#32;&#32;&#32;&#32;&#32;&#32;n++;
00964 &#32;&#32;&#32;&#32;&#32;&#32;changed&#32;=&#32;<link linkend="_lstrlib_8c_1a853703c83ab694a70212461d5cfe7843">add_value</link>(&amp;ms,&#32;&amp;b,&#32;src,&#32;e,&#32;tr)&#32;|&#32;changed;
00965 &#32;&#32;&#32;&#32;&#32;&#32;src&#32;=&#32;lastmatch&#32;=&#32;e;
00966 &#32;&#32;&#32;&#32;}
00967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(src&#32;&lt;&#32;ms.<link linkend="_struct_match_state_1a8c42f98c8a3c104c2c9c811fe37dda64">src_end</link>)&#32;&#32;<emphasis role="comment">/*&#32;otherwise,&#32;skip&#32;one&#32;character&#32;*/</emphasis>
00968 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(&amp;b,&#32;*src++);
00969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;end&#32;of&#32;subject&#32;*/</emphasis>
00970 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(anchor)&#32;<emphasis role="keywordflow">break</emphasis>;
00971 &#32;&#32;}
00972 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!changed)&#32;&#32;<emphasis role="comment">/*&#32;no&#32;changes?&#32;*/</emphasis>
00973 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a602f61a9b583d69dc1c72c8970bd65e8">lua_pushvalue</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;return&#32;original&#32;string&#32;*/</emphasis>
00974 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;something&#32;changed&#32;*/</emphasis>
00975 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(&amp;b,&#32;src,&#32;ms.<link linkend="_struct_match_state_1a8c42f98c8a3c104c2c9c811fe37dda64">src_end</link>-src);
00976 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a3a1f80033814e2057583a7d24cee23b4">luaL_pushresult</link>(&amp;b);&#32;&#32;<emphasis role="comment">/*&#32;create&#32;and&#32;return&#32;new&#32;string&#32;*/</emphasis>
00977 &#32;&#32;}
00978 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;n);&#32;&#32;<emphasis role="comment">/*&#32;number&#32;of&#32;substitutions&#32;*/</emphasis>
00979 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;
00980 }
00981 
00982 <emphasis role="comment">/*&#32;}======================================================&#32;*/</emphasis>
00983 
00984 
00985 
00986 <emphasis role="comment">/*</emphasis>
00987 <emphasis role="comment">**&#32;{======================================================</emphasis>
00988 <emphasis role="comment">**&#32;STRING&#32;FORMAT</emphasis>
00989 <emphasis role="comment">**&#32;=======================================================</emphasis>
00990 <emphasis role="comment">*/</emphasis>
00991 
00992 <emphasis role="preprocessor">#if&#32;!defined(lua_number2strx)&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;{&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
00993 
00994 <emphasis role="comment">/*</emphasis>
00995 <emphasis role="comment">**&#32;Hexadecimal&#32;floating-point&#32;formatter</emphasis>
00996 <emphasis role="comment">*/</emphasis>
00997 
00998 <emphasis role="preprocessor">#define&#32;SIZELENMOD&#32;&#32;(sizeof(LUA_NUMBER_FRMLEN)/sizeof(char))</emphasis>
00999 
01000 
01001 <emphasis role="comment">/*</emphasis>
01002 <emphasis role="comment">**&#32;Number&#32;of&#32;bits&#32;that&#32;goes&#32;into&#32;the&#32;first&#32;digit.&#32;It&#32;can&#32;be&#32;any&#32;value</emphasis>
01003 <emphasis role="comment">**&#32;between&#32;1&#32;and&#32;4;&#32;the&#32;following&#32;definition&#32;tries&#32;to&#32;align&#32;the&#32;number</emphasis>
01004 <emphasis role="comment">**&#32;to&#32;nibble&#32;boundaries&#32;by&#32;making&#32;what&#32;is&#32;left&#32;after&#32;that&#32;first&#32;digit&#32;a</emphasis>
01005 <emphasis role="comment">**&#32;multiple&#32;of&#32;4.</emphasis>
01006 <emphasis role="comment">*/</emphasis>
01007 <emphasis role="preprocessor">#define&#32;L_NBFD&#32;&#32;&#32;&#32;&#32;&#32;((l_floatatt(MANT_DIG)&#32;-&#32;1)%4&#32;+&#32;1)</emphasis>
01008 
01009 
01010 <emphasis role="comment">/*</emphasis>
01011 <emphasis role="comment">**&#32;Add&#32;integer&#32;part&#32;of&#32;&apos;x&apos;&#32;to&#32;buffer&#32;and&#32;return&#32;new&#32;&apos;x&apos;</emphasis>
01012 <emphasis role="comment">*/</emphasis>
01013 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;adddigit&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*buff,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;x)&#32;{
01014 &#32;&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;dd&#32;=&#32;<link linkend="_luaconf_8h_1a919f548d82dc9a0681dd0ba8996d986d">l_mathop</link>(floor)(x);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;integer&#32;part&#32;from&#32;&apos;x&apos;&#32;*/</emphasis>
01015 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;d&#32;=&#32;(int)dd;
01016 &#32;&#32;buff[n]&#32;=&#32;(d&#32;&lt;&#32;10&#32;?&#32;d&#32;+&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;:&#32;d&#32;-&#32;10&#32;+&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;add&#32;to&#32;buffer&#32;*/</emphasis>
01017 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x&#32;-&#32;dd;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;what&#32;is&#32;left&#32;*/</emphasis>
01018 }
01019 
01020 
01021 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;num2straux&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*buff,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sz,&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;x)&#32;{
01022 &#32;&#32;<emphasis role="comment">/*&#32;if&#32;&apos;inf&apos;&#32;or&#32;&apos;NaN&apos;,&#32;format&#32;it&#32;like&#32;&apos;%g&apos;&#32;*/</emphasis>
01023 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;!=&#32;x&#32;||&#32;x&#32;==&#32;(<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>)HUGE_VAL&#32;||&#32;x&#32;==&#32;-(<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>)HUGE_VAL)
01024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;sz,&#32;<link linkend="_luaconf_8h_1a8d91a1bf1619825be5a0275c36f20216">LUA_NUMBER_FMT</link>,&#32;(<link linkend="_luaconf_8h_1ae3594e990592ab0bf7243dad64c76d2a">LUAI_UACNUMBER</link>)x);
01025 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x&#32;==&#32;0)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;can&#32;be&#32;-0...&#32;*/</emphasis>
01026 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;create&#32;&quot;0&quot;&#32;or&#32;&quot;-0&quot;&#32;followed&#32;by&#32;exponent&#32;*/</emphasis>
01027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;sz,&#32;<link linkend="_luaconf_8h_1a8d91a1bf1619825be5a0275c36f20216">LUA_NUMBER_FMT</link>&#32;<emphasis role="stringliteral">&quot;x0p+0&quot;</emphasis>,&#32;(<link linkend="_luaconf_8h_1ae3594e990592ab0bf7243dad64c76d2a">LUAI_UACNUMBER</link>)x);
01028 &#32;&#32;}
01029 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;e;
01031 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;m&#32;=&#32;<link linkend="_luaconf_8h_1a919f548d82dc9a0681dd0ba8996d986d">l_mathop</link>(frexp)(x,&#32;&amp;e);&#32;&#32;<emphasis role="comment">/*&#32;&apos;x&apos;&#32;fraction&#32;and&#32;exponent&#32;*/</emphasis>
01032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;character&#32;count&#32;*/</emphasis>
01033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;&lt;&#32;0)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;is&#32;number&#32;negative?&#32;*/</emphasis>
01034 &#32;&#32;&#32;&#32;&#32;&#32;buff[n++]&#32;=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;add&#32;sign&#32;*/</emphasis>
01035 &#32;&#32;&#32;&#32;&#32;&#32;m&#32;=&#32;-m;&#32;&#32;<emphasis role="comment">/*&#32;make&#32;it&#32;positive&#32;*/</emphasis>
01036 &#32;&#32;&#32;&#32;}
01037 &#32;&#32;&#32;&#32;buff[n++]&#32;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;&#32;buff[n++]&#32;=&#32;<emphasis role="charliteral">&apos;x&apos;</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;add&#32;&quot;0x&quot;&#32;*/</emphasis>
01038 &#32;&#32;&#32;&#32;m&#32;=&#32;adddigit(buff,&#32;n++,&#32;m&#32;*&#32;(1&#32;&lt;&lt;&#32;L_NBFD));&#32;&#32;<emphasis role="comment">/*&#32;add&#32;first&#32;digit&#32;*/</emphasis>
01039 &#32;&#32;&#32;&#32;e&#32;-=&#32;L_NBFD;&#32;&#32;<emphasis role="comment">/*&#32;this&#32;digit&#32;goes&#32;before&#32;the&#32;radix&#32;point&#32;*/</emphasis>
01040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;&gt;&#32;0)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;more&#32;digits?&#32;*/</emphasis>
01041 &#32;&#32;&#32;&#32;&#32;&#32;buff[n++]&#32;=&#32;<link linkend="_luaconf_8h_1a20bcdecbc9221570e70455f767061698">lua_getlocaledecpoint</link>();&#32;&#32;<emphasis role="comment">/*&#32;add&#32;radix&#32;point&#32;*/</emphasis>
01042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;add&#32;as&#32;many&#32;digits&#32;as&#32;needed&#32;*/</emphasis>
01043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m&#32;=&#32;adddigit(buff,&#32;n++,&#32;m&#32;*&#32;16);
01044 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(m&#32;&gt;&#32;0);
01045 &#32;&#32;&#32;&#32;}
01046 &#32;&#32;&#32;&#32;n&#32;+=&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff&#32;+&#32;n,&#32;sz&#32;-&#32;n,&#32;<emphasis role="stringliteral">&quot;p%+d&quot;</emphasis>,&#32;e);&#32;&#32;<emphasis role="comment">/*&#32;add&#32;exponent&#32;*/</emphasis>
01047 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(n&#32;&lt;&#32;sz);
01048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
01049 &#32;&#32;}
01050 }
01051 
01052 
01053 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_luaconf_8h_1aac67fd4fc4890ea6ee5a623abfae127a">lua_number2strx</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buff,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sz,
01054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*fmt,&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;x)&#32;{
01055 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;num2straux(buff,&#32;sz,&#32;x);
01056 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fmt[SIZELENMOD]&#32;==&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>)&#32;{
01057 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
01058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;i++)
01059 &#32;&#32;&#32;&#32;&#32;&#32;buff[i]&#32;=&#32;toupper(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(buff[i]));
01060 &#32;&#32;}
01061 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fmt[SIZELENMOD]&#32;!=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>)
01062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;modifiers&#32;for&#32;format&#32;&apos;%%a&apos;/&apos;%%A&apos;&#32;not&#32;implemented&quot;</emphasis>);
01063 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
01064 }
01065 
01066 <emphasis role="preprocessor">#endif&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;}&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
01067 
01068 
01069 <emphasis role="comment">/*</emphasis>
01070 <emphasis role="comment">**&#32;Maximum&#32;size&#32;for&#32;items&#32;formatted&#32;with&#32;&apos;%f&apos;.&#32;This&#32;size&#32;is&#32;produced</emphasis>
01071 <emphasis role="comment">**&#32;by&#32;format(&apos;%.99f&apos;,&#32;-maxfloat),&#32;and&#32;is&#32;equal&#32;to&#32;99&#32;+&#32;3&#32;(&apos;-&apos;,&#32;&apos;.&apos;,</emphasis>
01072 <emphasis role="comment">**&#32;and&#32;&apos;\0&apos;)&#32;+&#32;number&#32;of&#32;decimal&#32;digits&#32;to&#32;represent&#32;maxfloat&#32;(which</emphasis>
01073 <emphasis role="comment">**&#32;is&#32;maximum&#32;exponent&#32;+&#32;1).&#32;(99+3+1,&#32;adding&#32;some&#32;extra,&#32;110)</emphasis>
01074 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01075"/><link linkend="_lstrlib_8c_1ad6cc145aca66d79a348760712f5309ce">01075</link> <emphasis role="preprocessor">#define&#32;MAX_ITEMF&#32;&#32;&#32;(110&#32;+&#32;l_floatatt(MAX_10_EXP))</emphasis>
01076 
01077 
01078 <emphasis role="comment">/*</emphasis>
01079 <emphasis role="comment">**&#32;All&#32;formats&#32;except&#32;&apos;%f&apos;&#32;do&#32;not&#32;need&#32;that&#32;large&#32;limit.&#32;&#32;The&#32;other</emphasis>
01080 <emphasis role="comment">**&#32;float&#32;formats&#32;use&#32;exponents,&#32;so&#32;that&#32;they&#32;fit&#32;in&#32;the&#32;99&#32;limit&#32;for</emphasis>
01081 <emphasis role="comment">**&#32;significant&#32;digits;&#32;&apos;s&apos;&#32;for&#32;large&#32;strings&#32;and&#32;&apos;q&apos;&#32;add&#32;items&#32;directly</emphasis>
01082 <emphasis role="comment">**&#32;to&#32;the&#32;buffer;&#32;all&#32;integer&#32;formats&#32;also&#32;fit&#32;in&#32;the&#32;99&#32;limit.&#32;&#32;The</emphasis>
01083 <emphasis role="comment">**&#32;worst&#32;case&#32;are&#32;floats:&#32;they&#32;may&#32;need&#32;99&#32;significant&#32;digits,&#32;plus</emphasis>
01084 <emphasis role="comment">**&#32;&apos;0x&apos;,&#32;&apos;-&apos;,&#32;&apos;.&apos;,&#32;&apos;e+XXXX&apos;,&#32;and&#32;&apos;\0&apos;.&#32;Adding&#32;some&#32;extra,&#32;120.</emphasis>
01085 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01086"/><link linkend="_lstrlib_8c_1a2ab154b213c5fed0a1ba90ac8c1232e8">01086</link> <emphasis role="preprocessor">#define&#32;MAX_ITEM&#32;&#32;&#32;&#32;120</emphasis>
01087 
01088 
01089 <emphasis role="comment">/*&#32;valid&#32;flags&#32;in&#32;a&#32;format&#32;specification&#32;*/</emphasis>
01090 <emphasis role="preprocessor">#if&#32;!defined(L_FMTFLAGS)</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01091"/><link linkend="_lstrlib_8c_1aeba83a7f1d6dd6ad8d8dab4c41c7bcf3">01091</link> <emphasis role="preprocessor">#define&#32;L_FMTFLAGS&#32;&#32;&quot;-+&#32;#0&quot;</emphasis>
01092 <emphasis role="preprocessor">#endif</emphasis>
01093 
01094 
01095 <emphasis role="comment">/*</emphasis>
01096 <emphasis role="comment">**&#32;maximum&#32;size&#32;of&#32;each&#32;format&#32;specification&#32;(such&#32;as&#32;&quot;%-099.99d&quot;)</emphasis>
01097 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01098"/><link linkend="_lstrlib_8c_1a3703ed5438432f703bd9a5d7fa5f31e5">01098</link> <emphasis role="preprocessor">#define&#32;MAX_FORMAT&#32;&#32;32</emphasis>
01099 
01100 
<anchor xml:id="_lstrlib_8c_source_1l01101"/><link linkend="_lstrlib_8c_1a7c264397b481e5d854b43aaa37b0386f">01101</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a7c264397b481e5d854b43aaa37b0386f">addquoted</link>&#32;(<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;*b,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len)&#32;{
01102 &#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(b,&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
01103 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(len--)&#32;{
01104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*s&#32;==&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;||&#32;*s&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>&#32;||&#32;*s&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;{
01105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(b,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>);
01106 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(b,&#32;*s);
01107 &#32;&#32;&#32;&#32;}
01108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(iscntrl(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*s)))&#32;{
01109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buff[10];
01110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isdigit(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*(s+1))))
01111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;<emphasis role="keyword">sizeof</emphasis>(buff),&#32;<emphasis role="stringliteral">&quot;\\%d&quot;</emphasis>,&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*s));
01112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;<emphasis role="keyword">sizeof</emphasis>(buff),&#32;<emphasis role="stringliteral">&quot;\\%03d&quot;</emphasis>,&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*s));
01114 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1aced031f9a3f68375e9f80315933d9a88">luaL_addstring</link>(b,&#32;buff);
01115 &#32;&#32;&#32;&#32;}
01116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01117 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(b,&#32;*s);
01118 &#32;&#32;&#32;&#32;s++;
01119 &#32;&#32;}
01120 &#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(b,&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
01121 }
01122 
01123 
01124 <emphasis role="comment">/*</emphasis>
01125 <emphasis role="comment">**&#32;Serialize&#32;a&#32;floating-point&#32;number&#32;in&#32;such&#32;a&#32;way&#32;that&#32;it&#32;can&#32;be</emphasis>
01126 <emphasis role="comment">**&#32;scanned&#32;back&#32;by&#32;Lua.&#32;Use&#32;hexadecimal&#32;format&#32;for&#32;&quot;common&quot;&#32;numbers</emphasis>
01127 <emphasis role="comment">**&#32;(to&#32;preserve&#32;precision);&#32;inf,&#32;-inf,&#32;and&#32;NaN&#32;are&#32;handled&#32;separately.</emphasis>
01128 <emphasis role="comment">**&#32;(NaN&#32;cannot&#32;be&#32;expressed&#32;as&#32;a&#32;numeral,&#32;so&#32;we&#32;write&#32;&apos;(0/0)&apos;&#32;for&#32;it.)</emphasis>
01129 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01130"/><link linkend="_lstrlib_8c_1a443e80174fa539c37a640e5e6f65212c">01130</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a443e80174fa539c37a640e5e6f65212c">quotefloat</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buff,&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;n)&#32;{
01131 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s;&#32;&#32;<emphasis role="comment">/*&#32;for&#32;the&#32;fixed&#32;representations&#32;*/</emphasis>
01132 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;==&#32;(<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>)HUGE_VAL)&#32;&#32;<emphasis role="comment">/*&#32;inf?&#32;*/</emphasis>
01133 &#32;&#32;&#32;&#32;s&#32;=&#32;<emphasis role="stringliteral">&quot;1e9999&quot;</emphasis>;
01134 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;==&#32;-(<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>)HUGE_VAL)&#32;&#32;<emphasis role="comment">/*&#32;-inf?&#32;*/</emphasis>
01135 &#32;&#32;&#32;&#32;s&#32;=&#32;<emphasis role="stringliteral">&quot;-1e9999&quot;</emphasis>;
01136 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;!=&#32;n)&#32;&#32;<emphasis role="comment">/*&#32;NaN?&#32;*/</emphasis>
01137 &#32;&#32;&#32;&#32;s&#32;=&#32;<emphasis role="stringliteral">&quot;(0/0)&quot;</emphasis>;
01138 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;format&#32;number&#32;as&#32;hexadecimal&#32;*/</emphasis>
01139 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;nb&#32;=&#32;<link linkend="_luaconf_8h_1aac67fd4fc4890ea6ee5a623abfae127a">lua_number2strx</link>(L,&#32;buff,&#32;<link linkend="_lstrlib_8c_1a2ab154b213c5fed0a1ba90ac8c1232e8">MAX_ITEM</link>,
01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%&quot;</emphasis>&#32;<link linkend="_luaconf_8h_1a673aa80d0742c8b420ddd05844432d80">LUA_NUMBER_FRMLEN</link>&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>,&#32;n);
01141 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;ensures&#32;that&#32;&apos;buff&apos;&#32;string&#32;uses&#32;a&#32;dot&#32;as&#32;the&#32;radix&#32;character&#32;*/</emphasis>
01142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memchr(buff,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>,&#32;nb)&#32;==&#32;NULL)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;no&#32;dot?&#32;*/</emphasis>
01143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;point&#32;=&#32;<link linkend="_luaconf_8h_1a20bcdecbc9221570e70455f767061698">lua_getlocaledecpoint</link>();&#32;&#32;<emphasis role="comment">/*&#32;try&#32;locale&#32;point&#32;*/</emphasis>
01144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ppoint&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)memchr(buff,&#32;point,&#32;nb);
01145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ppoint)&#32;*ppoint&#32;=&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;change&#32;it&#32;to&#32;a&#32;dot&#32;*/</emphasis>
01146 &#32;&#32;&#32;&#32;}
01147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nb;
01148 &#32;&#32;}
01149 &#32;&#32;<emphasis role="comment">/*&#32;for&#32;the&#32;fixed&#32;representations&#32;*/</emphasis>
01150 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;<link linkend="_lstrlib_8c_1a2ab154b213c5fed0a1ba90ac8c1232e8">MAX_ITEM</link>,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;s);
01151 }
01152 
01153 
<anchor xml:id="_lstrlib_8c_source_1l01154"/><link linkend="_lstrlib_8c_1a2ff59847baa24a18f7d78d47dc1d3220">01154</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a2ff59847baa24a18f7d78d47dc1d3220">addliteral</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;*b,&#32;<emphasis role="keywordtype">int</emphasis>&#32;arg)&#32;{
01155 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_lapi_8c_1a652b273947f0656686f998d8e90cd3ea">lua_type</link>(L,&#32;arg))&#32;{
01156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a57de20d87bb5131a3159f2bd52e3fab6">LUA_TSTRING</link>:&#32;{
01157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len;
01158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lapi_8c_1a3fc7dbcac3f2610f3d687ec15343bd3f">lua_tolstring</link>(L,&#32;arg,&#32;&amp;len);
01159 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a7c264397b481e5d854b43aaa37b0386f">addquoted</link>(b,&#32;s,&#32;len);
01160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01161 &#32;&#32;&#32;&#32;}
01162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a7f62ecb240cb38da9c8a53b41fe21ed9">LUA_TNUMBER</link>:&#32;{
01163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buff&#32;=&#32;<link linkend="_lauxlib_8c_1ae695ed340bec54979c499b70d7d29318">luaL_prepbuffsize</link>(b,&#32;<link linkend="_lstrlib_8c_1a2ab154b213c5fed0a1ba90ac8c1232e8">MAX_ITEM</link>);
01164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nb;
01165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lapi_8c_1aba53e83eb1fff94b5ed96203bb52d8ae">lua_isinteger</link>(L,&#32;arg))&#32;&#32;<emphasis role="comment">/*&#32;float?&#32;*/</emphasis>
01166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nb&#32;=&#32;<link linkend="_lstrlib_8c_1a443e80174fa539c37a640e5e6f65212c">quotefloat</link>(L,&#32;buff,&#32;<link linkend="_lua_8h_1a3237a0507d51d772dadd4c560a75af17">lua_tonumber</link>(L,&#32;arg));
01167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;integers&#32;*/</emphasis>
01168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;n&#32;=&#32;<link linkend="_lua_8h_1a1365e48377a3b567e9d88423b2a6345c">lua_tointeger</link>(L,&#32;arg);
01169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*format&#32;=&#32;(n&#32;==&#32;LUA_MININTEGER)&#32;&#32;<emphasis role="comment">/*&#32;corner&#32;case?&#32;*/</emphasis>
01170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="stringliteral">&quot;0x%&quot;</emphasis>&#32;LUA_INTEGER_FRMLEN&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;use&#32;hex&#32;*/</emphasis>
01171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_luaconf_8h_1a0147f0a7d04c83b70f691a7549c1e3ed">LUA_INTEGER_FMT</link>;&#32;&#32;<emphasis role="comment">/*&#32;else&#32;use&#32;default&#32;format&#32;*/</emphasis>
01172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nb&#32;=&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;<link linkend="_lstrlib_8c_1a2ab154b213c5fed0a1ba90ac8c1232e8">MAX_ITEM</link>,&#32;format,&#32;(<link linkend="_luaconf_8h_1a7a9d650ef5ea12d81160db595fe9f177">LUAI_UACINT</link>)n);
01173 &#32;&#32;&#32;&#32;&#32;&#32;}
01174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a7c0adb7401e0be1a843946cee0556684">luaL_addsize</link>(b,&#32;nb);
01175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01176 &#32;&#32;&#32;&#32;}
01177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1ae38a6fb8c687b8bfab211b7675a695ef">LUA_TNIL</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a611808ed12d4c2aee2a9e298a9d9a9bf">LUA_TBOOLEAN</link>:&#32;{
01178 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0d4cbfd194d1919b3ff84000c0644cc0">luaL_tolstring</link>(L,&#32;arg,&#32;NULL);
01179 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a59a8ac34826fee305ad56101d97aee18">luaL_addvalue</link>(b);
01180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01181 &#32;&#32;&#32;&#32;}
01182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{
01183 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1ac607576dd107a3120cd51948989f1ed2">luaL_argerror</link>(L,&#32;arg,&#32;<emphasis role="stringliteral">&quot;value&#32;has&#32;no&#32;literal&#32;form&quot;</emphasis>);
01184 &#32;&#32;&#32;&#32;}
01185 &#32;&#32;}
01186 }
01187 
01188 
<anchor xml:id="_lstrlib_8c_source_1l01189"/><link linkend="_lstrlib_8c_1aa02d130952004540df86ae92853cfc22">01189</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_lstrlib_8c_1aa02d130952004540df86ae92853cfc22">scanformat</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*strfrmt,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*form)&#32;{
01190 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;strfrmt;
01191 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*p&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;&amp;&amp;&#32;strchr(<link linkend="_lstrlib_8c_1aeba83a7f1d6dd6ad8d8dab4c41c7bcf3">L_FMTFLAGS</link>,&#32;*p)&#32;!=&#32;NULL)&#32;p++;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;flags&#32;*/</emphasis>
01192 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="keywordtype">size_t</emphasis>)(p&#32;-&#32;strfrmt)&#32;&gt;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_lstrlib_8c_1aeba83a7f1d6dd6ad8d8dab4c41c7bcf3">L_FMTFLAGS</link>)/<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>))
01193 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;invalid&#32;format&#32;(repeated&#32;flags)&quot;</emphasis>);
01194 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isdigit(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p)))&#32;p++;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;width&#32;*/</emphasis>
01195 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isdigit(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p)))&#32;p++;&#32;&#32;<emphasis role="comment">/*&#32;(2&#32;digits&#32;at&#32;most)&#32;*/</emphasis>
01196 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;{
01197 &#32;&#32;&#32;&#32;p++;
01198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isdigit(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p)))&#32;p++;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;precision&#32;*/</emphasis>
01199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isdigit(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p)))&#32;p++;&#32;&#32;<emphasis role="comment">/*&#32;(2&#32;digits&#32;at&#32;most)&#32;*/</emphasis>
01200 &#32;&#32;}
01201 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isdigit(<link linkend="_lstrlib_8c_1a6688a561ddcc83633d4fabc5d3409539">uchar</link>(*p)))
01202 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;invalid&#32;format&#32;(width&#32;or&#32;precision&#32;too&#32;long)&quot;</emphasis>);
01203 &#32;&#32;*(form++)&#32;=&#32;<emphasis role="charliteral">&apos;%&apos;</emphasis>;
01204 &#32;&#32;memcpy(form,&#32;strfrmt,&#32;((p&#32;-&#32;strfrmt)&#32;+&#32;1)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>));
01205 &#32;&#32;form&#32;+=&#32;(p&#32;-&#32;strfrmt)&#32;+&#32;1;
01206 &#32;&#32;*form&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
01207 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
01208 }
01209 
01210 
01211 <emphasis role="comment">/*</emphasis>
01212 <emphasis role="comment">**&#32;add&#32;length&#32;modifier&#32;into&#32;formats</emphasis>
01213 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01214"/><link linkend="_lstrlib_8c_1ab2a1b8d58b32a55a2702025f3445db3d">01214</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1ab2a1b8d58b32a55a2702025f3445db3d">addlenmod</link>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*form,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*lenmod)&#32;{
01215 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l&#32;=&#32;strlen(form);
01216 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;lm&#32;=&#32;strlen(lenmod);
01217 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;spec&#32;=&#32;form[l&#32;-&#32;1];
01218 &#32;&#32;strcpy(form&#32;+&#32;l&#32;-&#32;1,&#32;lenmod);
01219 &#32;&#32;form[l&#32;+&#32;lm&#32;-&#32;1]&#32;=&#32;spec;
01220 &#32;&#32;form[l&#32;+&#32;lm]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
01221 }
01222 
01223 
<anchor xml:id="_lstrlib_8c_source_1l01224"/><link linkend="_lstrlib_8c_1ae26a9374857058119e59d0328208c2f2">01224</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ae26a9374857058119e59d0328208c2f2">str_format</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01225 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;top&#32;=&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L);
01226 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;arg&#32;=&#32;1;
01227 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;sfl;
01228 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*strfrmt&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;arg,&#32;&amp;sfl);
01229 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*strfrmt_end&#32;=&#32;strfrmt+sfl;
01230 &#32;&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;b;
01231 &#32;&#32;<link linkend="_lauxlib_8c_1a0830ef75e335f6d7590b0e058f82a5eb">luaL_buffinit</link>(L,&#32;&amp;b);
01232 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(strfrmt&#32;&lt;&#32;strfrmt_end)&#32;{
01233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*strfrmt&#32;!=&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>)
01234 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(&amp;b,&#32;*strfrmt++);
01235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*++strfrmt&#32;==&#32;<link linkend="_lstrlib_8c_1a62bae5b2b26cf1e4fdf37e42d3c53df9">L_ESC</link>)
01236 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(&amp;b,&#32;*strfrmt++);&#32;&#32;<emphasis role="comment">/*&#32;%%&#32;*/</emphasis>
01237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">/*&#32;format&#32;item&#32;*/</emphasis>
01238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;form[<link linkend="_lstrlib_8c_1a3703ed5438432f703bd9a5d7fa5f31e5">MAX_FORMAT</link>];&#32;&#32;<emphasis role="comment">/*&#32;to&#32;store&#32;the&#32;format&#32;(&apos;%...&apos;)&#32;*/</emphasis>
01239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxitem&#32;=&#32;<link linkend="_lstrlib_8c_1a2ab154b213c5fed0a1ba90ac8c1232e8">MAX_ITEM</link>;
01240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buff&#32;=&#32;<link linkend="_lauxlib_8c_1ae695ed340bec54979c499b70d7d29318">luaL_prepbuffsize</link>(&amp;b,&#32;maxitem);&#32;&#32;<emphasis role="comment">/*&#32;to&#32;put&#32;formatted&#32;item&#32;*/</emphasis>
01241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nb&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;number&#32;of&#32;bytes&#32;in&#32;added&#32;item&#32;*/</emphasis>
01242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++arg&#32;&gt;&#32;top)
01243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1ac607576dd107a3120cd51948989f1ed2">luaL_argerror</link>(L,&#32;arg,&#32;<emphasis role="stringliteral">&quot;no&#32;value&quot;</emphasis>);
01244 &#32;&#32;&#32;&#32;&#32;&#32;strfrmt&#32;=&#32;<link linkend="_lstrlib_8c_1aa02d130952004540df86ae92853cfc22">scanformat</link>(L,&#32;strfrmt,&#32;form);
01245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(*strfrmt++)&#32;{
01246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;c&apos;</emphasis>:&#32;{
01247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nb&#32;=&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;maxitem,&#32;form,&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;arg));
01248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>:
01251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;o&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;x&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;X&apos;</emphasis>:&#32;{
01252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;n&#32;=&#32;<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;arg);
01253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1ab2a1b8d58b32a55a2702025f3445db3d">addlenmod</link>(form,&#32;LUA_INTEGER_FRMLEN);
01254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nb&#32;=&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;maxitem,&#32;form,&#32;(<link linkend="_luaconf_8h_1a7a9d650ef5ea12d81160db595fe9f177">LUAI_UACINT</link>)n);
01255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>:
01258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1ab2a1b8d58b32a55a2702025f3445db3d">addlenmod</link>(form,&#32;<link linkend="_luaconf_8h_1a673aa80d0742c8b420ddd05844432d80">LUA_NUMBER_FRMLEN</link>);
01259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nb&#32;=&#32;<link linkend="_luaconf_8h_1aac67fd4fc4890ea6ee5a623abfae127a">lua_number2strx</link>(L,&#32;buff,&#32;maxitem,&#32;form,
01260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a9f2c941bb5eb7d3a7746f35c4fe3cced">luaL_checknumber</link>(L,&#32;arg));
01261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>:
01263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxitem&#32;=&#32;<link linkend="_lstrlib_8c_1ad6cc145aca66d79a348760712f5309ce">MAX_ITEMF</link>;&#32;&#32;<emphasis role="comment">/*&#32;extra&#32;space&#32;for&#32;&apos;%f&apos;&#32;*/</emphasis>
01264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buff&#32;=&#32;<link linkend="_lauxlib_8c_1ae695ed340bec54979c499b70d7d29318">luaL_prepbuffsize</link>(&amp;b,&#32;maxitem);
01265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;FALLTHROUGH&#32;*/</emphasis>
01266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;g&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;G&apos;</emphasis>:&#32;{
01267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;n&#32;=&#32;<link linkend="_lauxlib_8c_1a9f2c941bb5eb7d3a7746f35c4fe3cced">luaL_checknumber</link>(L,&#32;arg);
01268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1ab2a1b8d58b32a55a2702025f3445db3d">addlenmod</link>(form,&#32;<link linkend="_luaconf_8h_1a673aa80d0742c8b420ddd05844432d80">LUA_NUMBER_FRMLEN</link>);
01269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nb&#32;=&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;maxitem,&#32;form,&#32;(<link linkend="_luaconf_8h_1ae3594e990592ab0bf7243dad64c76d2a">LUAI_UACNUMBER</link>)n);
01270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;p&apos;</emphasis>:&#32;{
01273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*p&#32;=&#32;<link linkend="_lapi_8c_1a5b533fe96cb52b5415896d41daad374a">lua_topointer</link>(L,&#32;arg);
01274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;==&#32;NULL)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;avoid&#32;calling&#32;&apos;printf&apos;&#32;with&#32;argument&#32;NULL&#32;*/</emphasis>
01275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;<emphasis role="stringliteral">&quot;(null)&quot;</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;result&#32;*/</emphasis>
01276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;form[strlen(form)&#32;-&#32;1]&#32;=&#32;<emphasis role="charliteral">&apos;s&apos;</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;format&#32;it&#32;as&#32;a&#32;string&#32;*/</emphasis>
01277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nb&#32;=&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;maxitem,&#32;form,&#32;p);
01279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;q&apos;</emphasis>:&#32;{
01282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(form[2]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;&#32;<emphasis role="comment">/*&#32;modifiers?&#32;*/</emphasis>
01283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;specifier&#32;&apos;%%q&apos;&#32;cannot&#32;have&#32;modifiers&quot;</emphasis>);
01284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a2ff59847baa24a18f7d78d47dc1d3220">addliteral</link>(L,&#32;&amp;b,&#32;arg);
01285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;s&apos;</emphasis>:&#32;{
01288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l;
01289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a0d4cbfd194d1919b3ff84000c0644cc0">luaL_tolstring</link>(L,&#32;arg,&#32;&amp;l);
01290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(form[2]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;&#32;<emphasis role="comment">/*&#32;no&#32;modifiers?&#32;*/</emphasis>
01291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a59a8ac34826fee305ad56101d97aee18">luaL_addvalue</link>(&amp;b);&#32;&#32;<emphasis role="comment">/*&#32;keep&#32;entire&#32;string&#32;*/</emphasis>
01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;l&#32;==&#32;strlen(s),&#32;arg,&#32;<emphasis role="stringliteral">&quot;string&#32;contains&#32;zeros&quot;</emphasis>);
01294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strchr(form,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;&amp;&amp;&#32;l&#32;&gt;=&#32;100)&#32;{
01295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;precision&#32;and&#32;string&#32;is&#32;too&#32;long&#32;to&#32;be&#32;formatted&#32;*/</emphasis>
01296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a59a8ac34826fee305ad56101d97aee18">luaL_addvalue</link>(&amp;b);&#32;&#32;<emphasis role="comment">/*&#32;keep&#32;entire&#32;string&#32;*/</emphasis>
01297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;format&#32;the&#32;string&#32;into&#32;&apos;buff&apos;&#32;*/</emphasis>
01299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nb&#32;=&#32;<link linkend="_ltests_8h_1a66e2cc299fcf55c169a67b5b3781a955">l_sprintf</link>(buff,&#32;maxitem,&#32;form,&#32;s);
01300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;result&#32;from&#32;&apos;luaL_tolstring&apos;&#32;*/</emphasis>
01301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;also&#32;treat&#32;cases&#32;&apos;pnLlh&apos;&#32;*/</emphasis>
01306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;invalid&#32;conversion&#32;&apos;%s&apos;&#32;to&#32;&apos;format&apos;&quot;</emphasis>,&#32;form);
01307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01308 &#32;&#32;&#32;&#32;&#32;&#32;}
01309 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(nb&#32;&lt;&#32;maxitem);
01310 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a7c0adb7401e0be1a843946cee0556684">luaL_addsize</link>(&amp;b,&#32;nb);
01311 &#32;&#32;&#32;&#32;}
01312 &#32;&#32;}
01313 &#32;&#32;<link linkend="_lauxlib_8c_1a3a1f80033814e2057583a7d24cee23b4">luaL_pushresult</link>(&amp;b);
01314 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01315 }
01316 
01317 <emphasis role="comment">/*&#32;}======================================================&#32;*/</emphasis>
01318 
01319 
01320 <emphasis role="comment">/*</emphasis>
01321 <emphasis role="comment">**&#32;{======================================================</emphasis>
01322 <emphasis role="comment">**&#32;PACK/UNPACK</emphasis>
01323 <emphasis role="comment">**&#32;=======================================================</emphasis>
01324 <emphasis role="comment">*/</emphasis>
01325 
01326 
01327 <emphasis role="comment">/*&#32;value&#32;used&#32;for&#32;padding&#32;*/</emphasis>
01328 <emphasis role="preprocessor">#if&#32;!defined(LUAL_PACKPADBYTE)</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01329"/><link linkend="_lstrlib_8c_1a018375fe92d4433fa5e346266ff0fce0">01329</link> <emphasis role="preprocessor">#define&#32;LUAL_PACKPADBYTE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x00</emphasis>
01330 <emphasis role="preprocessor">#endif</emphasis>
01331 
01332 <emphasis role="comment">/*&#32;maximum&#32;size&#32;for&#32;the&#32;binary&#32;representation&#32;of&#32;an&#32;integer&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01333"/><link linkend="_lstrlib_8c_1a3b8c10300729d575cc5a024f4d047a31">01333</link> <emphasis role="preprocessor">#define&#32;MAXINTSIZE&#32;&#32;16</emphasis>
01334 
01335 <emphasis role="comment">/*&#32;number&#32;of&#32;bits&#32;in&#32;a&#32;character&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01336"/><link linkend="_lstrlib_8c_1a58e95dc1eb9d6ce16f515e77beeadd58">01336</link> <emphasis role="preprocessor">#define&#32;NB&#32;&#32;CHAR_BIT</emphasis>
01337 
01338 <emphasis role="comment">/*&#32;mask&#32;for&#32;one&#32;character&#32;(NB&#32;1&apos;s)&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01339"/><link linkend="_lstrlib_8c_1a71d9e511e7e302cd831e83581219e70d">01339</link> <emphasis role="preprocessor">#define&#32;MC&#32;&#32;((1&#32;&lt;&lt;&#32;NB)&#32;-&#32;1)</emphasis>
01340 
01341 <emphasis role="comment">/*&#32;size&#32;of&#32;a&#32;lua_Integer&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01342"/><link linkend="_lstrlib_8c_1aba1923a486465ba9dea97b9d1403ce18">01342</link> <emphasis role="preprocessor">#define&#32;SZINT&#32;&#32;&#32;((int)sizeof(lua_Integer))</emphasis>
01343 
01344 
01345 <emphasis role="comment">/*&#32;dummy&#32;union&#32;to&#32;get&#32;native&#32;endianness&#32;*/</emphasis>
01346 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">union&#32;</emphasis>{
<anchor xml:id="_lstrlib_8c_source_1l01347"/><link linkend="_lstrlib_8c_1a7c1d654b7b6114d7a0abc8d351dd1bcd">01347</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a7c1d654b7b6114d7a0abc8d351dd1bcd">dummy</link>;
<anchor xml:id="_lstrlib_8c_source_1l01348"/><link linkend="_lstrlib_8c_1a5831a9b38577f9ef9b30553737b5b7f9">01348</link> &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_lstrlib_8c_1a5831a9b38577f9ef9b30553737b5b7f9">little</link>;&#32;&#32;<emphasis role="comment">/*&#32;true&#32;iff&#32;machine&#32;is&#32;little&#32;endian&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01349"/><link linkend="_lstrlib_8c_1a8c97bd33d32d5879ec6498232a52f4b5">01349</link> }&#32;<link linkend="_lstrlib_8c_1a8c97bd33d32d5879ec6498232a52f4b5">nativeendian</link>&#32;=&#32;{1};
01350 
01351 
01352 <emphasis role="comment">/*&#32;dummy&#32;structure&#32;to&#32;get&#32;native&#32;alignment&#32;requirements&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01353"/><link linkend="_structc_d">01353</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structc_d">cD</link>&#32;{
<anchor xml:id="_lstrlib_8c_source_1l01354"/><link linkend="_structc_d_1adc08ed1554f35803d229aeaf11216b3f">01354</link> &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_structc_d_1adc08ed1554f35803d229aeaf11216b3f">c</link>;
<anchor xml:id="_lstrlib_8c_source_1l01355"/><link linkend="_structc_d_1a97132391d1e34274ecc736cbaaf6f1a8">01355</link> &#32;&#32;<emphasis role="keyword">union&#32;</emphasis>{&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structc_d_1a873684cefeb665f3d5e6b495de57fc0d">d</link>;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_structc_d_1a117104b82864d3b23ec174af6d392709">p</link>;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;<link linkend="_structc_d_1a5bfb8f000fff9f547fdcebfb5ce512d6">i</link>;&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;<link linkend="_structc_d_1a645eebf23efeaafc3b9ac3671073031d">n</link>;&#32;}&#32;<link linkend="_structc_d_1a97132391d1e34274ecc736cbaaf6f1a8">u</link>;
01356 };
01357 
<anchor xml:id="_lstrlib_8c_source_1l01358"/><link linkend="_lstrlib_8c_1a12f0ea602f7d7ba33730a7519dfcb4d3">01358</link> <emphasis role="preprocessor">#define&#32;MAXALIGN&#32;&#32;&#32;&#32;(offsetof(struct&#32;cD,&#32;u))</emphasis>
01359 
01360 
01361 <emphasis role="comment">/*</emphasis>
01362 <emphasis role="comment">**&#32;Union&#32;for&#32;serializing&#32;floats</emphasis>
01363 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01364"/><link linkend="_union_ftypes">01364</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">union&#32;</emphasis><link linkend="_union_ftypes">Ftypes</link>&#32;{
<anchor xml:id="_lstrlib_8c_source_1l01365"/><link linkend="_union_ftypes_1af900396d7b72ff2a7002e8befe8cf8f1">01365</link> &#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_union_ftypes_1af900396d7b72ff2a7002e8befe8cf8f1">f</link>;
<anchor xml:id="_lstrlib_8c_source_1l01366"/><link linkend="_union_ftypes_1a873684cefeb665f3d5e6b495de57fc0d">01366</link> &#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_union_ftypes_1a873684cefeb665f3d5e6b495de57fc0d">d</link>;
<anchor xml:id="_lstrlib_8c_source_1l01367"/><link linkend="_union_ftypes_1a645eebf23efeaafc3b9ac3671073031d">01367</link> &#32;&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;<link linkend="_union_ftypes_1a645eebf23efeaafc3b9ac3671073031d">n</link>;
<anchor xml:id="_lstrlib_8c_source_1l01368"/><link linkend="_union_ftypes_1adc33b6e4dfbfc1649604b03f31d3bac9">01368</link> &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_union_ftypes_1adc33b6e4dfbfc1649604b03f31d3bac9">buff</link>[5&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>)];&#32;&#32;<emphasis role="comment">/*&#32;enough&#32;for&#32;any&#32;float&#32;type&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01369"/><link linkend="_lstrlib_8c_1ad06b1f15168660f54ab9c3a914752697">01369</link> }&#32;<link linkend="_lstrlib_8c_1ad06b1f15168660f54ab9c3a914752697">Ftypes</link>;
01370 
01371 
01372 <emphasis role="comment">/*</emphasis>
01373 <emphasis role="comment">**&#32;information&#32;to&#32;pack/unpack&#32;stuff</emphasis>
01374 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01375"/><link linkend="_struct_header">01375</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_header">Header</link>&#32;{
<anchor xml:id="_lstrlib_8c_source_1l01376"/><link linkend="_struct_header_1a62f94dfc0036bec0c14106c2f15caf3e">01376</link> &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*<link linkend="_struct_header_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>;
<anchor xml:id="_lstrlib_8c_source_1l01377"/><link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">01377</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>;
<anchor xml:id="_lstrlib_8c_source_1l01378"/><link linkend="_struct_header_1aa607b618e171e144512ba14bf10a485e">01378</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_header_1aa607b618e171e144512ba14bf10a485e">maxalign</link>;
<anchor xml:id="_lstrlib_8c_source_1l01379"/><link linkend="_lstrlib_8c_1aa8c0271842d616f53f294da8891f6485">01379</link> }&#32;<link linkend="_lstrlib_8c_1aa8c0271842d616f53f294da8891f6485">Header</link>;
01380 
01381 
01382 <emphasis role="comment">/*</emphasis>
01383 <emphasis role="comment">**&#32;options&#32;for&#32;pack/unpack</emphasis>
01384 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01385"/><link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45">01385</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45">KOption</link>&#32;{
<anchor xml:id="_lstrlib_8c_source_1l01386"/><link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">01386</link> &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">Kint</link>,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;signed&#32;integers&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01387"/><link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">01387</link> &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">Kuint</link>,&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;unsigned&#32;integers&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01388"/><link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a15dc86646bf410c0d3ac998689ffe7f7">01388</link> &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a15dc86646bf410c0d3ac998689ffe7f7">Kfloat</link>,&#32;&#32;&#32;<emphasis role="comment">/*&#32;floating-point&#32;numbers&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01389"/><link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ab2624b4f2d20c51e0eb6c668077dcbcd">01389</link> &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ab2624b4f2d20c51e0eb6c668077dcbcd">Kchar</link>,&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;fixed-length&#32;strings&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01390"/><link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45aa6aa8fb7b455739115fbd6c0dc3d4560">01390</link> &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45aa6aa8fb7b455739115fbd6c0dc3d4560">Kstring</link>,&#32;&#32;<emphasis role="comment">/*&#32;strings&#32;with&#32;prefixed&#32;length&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01391"/><link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ac4bf277f1cd2aaa95fe31d646e02aa37">01391</link> &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ac4bf277f1cd2aaa95fe31d646e02aa37">Kzstr</link>,&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;zero-terminated&#32;strings&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01392"/><link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a4252bf39cf9d76c3e034e248ce7bed49">01392</link> &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a4252bf39cf9d76c3e034e248ce7bed49">Kpadding</link>,&#32;<emphasis role="comment">/*&#32;padding&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01393"/><link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a2c01775a8eeb3f674f74c65786808279">01393</link> &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a2c01775a8eeb3f674f74c65786808279">Kpaddalign</link>,&#32;&#32;&#32;<emphasis role="comment">/*&#32;padding&#32;for&#32;alignment&#32;*/</emphasis>
01394 &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a0ca5045efff0f1f863cff5614e3e92b7">Knop</link>&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;no-op&#32;(configuration&#32;or&#32;spaces)&#32;*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01395"/><link linkend="_lstrlib_8c_1af99a797330eae00c0dbccd075acc9887">01395</link> }&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45">KOption</link>;
01396 
01397 
01398 <emphasis role="comment">/*</emphasis>
01399 <emphasis role="comment">**&#32;Read&#32;an&#32;integer&#32;numeral&#32;from&#32;string&#32;&apos;fmt&apos;&#32;or&#32;return&#32;&apos;df&apos;&#32;if</emphasis>
01400 <emphasis role="comment">**&#32;there&#32;is&#32;no&#32;numeral</emphasis>
01401 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01402"/><link linkend="_lstrlib_8c_1a9605f4d16ae762782f8be8b54aef0a22">01402</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a9605f4d16ae762782f8be8b54aef0a22">digit</link>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;c)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>;&#32;}
01403 
<anchor xml:id="_lstrlib_8c_source_1l01404"/><link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">01404</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**fmt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;df)&#32;{
01405 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lstrlib_8c_1a9605f4d16ae762782f8be8b54aef0a22">digit</link>(**fmt))&#32;&#32;<emphasis role="comment">/*&#32;no&#32;number?&#32;*/</emphasis>
01406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;df;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;default&#32;value&#32;*/</emphasis>
01407 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01408 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;0;
01409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
01410 &#32;&#32;&#32;&#32;&#32;&#32;a&#32;=&#32;a*10&#32;+&#32;(*((*fmt)++)&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
01411 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_lstrlib_8c_1a9605f4d16ae762782f8be8b54aef0a22">digit</link>(**fmt)&#32;&amp;&amp;&#32;a&#32;&lt;=&#32;((<emphasis role="keywordtype">int</emphasis>)<link linkend="_lstrlib_8c_1a2a37b4217917105aac7557862ccc19c3">MAXSIZE</link>&#32;-&#32;9)/10);
01412 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;a;
01413 &#32;&#32;}
01414 }
01415 
01416 
01417 <emphasis role="comment">/*</emphasis>
01418 <emphasis role="comment">**&#32;Read&#32;an&#32;integer&#32;numeral&#32;and&#32;raises&#32;an&#32;error&#32;if&#32;it&#32;is&#32;larger</emphasis>
01419 <emphasis role="comment">**&#32;than&#32;the&#32;maximum&#32;size&#32;for&#32;integers.</emphasis>
01420 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01421"/><link linkend="_lstrlib_8c_1a2e2809fc0c800ac97e4122f33434b94a">01421</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a2e2809fc0c800ac97e4122f33434b94a">getnumlimit</link>&#32;(<link linkend="_struct_header">Header</link>&#32;*h,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**fmt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;df)&#32;{
01422 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sz&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>(fmt,&#32;df);
01423 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sz&#32;&gt;&#32;<link linkend="_lstrlib_8c_1a3b8c10300729d575cc5a024f4d047a31">MAXINTSIZE</link>&#32;||&#32;sz&#32;&lt;=&#32;0)
01424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(h-&gt;<link linkend="_struct_header_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;integral&#32;size&#32;(%d)&#32;out&#32;of&#32;limits&#32;[1,%d]&quot;</emphasis>,
01425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sz,&#32;<link linkend="_lstrlib_8c_1a3b8c10300729d575cc5a024f4d047a31">MAXINTSIZE</link>);
01426 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sz;
01427 }
01428 
01429 
01430 <emphasis role="comment">/*</emphasis>
01431 <emphasis role="comment">**&#32;Initialize&#32;Header</emphasis>
01432 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01433"/><link linkend="_lstrlib_8c_1a1d1417c36ff4629b5fa8540daa9ca2bd">01433</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a1d1417c36ff4629b5fa8540daa9ca2bd">initheader</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<link linkend="_struct_header">Header</link>&#32;*h)&#32;{
01434 &#32;&#32;h-&gt;<link linkend="_struct_header_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>&#32;=&#32;L;
01435 &#32;&#32;h-&gt;<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>&#32;=&#32;<link linkend="_lstrlib_8c_1a8c97bd33d32d5879ec6498232a52f4b5">nativeendian</link>.little;
01436 &#32;&#32;h-&gt;<link linkend="_struct_header_1aa607b618e171e144512ba14bf10a485e">maxalign</link>&#32;=&#32;1;
01437 }
01438 
01439 
01440 <emphasis role="comment">/*</emphasis>
01441 <emphasis role="comment">**&#32;Read&#32;and&#32;classify&#32;next&#32;option.&#32;&apos;size&apos;&#32;is&#32;filled&#32;with&#32;option&apos;s&#32;size.</emphasis>
01442 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01443"/><link linkend="_lstrlib_8c_1adcf5c53b9f1a52366c286fea5f9aeda7">01443</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45">KOption</link>&#32;<link linkend="_lstrlib_8c_1adcf5c53b9f1a52366c286fea5f9aeda7">getoption</link>&#32;(<link linkend="_struct_header">Header</link>&#32;*h,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**fmt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*size)&#32;{
01444 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;opt&#32;=&#32;*((*fmt)++);
01445 &#32;&#32;*size&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;default&#32;*/</emphasis>
01446 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(opt)&#32;{
01447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;b&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(char);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">Kint</link>;
01448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;B&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(char);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">Kuint</link>;
01449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;h&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(short);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">Kint</link>;
01450 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;H&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(short);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">Kuint</link>;
01451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(long);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">Kint</link>;
01452 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;L&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(long);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">Kuint</link>;
01453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;j&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">Kint</link>;
01454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;J&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">Kuint</link>;
01455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;T&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(size_t);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">Kuint</link>;
01456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(float);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a15dc86646bf410c0d3ac998689ffe7f7">Kfloat</link>;
01457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(double);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a15dc86646bf410c0d3ac998689ffe7f7">Kfloat</link>;
01458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>:&#32;*size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>);&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a15dc86646bf410c0d3ac998689ffe7f7">Kfloat</link>;
01459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>:&#32;*size&#32;=&#32;<link linkend="_lstrlib_8c_1a2e2809fc0c800ac97e4122f33434b94a">getnumlimit</link>(h,&#32;fmt,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>));&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">Kint</link>;
01460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>:&#32;*size&#32;=&#32;<link linkend="_lstrlib_8c_1a2e2809fc0c800ac97e4122f33434b94a">getnumlimit</link>(h,&#32;fmt,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>));&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">Kuint</link>;
01461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;s&apos;</emphasis>:&#32;*size&#32;=&#32;<link linkend="_lstrlib_8c_1a2e2809fc0c800ac97e4122f33434b94a">getnumlimit</link>(h,&#32;fmt,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">size_t</emphasis>));&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45aa6aa8fb7b455739115fbd6c0dc3d4560">Kstring</link>;
01462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;c&apos;</emphasis>:
01463 &#32;&#32;&#32;&#32;&#32;&#32;*size&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>(fmt,&#32;-1);
01464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*size&#32;==&#32;-1)
01465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(h-&gt;<link linkend="_struct_header_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;missing&#32;size&#32;for&#32;format&#32;option&#32;&apos;c&apos;&quot;</emphasis>);
01466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ab2624b4f2d20c51e0eb6c668077dcbcd">Kchar</link>;
01467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;z&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ac4bf277f1cd2aaa95fe31d646e02aa37">Kzstr</link>;
01468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;x&apos;</emphasis>:&#32;*size&#32;=&#32;1;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a4252bf39cf9d76c3e034e248ce7bed49">Kpadding</link>;
01469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;X&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a2c01775a8eeb3f674f74c65786808279">Kpaddalign</link>;
01470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
01471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>:&#32;h-&gt;<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>&#32;=&#32;1;&#32;<emphasis role="keywordflow">break</emphasis>;
01472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>:&#32;h-&gt;<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>&#32;=&#32;0;&#32;<emphasis role="keywordflow">break</emphasis>;
01473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>:&#32;h-&gt;<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>&#32;=&#32;<link linkend="_lstrlib_8c_1a8c97bd33d32d5879ec6498232a52f4b5">nativeendian</link>.little;&#32;<emphasis role="keywordflow">break</emphasis>;
01474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;!&apos;</emphasis>:&#32;h-&gt;<link linkend="_struct_header_1aa607b618e171e144512ba14bf10a485e">maxalign</link>&#32;=&#32;<link linkend="_lstrlib_8c_1a2e2809fc0c800ac97e4122f33434b94a">getnumlimit</link>(h,&#32;fmt,&#32;<link linkend="_lstrlib_8c_1a12f0ea602f7d7ba33730a7519dfcb4d3">MAXALIGN</link>);&#32;<emphasis role="keywordflow">break</emphasis>;
01475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(h-&gt;<link linkend="_struct_header_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;<emphasis role="stringliteral">&quot;invalid&#32;format&#32;option&#32;&apos;%c&apos;&quot;</emphasis>,&#32;opt);
01476 &#32;&#32;}
01477 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a0ca5045efff0f1f863cff5614e3e92b7">Knop</link>;
01478 }
01479 
01480 
01481 <emphasis role="comment">/*</emphasis>
01482 <emphasis role="comment">**&#32;Read,&#32;classify,&#32;and&#32;fill&#32;other&#32;details&#32;about&#32;the&#32;next&#32;option.</emphasis>
01483 <emphasis role="comment">**&#32;&apos;psize&apos;&#32;is&#32;filled&#32;with&#32;option&apos;s&#32;size,&#32;&apos;notoalign&apos;&#32;with&#32;its</emphasis>
01484 <emphasis role="comment">**&#32;alignment&#32;requirements.</emphasis>
01485 <emphasis role="comment">**&#32;Local&#32;variable&#32;&apos;size&apos;&#32;gets&#32;the&#32;size&#32;to&#32;be&#32;aligned.&#32;(Kpadal&#32;option</emphasis>
01486 <emphasis role="comment">**&#32;always&#32;gets&#32;its&#32;full&#32;alignment,&#32;other&#32;options&#32;are&#32;limited&#32;by</emphasis>
01487 <emphasis role="comment">**&#32;the&#32;maximum&#32;alignment&#32;(&apos;maxalign&apos;).&#32;Kchar&#32;option&#32;needs&#32;no&#32;alignment</emphasis>
01488 <emphasis role="comment">**&#32;despite&#32;its&#32;size.</emphasis>
01489 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01490"/><link linkend="_lstrlib_8c_1a22b9520cbe8f1b1b493e107acfa6a711">01490</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45">KOption</link>&#32;<link linkend="_lstrlib_8c_1a22b9520cbe8f1b1b493e107acfa6a711">getdetails</link>&#32;(<link linkend="_struct_header">Header</link>&#32;*h,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;totalsize,
01491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**fmt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*psize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*ntoalign)&#32;{
01492 &#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45">KOption</link>&#32;opt&#32;=&#32;<link linkend="_lstrlib_8c_1adcf5c53b9f1a52366c286fea5f9aeda7">getoption</link>(h,&#32;fmt,&#32;psize);
01493 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;align&#32;=&#32;*psize;&#32;&#32;<emphasis role="comment">/*&#32;usually,&#32;alignment&#32;follows&#32;size&#32;*/</emphasis>
01494 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opt&#32;==&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a2c01775a8eeb3f674f74c65786808279">Kpaddalign</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;&apos;X&apos;&#32;gets&#32;alignment&#32;from&#32;following&#32;option&#32;*/</emphasis>
01495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(**fmt&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;||&#32;<link linkend="_lstrlib_8c_1adcf5c53b9f1a52366c286fea5f9aeda7">getoption</link>(h,&#32;fmt,&#32;&amp;align)&#32;==&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ab2624b4f2d20c51e0eb6c668077dcbcd">Kchar</link>&#32;||&#32;align&#32;==&#32;0)
01496 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1ac607576dd107a3120cd51948989f1ed2">luaL_argerror</link>(h-&gt;<link linkend="_struct_header_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;1,&#32;<emphasis role="stringliteral">&quot;invalid&#32;next&#32;option&#32;for&#32;option&#32;&apos;X&apos;&quot;</emphasis>);
01497 &#32;&#32;}
01498 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(align&#32;&lt;=&#32;1&#32;||&#32;opt&#32;==&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ab2624b4f2d20c51e0eb6c668077dcbcd">Kchar</link>)&#32;&#32;<emphasis role="comment">/*&#32;need&#32;no&#32;alignment?&#32;*/</emphasis>
01499 &#32;&#32;&#32;&#32;*ntoalign&#32;=&#32;0;
01500 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(align&#32;&gt;&#32;h-&gt;<link linkend="_struct_header_1aa607b618e171e144512ba14bf10a485e">maxalign</link>)&#32;&#32;<emphasis role="comment">/*&#32;enforce&#32;maximum&#32;alignment&#32;*/</emphasis>
01502 &#32;&#32;&#32;&#32;&#32;&#32;align&#32;=&#32;h-&gt;<link linkend="_struct_header_1aa607b618e171e144512ba14bf10a485e">maxalign</link>;
01503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((align&#32;&amp;&#32;(align&#32;-&#32;1))&#32;!=&#32;0)&#32;&#32;<emphasis role="comment">/*&#32;is&#32;&apos;align&apos;&#32;not&#32;a&#32;power&#32;of&#32;2?&#32;*/</emphasis>
01504 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1ac607576dd107a3120cd51948989f1ed2">luaL_argerror</link>(h-&gt;<link linkend="_struct_header_1a62f94dfc0036bec0c14106c2f15caf3e">L</link>,&#32;1,&#32;<emphasis role="stringliteral">&quot;format&#32;asks&#32;for&#32;alignment&#32;not&#32;power&#32;of&#32;2&quot;</emphasis>);
01505 &#32;&#32;&#32;&#32;*ntoalign&#32;=&#32;(align&#32;-&#32;(int)(totalsize&#32;&amp;&#32;(align&#32;-&#32;1)))&#32;&amp;&#32;(align&#32;-&#32;1);
01506 &#32;&#32;}
01507 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt;
01508 }
01509 
01510 
01511 <emphasis role="comment">/*</emphasis>
01512 <emphasis role="comment">**&#32;Pack&#32;integer&#32;&apos;n&apos;&#32;with&#32;&apos;size&apos;&#32;bytes&#32;and&#32;&apos;islittle&apos;&#32;endianness.</emphasis>
01513 <emphasis role="comment">**&#32;The&#32;final&#32;&apos;if&apos;&#32;handles&#32;the&#32;case&#32;when&#32;&apos;size&apos;&#32;is&#32;larger&#32;than</emphasis>
01514 <emphasis role="comment">**&#32;the&#32;size&#32;of&#32;a&#32;Lua&#32;integer,&#32;correcting&#32;the&#32;extra&#32;sign-extension</emphasis>
01515 <emphasis role="comment">**&#32;bytes&#32;if&#32;necessary&#32;(by&#32;default&#32;they&#32;would&#32;be&#32;zeros).</emphasis>
01516 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01517"/><link linkend="_lstrlib_8c_1a326322a54fce6c872fd7e20c3f923e8f">01517</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a326322a54fce6c872fd7e20c3f923e8f">packint</link>&#32;(<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;*b,&#32;<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>&#32;n,
01518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;islittle,&#32;<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;neg)&#32;{
01519 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buff&#32;=&#32;<link linkend="_lauxlib_8c_1ae695ed340bec54979c499b70d7d29318">luaL_prepbuffsize</link>(b,&#32;size);
01520 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
01521 &#32;&#32;buff[islittle&#32;?&#32;0&#32;:&#32;size&#32;-&#32;1]&#32;=&#32;(char)(n&#32;&amp;&#32;<link linkend="_lstrlib_8c_1a71d9e511e7e302cd831e83581219e70d">MC</link>);&#32;&#32;<emphasis role="comment">/*&#32;first&#32;byte&#32;*/</emphasis>
01522 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;1;&#32;i&#32;&lt;&#32;size;&#32;i++)&#32;{
01523 &#32;&#32;&#32;&#32;n&#32;&gt;&gt;=&#32;<link linkend="_lstrlib_8c_1a58e95dc1eb9d6ce16f515e77beeadd58">NB</link>;
01524 &#32;&#32;&#32;&#32;buff[islittle&#32;?&#32;i&#32;:&#32;size&#32;-&#32;1&#32;-&#32;i]&#32;=&#32;(char)(n&#32;&amp;&#32;<link linkend="_lstrlib_8c_1a71d9e511e7e302cd831e83581219e70d">MC</link>);
01525 &#32;&#32;}
01526 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(neg&#32;&amp;&amp;&#32;size&#32;&gt;&#32;<link linkend="_lstrlib_8c_1aba1923a486465ba9dea97b9d1403ce18">SZINT</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;negative&#32;number&#32;need&#32;sign&#32;extension?&#32;*/</emphasis>
01527 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;<link linkend="_lstrlib_8c_1aba1923a486465ba9dea97b9d1403ce18">SZINT</link>;&#32;i&#32;&lt;&#32;size;&#32;i++)&#32;&#32;<emphasis role="comment">/*&#32;correct&#32;extra&#32;bytes&#32;*/</emphasis>
01528 &#32;&#32;&#32;&#32;&#32;&#32;buff[islittle&#32;?&#32;i&#32;:&#32;size&#32;-&#32;1&#32;-&#32;i]&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>)<link linkend="_lstrlib_8c_1a71d9e511e7e302cd831e83581219e70d">MC</link>;
01529 &#32;&#32;}
01530 &#32;&#32;<link linkend="_lauxlib_8h_1a7c0adb7401e0be1a843946cee0556684">luaL_addsize</link>(b,&#32;size);&#32;&#32;<emphasis role="comment">/*&#32;add&#32;result&#32;to&#32;buffer&#32;*/</emphasis>
01531 }
01532 
01533 
01534 <emphasis role="comment">/*</emphasis>
01535 <emphasis role="comment">**&#32;Copy&#32;&apos;size&apos;&#32;bytes&#32;from&#32;&apos;src&apos;&#32;to&#32;&apos;dest&apos;,&#32;correcting&#32;endianness&#32;if</emphasis>
01536 <emphasis role="comment">**&#32;given&#32;&apos;islittle&apos;&#32;is&#32;different&#32;from&#32;native&#32;endianness.</emphasis>
01537 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01538"/><link linkend="_lstrlib_8c_1a09c1ccdd2ecff511ba28d2154a59336e">01538</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a09c1ccdd2ecff511ba28d2154a59336e">copywithendian</link>&#32;(<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*dest,&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*src,
01539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;islittle)&#32;{
01540 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(islittle&#32;==&#32;<link linkend="_lstrlib_8c_1a8c97bd33d32d5879ec6498232a52f4b5">nativeendian</link>.little)&#32;{
01541 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(size--&#32;!=&#32;0)
01542 &#32;&#32;&#32;&#32;&#32;&#32;*(dest++)&#32;=&#32;*(src++);
01543 &#32;&#32;}
01544 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01545 &#32;&#32;&#32;&#32;dest&#32;+=&#32;size&#32;-&#32;1;
01546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(size--&#32;!=&#32;0)
01547 &#32;&#32;&#32;&#32;&#32;&#32;*(dest--)&#32;=&#32;*(src++);
01548 &#32;&#32;}
01549 }
01550 
01551 
<anchor xml:id="_lstrlib_8c_source_1l01552"/><link linkend="_lstrlib_8c_1abcf8553ae8937fd4f4bf85c72f528710">01552</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1abcf8553ae8937fd4f4bf85c72f528710">str_pack</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01553 &#32;&#32;<link linkend="_structlua_l___buffer">luaL_Buffer</link>&#32;b;
01554 &#32;&#32;<link linkend="_struct_header">Header</link>&#32;h;
01555 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*fmt&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;format&#32;string&#32;*/</emphasis>
01556 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;arg&#32;=&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;current&#32;argument&#32;to&#32;pack&#32;*/</emphasis>
01557 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;totalsize&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;accumulate&#32;total&#32;size&#32;of&#32;result&#32;*/</emphasis>
01558 &#32;&#32;<link linkend="_lstrlib_8c_1a1d1417c36ff4629b5fa8540daa9ca2bd">initheader</link>(L,&#32;&amp;h);
01559 &#32;&#32;<link linkend="_lapi_8c_1a1b4cd0d80f51e5545a97ca6c28c03c50">lua_pushnil</link>(L);&#32;&#32;<emphasis role="comment">/*&#32;mark&#32;to&#32;separate&#32;arguments&#32;from&#32;string&#32;buffer&#32;*/</emphasis>
01560 &#32;&#32;<link linkend="_lauxlib_8c_1a0830ef75e335f6d7590b0e058f82a5eb">luaL_buffinit</link>(L,&#32;&amp;b);
01561 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*fmt&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
01562 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;ntoalign;
01563 &#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45">KOption</link>&#32;opt&#32;=&#32;<link linkend="_lstrlib_8c_1a22b9520cbe8f1b1b493e107acfa6a711">getdetails</link>(&amp;h,&#32;totalsize,&#32;&amp;fmt,&#32;&amp;size,&#32;&amp;ntoalign);
01564 &#32;&#32;&#32;&#32;totalsize&#32;+=&#32;ntoalign&#32;+&#32;size;
01565 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ntoalign--&#32;&gt;&#32;0)
01566 &#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(&amp;b,&#32;<link linkend="_lstrlib_8c_1a018375fe92d4433fa5e346266ff0fce0">LUAL_PACKPADBYTE</link>);&#32;&#32;<emphasis role="comment">/*&#32;fill&#32;alignment&#32;*/</emphasis>
01567 &#32;&#32;&#32;&#32;arg++;
01568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(opt)&#32;{
01569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">Kint</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;signed&#32;integers&#32;*/</emphasis>
01570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;n&#32;=&#32;<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;arg);
01571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;&#32;<link linkend="_lstrlib_8c_1aba1923a486465ba9dea97b9d1403ce18">SZINT</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;need&#32;overflow&#32;check?&#32;*/</emphasis>
01572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;lim&#32;=&#32;(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>)1&#32;&lt;&lt;&#32;((size&#32;*&#32;<link linkend="_lstrlib_8c_1a58e95dc1eb9d6ce16f515e77beeadd58">NB</link>)&#32;-&#32;1);
01573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;-lim&#32;&lt;=&#32;n&#32;&amp;&amp;&#32;n&#32;&lt;&#32;lim,&#32;arg,&#32;<emphasis role="stringliteral">&quot;integer&#32;overflow&quot;</emphasis>);
01574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a326322a54fce6c872fd7e20c3f923e8f">packint</link>(&amp;b,&#32;(<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>)n,&#32;h.<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>,&#32;size,&#32;(n&#32;&lt;&#32;0));
01576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01577 &#32;&#32;&#32;&#32;&#32;&#32;}
01578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">Kuint</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;unsigned&#32;integers&#32;*/</emphasis>
01579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;n&#32;=&#32;<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;arg);
01580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;&#32;<link linkend="_lstrlib_8c_1aba1923a486465ba9dea97b9d1403ce18">SZINT</link>)&#32;&#32;<emphasis role="comment">/*&#32;need&#32;overflow&#32;check?&#32;*/</emphasis>
01581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;(<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>)n&#32;&lt;&#32;((<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>)1&#32;&lt;&lt;&#32;(size&#32;*&#32;<link linkend="_lstrlib_8c_1a58e95dc1eb9d6ce16f515e77beeadd58">NB</link>)),
01582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg,&#32;<emphasis role="stringliteral">&quot;unsigned&#32;overflow&quot;</emphasis>);
01583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a326322a54fce6c872fd7e20c3f923e8f">packint</link>(&amp;b,&#32;(<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>)n,&#32;h.<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>,&#32;size,&#32;0);
01584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01585 &#32;&#32;&#32;&#32;&#32;&#32;}
01586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a15dc86646bf410c0d3ac998689ffe7f7">Kfloat</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;floating-point&#32;options&#32;*/</emphasis>
01587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<link linkend="_union_ftypes">Ftypes</link>&#32;u;
01588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buff&#32;=&#32;<link linkend="_lauxlib_8c_1ae695ed340bec54979c499b70d7d29318">luaL_prepbuffsize</link>(&amp;b,&#32;size);
01589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;n&#32;=&#32;<link linkend="_lauxlib_8c_1a9f2c941bb5eb7d3a7746f35c4fe3cced">luaL_checknumber</link>(L,&#32;arg);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;argument&#32;*/</emphasis>
01590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(u.<link linkend="_union_ftypes_1af900396d7b72ff2a7002e8befe8cf8f1">f</link>))&#32;u.<link linkend="_union_ftypes_1af900396d7b72ff2a7002e8befe8cf8f1">f</link>&#32;=&#32;(float)n;&#32;&#32;<emphasis role="comment">/*&#32;copy&#32;it&#32;into&#32;&apos;u&apos;&#32;*/</emphasis>
01591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(u.<link linkend="_union_ftypes_1a873684cefeb665f3d5e6b495de57fc0d">d</link>))&#32;u.<link linkend="_union_ftypes_1a873684cefeb665f3d5e6b495de57fc0d">d</link>&#32;=&#32;(<emphasis role="keywordtype">double</emphasis>)n;
01592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;u.<link linkend="_union_ftypes_1a645eebf23efeaafc3b9ac3671073031d">n</link>&#32;=&#32;n;
01593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;move&#32;&apos;u&apos;&#32;to&#32;final&#32;result,&#32;correcting&#32;endianness&#32;if&#32;needed&#32;*/</emphasis>
01594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a09c1ccdd2ecff511ba28d2154a59336e">copywithendian</link>(buff,&#32;u.<link linkend="_union_ftypes_1adc33b6e4dfbfc1649604b03f31d3bac9">buff</link>,&#32;size,&#32;h.<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>);
01595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a7c0adb7401e0be1a843946cee0556684">luaL_addsize</link>(&amp;b,&#32;size);
01596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01597 &#32;&#32;&#32;&#32;&#32;&#32;}
01598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ab2624b4f2d20c51e0eb6c668077dcbcd">Kchar</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;fixed-size&#32;string&#32;*/</emphasis>
01599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len;
01600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;arg,&#32;&amp;len);
01601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;len&#32;&lt;=&#32;(<emphasis role="keywordtype">size_t</emphasis>)size,&#32;arg,
01602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;string&#32;longer&#32;than&#32;given&#32;size&quot;</emphasis>);
01603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(&amp;b,&#32;s,&#32;len);&#32;&#32;<emphasis role="comment">/*&#32;add&#32;string&#32;*/</emphasis>
01604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(len++&#32;&lt;&#32;(<emphasis role="keywordtype">size_t</emphasis>)size)&#32;&#32;<emphasis role="comment">/*&#32;pad&#32;extra&#32;space&#32;*/</emphasis>
01605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(&amp;b,&#32;<link linkend="_lstrlib_8c_1a018375fe92d4433fa5e346266ff0fce0">LUAL_PACKPADBYTE</link>);
01606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01607 &#32;&#32;&#32;&#32;&#32;&#32;}
01608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45aa6aa8fb7b455739115fbd6c0dc3d4560">Kstring</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;strings&#32;with&#32;length&#32;count&#32;*/</emphasis>
01609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len;
01610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;arg,&#32;&amp;len);
01611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;size&#32;&gt;=&#32;(<emphasis role="keywordtype">int</emphasis>)<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">size_t</emphasis>)&#32;||
01612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;len&#32;&lt;&#32;((<emphasis role="keywordtype">size_t</emphasis>)1&#32;&lt;&lt;&#32;(size&#32;*&#32;<link linkend="_lstrlib_8c_1a58e95dc1eb9d6ce16f515e77beeadd58">NB</link>)),
01613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg,&#32;<emphasis role="stringliteral">&quot;string&#32;length&#32;does&#32;not&#32;fit&#32;in&#32;given&#32;size&quot;</emphasis>);
01614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a326322a54fce6c872fd7e20c3f923e8f">packint</link>(&amp;b,&#32;(<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>)len,&#32;h.<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>,&#32;size,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;pack&#32;length&#32;*/</emphasis>
01615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(&amp;b,&#32;s,&#32;len);
01616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totalsize&#32;+=&#32;len;
01617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01618 &#32;&#32;&#32;&#32;&#32;&#32;}
01619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ac4bf277f1cd2aaa95fe31d646e02aa37">Kzstr</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;zero-terminated&#32;string&#32;*/</emphasis>
01620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len;
01621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;arg,&#32;&amp;len);
01622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;strlen(s)&#32;==&#32;len,&#32;arg,&#32;<emphasis role="stringliteral">&quot;string&#32;contains&#32;zeros&quot;</emphasis>);
01623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0d56993399c45ae61ebb9b448dc30538">luaL_addlstring</link>(&amp;b,&#32;s,&#32;len);
01624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(&amp;b,&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;add&#32;zero&#32;at&#32;the&#32;end&#32;*/</emphasis>
01625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totalsize&#32;+=&#32;len&#32;+&#32;1;
01626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01627 &#32;&#32;&#32;&#32;&#32;&#32;}
01628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a4252bf39cf9d76c3e034e248ce7bed49">Kpadding</link>:&#32;<link linkend="_lauxlib_8h_1a63935c5b4cf5d45930c875f6cc5e1432">luaL_addchar</link>(&amp;b,&#32;<link linkend="_lstrlib_8c_1a018375fe92d4433fa5e346266ff0fce0">LUAL_PACKPADBYTE</link>);&#32;&#32;<emphasis role="comment">/*&#32;FALLTHROUGH&#32;*/</emphasis>
01629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a2c01775a8eeb3f674f74c65786808279">Kpaddalign</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a0ca5045efff0f1f863cff5614e3e92b7">Knop</link>:
01630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg--;&#32;&#32;<emphasis role="comment">/*&#32;undo&#32;increment&#32;*/</emphasis>
01631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01632 &#32;&#32;&#32;&#32;}
01633 &#32;&#32;}
01634 &#32;&#32;<link linkend="_lauxlib_8c_1a3a1f80033814e2057583a7d24cee23b4">luaL_pushresult</link>(&amp;b);
01635 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01636 }
01637 
01638 
<anchor xml:id="_lstrlib_8c_source_1l01639"/><link linkend="_lstrlib_8c_1ac548dd917c53c0c6d13518ec3ecc56ee">01639</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ac548dd917c53c0c6d13518ec3ecc56ee">str_packsize</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01640 &#32;&#32;<link linkend="_struct_header">Header</link>&#32;h;
01641 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*fmt&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;format&#32;string&#32;*/</emphasis>
01642 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;totalsize&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;accumulate&#32;total&#32;size&#32;of&#32;result&#32;*/</emphasis>
01643 &#32;&#32;<link linkend="_lstrlib_8c_1a1d1417c36ff4629b5fa8540daa9ca2bd">initheader</link>(L,&#32;&amp;h);
01644 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*fmt&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
01645 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;ntoalign;
01646 &#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45">KOption</link>&#32;opt&#32;=&#32;<link linkend="_lstrlib_8c_1a22b9520cbe8f1b1b493e107acfa6a711">getdetails</link>(&amp;h,&#32;totalsize,&#32;&amp;fmt,&#32;&amp;size,&#32;&amp;ntoalign);
01647 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;opt&#32;!=&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45aa6aa8fb7b455739115fbd6c0dc3d4560">Kstring</link>&#32;&amp;&amp;&#32;opt&#32;!=&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ac4bf277f1cd2aaa95fe31d646e02aa37">Kzstr</link>,&#32;1,
01648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;variable-length&#32;format&quot;</emphasis>);
01649 &#32;&#32;&#32;&#32;size&#32;+=&#32;ntoalign;&#32;&#32;<emphasis role="comment">/*&#32;total&#32;space&#32;used&#32;by&#32;option&#32;*/</emphasis>
01650 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;totalsize&#32;&lt;=&#32;<link linkend="_lstrlib_8c_1a2a37b4217917105aac7557862ccc19c3">MAXSIZE</link>&#32;-&#32;size,&#32;1,
01651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;format&#32;result&#32;too&#32;large&quot;</emphasis>);
01652 &#32;&#32;&#32;&#32;totalsize&#32;+=&#32;size;
01653 &#32;&#32;}
01654 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>)totalsize);
01655 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01656 }
01657 
01658 
01659 <emphasis role="comment">/*</emphasis>
01660 <emphasis role="comment">**&#32;Unpack&#32;an&#32;integer&#32;with&#32;&apos;size&apos;&#32;bytes&#32;and&#32;&apos;islittle&apos;&#32;endianness.</emphasis>
01661 <emphasis role="comment">**&#32;If&#32;size&#32;is&#32;smaller&#32;than&#32;the&#32;size&#32;of&#32;a&#32;Lua&#32;integer&#32;and&#32;integer</emphasis>
01662 <emphasis role="comment">**&#32;is&#32;signed,&#32;must&#32;do&#32;sign&#32;extension&#32;(propagating&#32;the&#32;sign&#32;to&#32;the</emphasis>
01663 <emphasis role="comment">**&#32;higher&#32;bits);&#32;if&#32;size&#32;is&#32;larger&#32;than&#32;the&#32;size&#32;of&#32;a&#32;Lua&#32;integer,</emphasis>
01664 <emphasis role="comment">**&#32;it&#32;must&#32;check&#32;the&#32;unread&#32;bytes&#32;to&#32;see&#32;whether&#32;they&#32;do&#32;not&#32;cause&#32;an</emphasis>
01665 <emphasis role="comment">**&#32;overflow.</emphasis>
01666 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01667"/><link linkend="_lstrlib_8c_1a06e60d2c39a3041308dc6caa50c1d394">01667</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;<link linkend="_lstrlib_8c_1a06e60d2c39a3041308dc6caa50c1d394">unpackint</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*str,
01668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;islittle,&#32;<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;issigned)&#32;{
01669 &#32;&#32;<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>&#32;res&#32;=&#32;0;
01670 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
01671 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;limit&#32;=&#32;(size&#32;&#32;&lt;=&#32;<link linkend="_lstrlib_8c_1aba1923a486465ba9dea97b9d1403ce18">SZINT</link>)&#32;?&#32;size&#32;:&#32;<link linkend="_lstrlib_8c_1aba1923a486465ba9dea97b9d1403ce18">SZINT</link>;
01672 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;limit&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;i--)&#32;{
01673 &#32;&#32;&#32;&#32;res&#32;&lt;&lt;=&#32;<link linkend="_lstrlib_8c_1a58e95dc1eb9d6ce16f515e77beeadd58">NB</link>;
01674 &#32;&#32;&#32;&#32;res&#32;|=&#32;(<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>)(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)str[islittle&#32;?&#32;i&#32;:&#32;size&#32;-&#32;1&#32;-&#32;i];
01675 &#32;&#32;}
01676 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;&#32;<link linkend="_lstrlib_8c_1aba1923a486465ba9dea97b9d1403ce18">SZINT</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;real&#32;size&#32;smaller&#32;than&#32;lua_Integer?&#32;*/</emphasis>
01677 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(issigned)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;needs&#32;sign&#32;extension?&#32;*/</emphasis>
01678 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>&#32;mask&#32;=&#32;(<link linkend="_lua_8h_1a2357bdcd9af1aaef0a6895a9c3b7eccf">lua_Unsigned</link>)1&#32;&lt;&lt;&#32;(size*<link linkend="_lstrlib_8c_1a58e95dc1eb9d6ce16f515e77beeadd58">NB</link>&#32;-&#32;1);
01679 &#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;((res&#32;^&#32;mask)&#32;-&#32;mask);&#32;&#32;<emphasis role="comment">/*&#32;do&#32;sign&#32;extension&#32;*/</emphasis>
01680 &#32;&#32;&#32;&#32;}
01681 &#32;&#32;}
01682 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&gt;&#32;<link linkend="_lstrlib_8c_1aba1923a486465ba9dea97b9d1403ce18">SZINT</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;must&#32;check&#32;unread&#32;bytes&#32;*/</emphasis>
01683 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mask&#32;=&#32;(!issigned&#32;||&#32;(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>)res&#32;&gt;=&#32;0)&#32;?&#32;0&#32;:&#32;<link linkend="_lstrlib_8c_1a71d9e511e7e302cd831e83581219e70d">MC</link>;
01684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;limit;&#32;i&#32;&lt;&#32;size;&#32;i++)&#32;{
01685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)str[islittle&#32;?&#32;i&#32;:&#32;size&#32;-&#32;1&#32;-&#32;i]&#32;!=&#32;mask)
01686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;%d-byte&#32;integer&#32;does&#32;not&#32;fit&#32;into&#32;Lua&#32;Integer&quot;</emphasis>,&#32;size);
01687 &#32;&#32;&#32;&#32;}
01688 &#32;&#32;}
01689 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>)res;
01690 }
01691 
01692 
<anchor xml:id="_lstrlib_8c_source_1l01693"/><link linkend="_lstrlib_8c_1a3f3c1925e7829cbe972a744fa9168ec3">01693</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a3f3c1925e7829cbe972a744fa9168ec3">str_unpack</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01694 &#32;&#32;<link linkend="_struct_header">Header</link>&#32;h;
01695 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*fmt&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;1);
01696 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;ld;
01697 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*data&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;2,&#32;&amp;ld);
01698 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;<link linkend="_lstrlib_8c_1a5d66236d294a1cd3e310292e43d5c3c6">posrelatI</link>(<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;3,&#32;1),&#32;ld)&#32;-&#32;1;
01699 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;number&#32;of&#32;results&#32;*/</emphasis>
01700 &#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;pos&#32;&lt;=&#32;ld,&#32;3,&#32;<emphasis role="stringliteral">&quot;initial&#32;position&#32;out&#32;of&#32;string&quot;</emphasis>);
01701 &#32;&#32;<link linkend="_lstrlib_8c_1a1d1417c36ff4629b5fa8540daa9ca2bd">initheader</link>(L,&#32;&amp;h);
01702 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*fmt&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
01703 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size,&#32;ntoalign;
01704 &#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45">KOption</link>&#32;opt&#32;=&#32;<link linkend="_lstrlib_8c_1a22b9520cbe8f1b1b493e107acfa6a711">getdetails</link>(&amp;h,&#32;pos,&#32;&amp;fmt,&#32;&amp;size,&#32;&amp;ntoalign);
01705 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;(<emphasis role="keywordtype">size_t</emphasis>)ntoalign&#32;+&#32;size&#32;&lt;=&#32;ld&#32;-&#32;pos,&#32;2,
01706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;data&#32;string&#32;too&#32;short&quot;</emphasis>);
01707 &#32;&#32;&#32;&#32;pos&#32;+=&#32;ntoalign;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;alignment&#32;*/</emphasis>
01708 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;stack&#32;space&#32;for&#32;item&#32;+&#32;next&#32;position&#32;*/</emphasis>
01709 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a7c46517055e0e8cb25e61b959709083a">luaL_checkstack</link>(L,&#32;2,&#32;<emphasis role="stringliteral">&quot;too&#32;many&#32;results&quot;</emphasis>);
01710 &#32;&#32;&#32;&#32;n++;
01711 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(opt)&#32;{
01712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">Kint</link>:
01713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a83c1e7fdcc4de50f9f5b98222401b591">Kuint</link>:&#32;{
01714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;res&#32;=&#32;<link linkend="_lstrlib_8c_1a06e60d2c39a3041308dc6caa50c1d394">unpackint</link>(L,&#32;data&#32;+&#32;pos,&#32;h.<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>,&#32;size,
01715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(opt&#32;==&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a755cdbd676161935bcff95ab0db4f635">Kint</link>));
01716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;res);
01717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01718 &#32;&#32;&#32;&#32;&#32;&#32;}
01719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a15dc86646bf410c0d3ac998689ffe7f7">Kfloat</link>:&#32;{
01720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<link linkend="_union_ftypes">Ftypes</link>&#32;u;
01721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;num;
01722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstrlib_8c_1a09c1ccdd2ecff511ba28d2154a59336e">copywithendian</link>(u.<link linkend="_union_ftypes_1adc33b6e4dfbfc1649604b03f31d3bac9">buff</link>,&#32;data&#32;+&#32;pos,&#32;size,&#32;h.<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>);
01723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(u.<link linkend="_union_ftypes_1af900396d7b72ff2a7002e8befe8cf8f1">f</link>))&#32;num&#32;=&#32;(<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>)u.<link linkend="_union_ftypes_1af900396d7b72ff2a7002e8befe8cf8f1">f</link>;
01724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;if&#32;(size&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(u.<link linkend="_union_ftypes_1a873684cefeb665f3d5e6b495de57fc0d">d</link>))&#32;num&#32;=&#32;(<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>)u.<link linkend="_union_ftypes_1a873684cefeb665f3d5e6b495de57fc0d">d</link>;
01725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;num&#32;=&#32;u.<link linkend="_union_ftypes_1a645eebf23efeaafc3b9ac3671073031d">n</link>;
01726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a328625a03fbb5548f27b1af10f109f6a">lua_pushnumber</link>(L,&#32;num);
01727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01728 &#32;&#32;&#32;&#32;&#32;&#32;}
01729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ab2624b4f2d20c51e0eb6c668077dcbcd">Kchar</link>:&#32;{
01730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a2c325311534c23450cdf11931a8db0ae">lua_pushlstring</link>(L,&#32;data&#32;+&#32;pos,&#32;size);
01731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01732 &#32;&#32;&#32;&#32;&#32;&#32;}
01733 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45aa6aa8fb7b455739115fbd6c0dc3d4560">Kstring</link>:&#32;{
01734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len&#32;=&#32;(size_t)<link linkend="_lstrlib_8c_1a06e60d2c39a3041308dc6caa50c1d394">unpackint</link>(L,&#32;data&#32;+&#32;pos,&#32;h.<link linkend="_struct_header_1a555916fa39d8ed56ea2ac40a205054ec">islittle</link>,&#32;size,&#32;0);
01735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;len&#32;&lt;=&#32;ld&#32;-&#32;pos&#32;-&#32;size,&#32;2,&#32;<emphasis role="stringliteral">&quot;data&#32;string&#32;too&#32;short&quot;</emphasis>);
01736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a2c325311534c23450cdf11931a8db0ae">lua_pushlstring</link>(L,&#32;data&#32;+&#32;pos&#32;+&#32;size,&#32;len);
01737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;len;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;string&#32;*/</emphasis>
01738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01739 &#32;&#32;&#32;&#32;&#32;&#32;}
01740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45ac4bf277f1cd2aaa95fe31d646e02aa37">Kzstr</link>:&#32;{
01741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len&#32;=&#32;(int)strlen(data&#32;+&#32;pos);
01742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;pos&#32;+&#32;len&#32;&lt;&#32;ld,&#32;2,
01743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;unfinished&#32;string&#32;for&#32;format&#32;&apos;z&apos;&quot;</emphasis>);
01744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a2c325311534c23450cdf11931a8db0ae">lua_pushlstring</link>(L,&#32;data&#32;+&#32;pos,&#32;len);
01745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;len&#32;+&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;string&#32;plus&#32;final&#32;&apos;\0&apos;&#32;*/</emphasis>
01746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01747 &#32;&#32;&#32;&#32;&#32;&#32;}
01748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a2c01775a8eeb3f674f74c65786808279">Kpaddalign</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a4252bf39cf9d76c3e034e248ce7bed49">Kpadding</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lstrlib_8c_1a367eae6d513d6ac0b1f851c0b17b7d45a0ca5045efff0f1f863cff5614e3e92b7">Knop</link>:
01749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n--;&#32;&#32;<emphasis role="comment">/*&#32;undo&#32;increment&#32;*/</emphasis>
01750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01751 &#32;&#32;&#32;&#32;}
01752 &#32;&#32;&#32;&#32;pos&#32;+=&#32;size;
01753 &#32;&#32;}
01754 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;pos&#32;+&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;next&#32;position&#32;*/</emphasis>
01755 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n&#32;+&#32;1;
01756 }
01757 
01758 <emphasis role="comment">/*&#32;}======================================================&#32;*/</emphasis>
01759 
01760 
<anchor xml:id="_lstrlib_8c_source_1l01761"/><link linkend="_lstrlib_8c_1aea7d99046a1869e17a061706511f770c">01761</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structlua_l___reg">luaL_Reg</link>&#32;<link linkend="_lstrlib_8c_1aea7d99046a1869e17a061706511f770c">strlib</link>[]&#32;=&#32;{
01762 &#32;&#32;{<emphasis role="stringliteral">&quot;byte&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1ae561770420cfd1894054415df9d4c423">str_byte</link>},
01763 &#32;&#32;{<emphasis role="stringliteral">&quot;char&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a3f7db8b2258dca5459ad52d2cbf9f28c">str_char</link>},
01764 &#32;&#32;{<emphasis role="stringliteral">&quot;dump&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1abc94e3a13f1b6ddb2c9b20c9fd89e87f">str_dump</link>},
01765 &#32;&#32;{<emphasis role="stringliteral">&quot;find&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a362a4bc9ba81ce87253cc3d74f015808">str_find</link>},
01766 &#32;&#32;{<emphasis role="stringliteral">&quot;format&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1ae26a9374857058119e59d0328208c2f2">str_format</link>},
01767 &#32;&#32;{<emphasis role="stringliteral">&quot;gmatch&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1ab55a72bb412d6186c82fd75de44cd031">gmatch</link>},
01768 &#32;&#32;{<emphasis role="stringliteral">&quot;gsub&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a42337c674d265175bcc2b2f3809c7339">str_gsub</link>},
01769 &#32;&#32;{<emphasis role="stringliteral">&quot;len&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a357ce37478dde24252724e3c4c66ce11">str_len</link>},
01770 &#32;&#32;{<emphasis role="stringliteral">&quot;lower&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1ab2235f81205d0482d03c8ae456a98992">str_lower</link>},
01771 &#32;&#32;{<emphasis role="stringliteral">&quot;match&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a4b605e43b8f5738db9eae902bbc00f00">str_match</link>},
01772 &#32;&#32;{<emphasis role="stringliteral">&quot;rep&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1acaee4c84f29e2ec7366728ca04d3569c">str_rep</link>},
01773 &#32;&#32;{<emphasis role="stringliteral">&quot;reverse&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a4b2ffac60e817b9bfc54b32f8da3a6b4">str_reverse</link>},
01774 &#32;&#32;{<emphasis role="stringliteral">&quot;sub&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a039b391d5f43533a0ce750c5e40d7752">str_sub</link>},
01775 &#32;&#32;{<emphasis role="stringliteral">&quot;upper&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a38ed99b74af58070449ca344a7351f6a">str_upper</link>},
01776 &#32;&#32;{<emphasis role="stringliteral">&quot;pack&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1abcf8553ae8937fd4f4bf85c72f528710">str_pack</link>},
01777 &#32;&#32;{<emphasis role="stringliteral">&quot;packsize&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1ac548dd917c53c0c6d13518ec3ecc56ee">str_packsize</link>},
01778 &#32;&#32;{<emphasis role="stringliteral">&quot;unpack&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1a3f3c1925e7829cbe972a744fa9168ec3">str_unpack</link>},
01779 &#32;&#32;{NULL,&#32;NULL}
01780 };
01781 
01782 
<anchor xml:id="_lstrlib_8c_source_1l01783"/><link linkend="_lstrlib_8c_1a16d034da6b46e6beae228472f26ec07b">01783</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lstrlib_8c_1a16d034da6b46e6beae228472f26ec07b">createmetatable</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01784 &#32;&#32;<emphasis role="comment">/*&#32;table&#32;to&#32;be&#32;metatable&#32;for&#32;strings&#32;*/</emphasis>
01785 &#32;&#32;<link linkend="_lauxlib_8h_1ad575a4fd1f53fa454b5d9745fedecdc4">luaL_newlibtable</link>(L,&#32;<link linkend="_lstrlib_8c_1a7168e6e571c41a6ac8f204f884d661fe">stringmetamethods</link>);
01786 &#32;&#32;<link linkend="_lauxlib_8c_1a4cab22d0cb403fa6b94f2542f4303096">luaL_setfuncs</link>(L,&#32;<link linkend="_lstrlib_8c_1a7168e6e571c41a6ac8f204f884d661fe">stringmetamethods</link>,&#32;0);
01787 &#32;&#32;<link linkend="_lua_8h_1a47854189a679002ed743ebbcb30b1b26">lua_pushliteral</link>(L,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;dummy&#32;string&#32;*/</emphasis>
01788 &#32;&#32;<link linkend="_lapi_8c_1a602f61a9b583d69dc1c72c8970bd65e8">lua_pushvalue</link>(L,&#32;-2);&#32;&#32;<emphasis role="comment">/*&#32;copy&#32;table&#32;*/</emphasis>
01789 &#32;&#32;<link linkend="_lapi_8c_1a15719ea4119bdf5b3f2a406534431a7e">lua_setmetatable</link>(L,&#32;-2);&#32;&#32;<emphasis role="comment">/*&#32;set&#32;table&#32;as&#32;metatable&#32;for&#32;strings&#32;*/</emphasis>
01790 &#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;pop&#32;dummy&#32;string&#32;*/</emphasis>
01791 &#32;&#32;<link linkend="_lapi_8c_1a602f61a9b583d69dc1c72c8970bd65e8">lua_pushvalue</link>(L,&#32;-2);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;string&#32;library&#32;*/</emphasis>
01792 &#32;&#32;<link linkend="_lapi_8c_1a3f2f542ee6728d82e51b1c302f9606df">lua_setfield</link>(L,&#32;-2,&#32;<emphasis role="stringliteral">&quot;__index&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;metatable.__index&#32;=&#32;string&#32;*/</emphasis>
01793 &#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;pop&#32;metatable&#32;*/</emphasis>
01794 }
01795 
01796 
01797 <emphasis role="comment">/*</emphasis>
01798 <emphasis role="comment">**&#32;Open&#32;string&#32;library</emphasis>
01799 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lstrlib_8c_source_1l01800"/><link linkend="_lualib_8h_1a3cc052c1be81497507ee76524482eaec">01800</link> <link linkend="_luaconf_8h_1a8e877216dd2f0cf9a68255b494f82f50">LUAMOD_API</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1ab65aeff75cb100dde75e955c698c83b8">luaopen_string</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01801 &#32;&#32;<link linkend="_lauxlib_8h_1a5088ff720ec66200d83eb78467b77239">luaL_newlib</link>(L,&#32;<link linkend="_lstrlib_8c_1aea7d99046a1869e17a061706511f770c">strlib</link>);
01802 &#32;&#32;<link linkend="_lstrlib_8c_1a16d034da6b46e6beae228472f26ec07b">createmetatable</link>(L);
01803 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01804 }
01805 
</programlisting></section>
