.TH "C:/Users/longyg/Documents/gitprojects/lua/src/ldebug.h" 3 "2020年 九月 9日 星期三" "Version 1.0" "Lua_Docmention" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/longyg/Documents/gitprojects/lua/src/ldebug.h
.SH SYNOPSIS
.br
.PP
\fC#include 'lstate\&.h'\fP
.br

.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBpcRel\fP(pc,  p)   (\fBcast_int\fP((pc) \- (p)\->code) \- 1)"
.br
.ti -1c
.RI "#define \fBresethookcount\fP(L)   (L\->hookcount = L\->basehookcount)"
.br
.ti -1c
.RI "#define \fBABSLINEINFO\fP   (\-0x80)"
.br
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "\fBLUAI_FUNC\fP int \fBluaG_getfuncline\fP (const \fBProto\fP *f, int pc)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP const char * \fBluaG_findlocal\fP (\fBlua_State\fP *L, \fBCallInfo\fP *ci, int n, \fBStkId\fP *pos)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP \fBl_noret\fP \fBluaG_typeerror\fP (\fBlua_State\fP *L, const \fBTValue\fP *o, const char *opname)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP \fBl_noret\fP \fBluaG_forerror\fP (\fBlua_State\fP *L, const \fBTValue\fP *o, const char *what)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP \fBl_noret\fP \fBluaG_concaterror\fP (\fBlua_State\fP *L, const \fBTValue\fP *p1, const \fBTValue\fP *p2)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP \fBl_noret\fP \fBluaG_opinterror\fP (\fBlua_State\fP *L, const \fBTValue\fP *p1, const \fBTValue\fP *p2, const char *msg)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP \fBl_noret\fP \fBluaG_tointerror\fP (\fBlua_State\fP *L, const \fBTValue\fP *p1, const \fBTValue\fP *p2)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP \fBl_noret\fP \fBluaG_ordererror\fP (\fBlua_State\fP *L, const \fBTValue\fP *p1, const \fBTValue\fP *p2)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP \fBl_noret\fP \fBluaG_runerror\fP (\fBlua_State\fP *L, const char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP const char * \fBluaG_addinfo\fP (\fBlua_State\fP *L, const char *msg, \fBTString\fP *src, int line)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP \fBl_noret\fP \fBluaG_errormsg\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "\fBLUAI_FUNC\fP int \fBluaG_traceexec\fP (\fBlua_State\fP *L, const \fBInstruction\fP *pc)"
.br
.in -1c
.SH "宏定义说明"
.PP 
.SS "#define ABSLINEINFO   (\-0x80)"

.PP
在文件 ldebug\&.h 第 22 行定义\&.
.SS "#define pcRel(pc, p)   (\fBcast_int\fP((pc) \- (p)\->code) \- 1)"

.PP
在文件 ldebug\&.h 第 14 行定义\&.
.SS "#define resethookcount(L)   (L\->hookcount = L\->basehookcount)"

.PP
在文件 ldebug\&.h 第 16 行定义\&.
.SH "函数说明"
.PP 
.SS "\fBLUAI_FUNC\fP const char* luaG_addinfo (\fBlua_State\fP * L, const char * msg, \fBTString\fP * src, int line)"

.PP
在文件 ldebug\&.c 第 746 行定义\&.
.SS "\fBLUAI_FUNC\fP \fBl_noret\fP luaG_concaterror (\fBlua_State\fP * L, const \fBTValue\fP * p1, const \fBTValue\fP * p2)"

.PP
在文件 ldebug\&.c 第 710 行定义\&.
.SS "\fBLUAI_FUNC\fP \fBl_noret\fP luaG_errormsg (\fBlua_State\fP * L)"

.PP
在文件 ldebug\&.c 第 758 行定义\&.
.SS "\fBLUAI_FUNC\fP const char* luaG_findlocal (\fBlua_State\fP * L, \fBCallInfo\fP * ci, int n, \fBStkId\fP * pos)"

.PP
在文件 ldebug\&.c 第 204 行定义\&.
.SS "\fBLUAI_FUNC\fP \fBl_noret\fP luaG_forerror (\fBlua_State\fP * L, const \fBTValue\fP * o, const char * what)"

.PP
在文件 ldebug\&.c 第 704 行定义\&.
.SS "\fBLUAI_FUNC\fP int luaG_getfuncline (const \fBProto\fP * f, int pc)"

.PP
在文件 ldebug\&.c 第 89 行定义\&.
.SS "\fBLUAI_FUNC\fP \fBl_noret\fP luaG_opinterror (\fBlua_State\fP * L, const \fBTValue\fP * p1, const \fBTValue\fP * p2, const char * msg)"

.PP
在文件 ldebug\&.c 第 716 行定义\&.
.SS "\fBLUAI_FUNC\fP \fBl_noret\fP luaG_ordererror (\fBlua_State\fP * L, const \fBTValue\fP * p1, const \fBTValue\fP * p2)"

.PP
在文件 ldebug\&.c 第 735 行定义\&.
.SS "\fBLUAI_FUNC\fP \fBl_noret\fP luaG_runerror (\fBlua_State\fP * L, const char * fmt,  \&.\&.\&.)"

.PP
在文件 ldebug\&.c 第 771 行定义\&.
.SS "\fBLUAI_FUNC\fP \fBl_noret\fP luaG_tointerror (\fBlua_State\fP * L, const \fBTValue\fP * p1, const \fBTValue\fP * p2)"

.PP
在文件 ldebug\&.c 第 727 行定义\&.
.SS "\fBLUAI_FUNC\fP int luaG_traceexec (\fBlua_State\fP * L, const \fBInstruction\fP * pc)"

.PP
在文件 ldebug\&.c 第 798 行定义\&.
.SS "\fBLUAI_FUNC\fP \fBl_noret\fP luaG_typeerror (\fBlua_State\fP * L, const \fBTValue\fP * o, const char * opname)"

.PP
在文件 ldebug\&.c 第 698 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 Lua_Docmention 的 源代码自动生成\&.
