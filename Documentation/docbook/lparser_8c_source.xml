<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lparser_8c_source" xml:lang="zh">
<title>D:/gitworkspace/lua/lparser.c</title>
<programlisting>00001 <emphasis role="comment">/*</emphasis>
00002 <emphasis role="comment">**&#32;$Id:&#32;lparser.c&#32;$</emphasis>
00003 <emphasis role="comment">**&#32;Lua&#32;Parser</emphasis>
00004 <emphasis role="comment">**&#32;See&#32;Copyright&#32;Notice&#32;in&#32;lua.h</emphasis>
00005 <emphasis role="comment">*/</emphasis>
00006 
<anchor xml:id="_lparser_8c_source_1l00007"/><link linkend="_lparser_8c_1a7b083c8164f99ddd60e711ca706869d0">00007</link> <emphasis role="preprocessor">#define&#32;lparser_c</emphasis>
<anchor xml:id="_lparser_8c_source_1l00008"/><link linkend="_lparser_8c_1abf0b3947b59218777a8e928a10be205b">00008</link> <emphasis role="preprocessor">#define&#32;LUA_CORE</emphasis>
00009 
00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lprefix_8h">lprefix.h</link>&quot;</emphasis>
00011 
00012 
00013 <emphasis role="preprocessor">#include&#32;&lt;limits.h&gt;</emphasis>
00014 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
00015 
00016 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lua_8h">lua.h</link>&quot;</emphasis>
00017 
00018 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lcode_8h">lcode.h</link>&quot;</emphasis>
00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ldebug_8h">ldebug.h</link>&quot;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ldo_8h">ldo.h</link>&quot;</emphasis>
00021 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lfunc_8h">lfunc.h</link>&quot;</emphasis>
00022 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_llex_8h">llex.h</link>&quot;</emphasis>
00023 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lmem_8h">lmem.h</link>&quot;</emphasis>
00024 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lobject_8h">lobject.h</link>&quot;</emphasis>
00025 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lopcodes_8h">lopcodes.h</link>&quot;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lparser_8h">lparser.h</link>&quot;</emphasis>
00027 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lstate_8h">lstate.h</link>&quot;</emphasis>
00028 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lstring_8h">lstring.h</link>&quot;</emphasis>
00029 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ltable_8h">ltable.h</link>&quot;</emphasis>
00030 
00031 
00032 
00033 <emphasis role="comment">/*&#32;maximum&#32;number&#32;of&#32;local&#32;variables&#32;per&#32;function&#32;(must&#32;be&#32;smaller</emphasis>
00034 <emphasis role="comment">&#32;&#32;&#32;than&#32;250,&#32;due&#32;to&#32;the&#32;bytecode&#32;format)&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00035"/><link linkend="_lparser_8c_1a0879a0e632584a9a8bee5ebffab571ca">00035</link> <emphasis role="preprocessor">#define&#32;MAXVARS&#32;&#32;&#32;&#32;&#32;200</emphasis>
00036 
00037 
<anchor xml:id="_lparser_8c_source_1l00038"/><link linkend="_lparser_8c_1a38d6bad3bcde3d124ca880d6a9d82ba6">00038</link> <emphasis role="preprocessor">#define&#32;hasmultret(k)&#32;&#32;&#32;&#32;&#32;&#32;&#32;((k)&#32;==&#32;VCALL&#32;||&#32;(k)&#32;==&#32;VVARARG)</emphasis>
00039 
00040 
00041 <emphasis role="comment">/*&#32;because&#32;all&#32;strings&#32;are&#32;unified&#32;by&#32;the&#32;scanner,&#32;the&#32;parser</emphasis>
00042 <emphasis role="comment">&#32;&#32;&#32;can&#32;use&#32;pointer&#32;equality&#32;for&#32;string&#32;equality&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00043"/><link linkend="_lparser_8c_1a5ea0ac9ed10a85ea4b0db7ca78050824">00043</link> <emphasis role="preprocessor">#define&#32;eqstr(a,b)&#32;&#32;((a)&#32;==&#32;(b))</emphasis>
00044 
00045 
00046 <emphasis role="comment">/*</emphasis>
00047 <emphasis role="comment">**&#32;nodes&#32;for&#32;block&#32;list&#32;(list&#32;of&#32;active&#32;blocks)</emphasis>
00048 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00049"/><link linkend="_struct_block_cnt">00049</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_block_cnt">BlockCnt</link>&#32;{
<anchor xml:id="_lparser_8c_source_1l00050"/><link linkend="_struct_block_cnt_1ac2f830a4a64e2952f9bec87b687ecc18">00050</link> &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_block_cnt">BlockCnt</link>&#32;*<link linkend="_struct_block_cnt_1ac2f830a4a64e2952f9bec87b687ecc18">previous</link>;&#32;&#32;<emphasis role="comment">/*&#32;chain&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00051"/><link linkend="_struct_block_cnt_1a92037659e880f2ed9767df1686eaa5bb">00051</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_block_cnt_1a92037659e880f2ed9767df1686eaa5bb">firstlabel</link>;&#32;&#32;<emphasis role="comment">/*&#32;index&#32;of&#32;first&#32;label&#32;in&#32;this&#32;block&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00052"/><link linkend="_struct_block_cnt_1af671961b250410c3aa35bc67b91899fe">00052</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_block_cnt_1af671961b250410c3aa35bc67b91899fe">firstgoto</link>;&#32;&#32;<emphasis role="comment">/*&#32;index&#32;of&#32;first&#32;pending&#32;goto&#32;in&#32;this&#32;block&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00053"/><link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">00053</link> &#32;&#32;<link linkend="_llimits_8h_1ae1fe9ac10d9803bd1d7bdf30b18bad68">lu_byte</link>&#32;<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>;&#32;&#32;<emphasis role="comment">/*&#32;#&#32;active&#32;locals&#32;outside&#32;the&#32;block&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00054"/><link linkend="_struct_block_cnt_1ad374a38391476799f5e222e522e2c69f">00054</link> &#32;&#32;<link linkend="_llimits_8h_1ae1fe9ac10d9803bd1d7bdf30b18bad68">lu_byte</link>&#32;<link linkend="_struct_block_cnt_1ad374a38391476799f5e222e522e2c69f">upval</link>;&#32;&#32;<emphasis role="comment">/*&#32;true&#32;if&#32;some&#32;variable&#32;in&#32;the&#32;block&#32;is&#32;an&#32;upvalue&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00055"/><link linkend="_struct_block_cnt_1aa4edbe7ee446eb5ff32f9961cbc86574">00055</link> &#32;&#32;<link linkend="_llimits_8h_1ae1fe9ac10d9803bd1d7bdf30b18bad68">lu_byte</link>&#32;<link linkend="_struct_block_cnt_1aa4edbe7ee446eb5ff32f9961cbc86574">isloop</link>;&#32;&#32;<emphasis role="comment">/*&#32;true&#32;if&#32;&apos;block&apos;&#32;is&#32;a&#32;loop&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00056"/><link linkend="_struct_block_cnt_1acd0d502f314b8217f087b17b734240d4">00056</link> &#32;&#32;<link linkend="_llimits_8h_1ae1fe9ac10d9803bd1d7bdf30b18bad68">lu_byte</link>&#32;<link linkend="_struct_block_cnt_1acd0d502f314b8217f087b17b734240d4">insidetbc</link>;&#32;&#32;<emphasis role="comment">/*&#32;true&#32;if&#32;inside&#32;the&#32;scope&#32;of&#32;a&#32;to-be-closed&#32;var.&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00057"/><link linkend="_lparser_8c_1a672971a1a6f6fb76c404bac87274225f">00057</link> }&#32;<link linkend="_lparser_8c_1a672971a1a6f6fb76c404bac87274225f">BlockCnt</link>;
00058 
00059 
00060 
00061 <emphasis role="comment">/*</emphasis>
00062 <emphasis role="comment">**&#32;prototypes&#32;for&#32;recursive&#32;non-terminal&#32;functions</emphasis>
00063 <emphasis role="comment">*/</emphasis>
00064 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1ac29df3687aea9407dcfec478092fce4c">statement</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls);
00065 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v);
00066 
00067 
<anchor xml:id="_lparser_8c_source_1l00068"/><link linkend="_lparser_8c_1a285759c10955d85bbf00c0041125e7bc">00068</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_llimits_8h_1a9f743fcc9a5278cb9ee10355f09f7302">l_noret</link>&#32;<link linkend="_lparser_8c_1a285759c10955d85bbf00c0041125e7bc">error_expected</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;token)&#32;{
00069 &#32;&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(ls,
00070 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;<emphasis role="stringliteral">&quot;%s&#32;expected&quot;</emphasis>,&#32;<link linkend="_llex_8c_1afbf0654ae651496d0e8dcebeefbefed6">luaX_token2str</link>(ls,&#32;token)));
00071 }
00072 
00073 
<anchor xml:id="_lparser_8c_source_1l00074"/><link linkend="_lparser_8c_1ad02c6061a90a3461a24d2eede35cbf1f">00074</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_llimits_8h_1a9f743fcc9a5278cb9ee10355f09f7302">l_noret</link>&#32;<link linkend="_lparser_8c_1ad02c6061a90a3461a24d2eede35cbf1f">errorlimit</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;limit,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*what)&#32;{
00075 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>;
00076 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg;
00077 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a4dfda1a3839aa77fb8fc7626075151dd">linedefined</link>;
00078 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*where&#32;=&#32;(line&#32;==&#32;0)
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="stringliteral">&quot;main&#32;function&quot;</emphasis>
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(L,&#32;<emphasis role="stringliteral">&quot;function&#32;at&#32;line&#32;%d&quot;</emphasis>,&#32;line);
00081 &#32;&#32;msg&#32;=&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(L,&#32;<emphasis role="stringliteral">&quot;too&#32;many&#32;%s&#32;(limit&#32;is&#32;%d)&#32;in&#32;%s&quot;</emphasis>,
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;what,&#32;limit,&#32;where);
00083 &#32;&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>,&#32;msg);
00084 }
00085 
00086 
<anchor xml:id="_lparser_8c_source_1l00087"/><link linkend="_lparser_8c_1adcc7a63edd0b578c2e7980371ff7f686">00087</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1adcc7a63edd0b578c2e7980371ff7f686">checklimit</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;v,&#32;<emphasis role="keywordtype">int</emphasis>&#32;l,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*what)&#32;{
00088 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v&#32;&gt;&#32;l)&#32;<link linkend="_lparser_8c_1ad02c6061a90a3461a24d2eede35cbf1f">errorlimit</link>(fs,&#32;l,&#32;what);
00089 }
00090 
00091 
00092 <emphasis role="comment">/*</emphasis>
00093 <emphasis role="comment">**&#32;Test&#32;whether&#32;next&#32;token&#32;is&#32;&apos;c&apos;;&#32;if&#32;so,&#32;skip&#32;it.</emphasis>
00094 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00095"/><link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">00095</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;c)&#32;{
00096 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;c)&#32;{
00097 &#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);
00098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00099 &#32;&#32;}
00100 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00101 }
00102 
00103 
00104 <emphasis role="comment">/*</emphasis>
00105 <emphasis role="comment">**&#32;Check&#32;that&#32;next&#32;token&#32;is&#32;&apos;c&apos;.</emphasis>
00106 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00107"/><link linkend="_lparser_8c_1a2c856a5873c90f45525cf0d9abebbfde">00107</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a2c856a5873c90f45525cf0d9abebbfde">check</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;c)&#32;{
00108 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;!=&#32;c)
00109 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a285759c10955d85bbf00c0041125e7bc">error_expected</link>(ls,&#32;c);
00110 }
00111 
00112 
00113 <emphasis role="comment">/*</emphasis>
00114 <emphasis role="comment">**&#32;Check&#32;that&#32;next&#32;token&#32;is&#32;&apos;c&apos;&#32;and&#32;skip&#32;it.</emphasis>
00115 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00116"/><link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">00116</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;c)&#32;{
00117 &#32;&#32;<link linkend="_lparser_8c_1a2c856a5873c90f45525cf0d9abebbfde">check</link>(ls,&#32;c);
00118 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);
00119 }
00120 
00121 
<anchor xml:id="_lparser_8c_source_1l00122"/><link linkend="_lparser_8c_1aece9aca90eb75d99df8490bdb813bdd4">00122</link> <emphasis role="preprocessor">#define&#32;check_condition(ls,c,msg)&#32;&#32;&#32;{&#32;if&#32;(!(c))&#32;luaX_syntaxerror(ls,&#32;msg);&#32;}</emphasis>
00123 
00124 
00125 <emphasis role="comment">/*</emphasis>
00126 <emphasis role="comment">**&#32;Check&#32;that&#32;next&#32;token&#32;is&#32;&apos;what&apos;&#32;and&#32;skip&#32;it.&#32;In&#32;case&#32;of&#32;error,</emphasis>
00127 <emphasis role="comment">**&#32;raise&#32;an&#32;error&#32;that&#32;the&#32;expected&#32;&apos;what&apos;&#32;should&#32;match&#32;a&#32;&apos;who&apos;</emphasis>
00128 <emphasis role="comment">**&#32;in&#32;line&#32;&apos;where&apos;&#32;(if&#32;that&#32;is&#32;not&#32;the&#32;current&#32;line).</emphasis>
00129 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00130"/><link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">00130</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;what,&#32;<emphasis role="keywordtype">int</emphasis>&#32;who,&#32;<emphasis role="keywordtype">int</emphasis>&#32;where)&#32;{
00131 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llimits_8h_1ac6c45889010c1bd68631771b64f18101">unlikely</link>(!<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;what)))&#32;{
00132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(where&#32;==&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>)&#32;&#32;<emphasis role="comment">/*&#32;all&#32;in&#32;the&#32;same&#32;line?&#32;*/</emphasis>
00133 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a285759c10955d85bbf00c0041125e7bc">error_expected</link>(ls,&#32;what);&#32;&#32;<emphasis role="comment">/*&#32;do&#32;not&#32;need&#32;a&#32;complex&#32;message&#32;*/</emphasis>
00134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00135 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(ls,&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%s&#32;expected&#32;(to&#32;close&#32;%s&#32;at&#32;line&#32;%d)&quot;</emphasis>,
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1afbf0654ae651496d0e8dcebeefbefed6">luaX_token2str</link>(ls,&#32;what),&#32;<link linkend="_llex_8c_1afbf0654ae651496d0e8dcebeefbefed6">luaX_token2str</link>(ls,&#32;who),&#32;where));
00138 &#32;&#32;&#32;&#32;}
00139 &#32;&#32;}
00140 }
00141 
00142 
<anchor xml:id="_lparser_8c_source_1l00143"/><link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">00143</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_t_string">TString</link>&#32;*<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
00144 &#32;&#32;<link linkend="_struct_t_string">TString</link>&#32;*ts;
00145 &#32;&#32;<link linkend="_lparser_8c_1a2c856a5873c90f45525cf0d9abebbfde">check</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a84e5aed35515b2881005d88dccaf0c30">TK_NAME</link>);
00146 &#32;&#32;ts&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a54762edd38b11a9194e6c7cee3c3fcdd">seminfo</link>.<link linkend="_union_sem_info_1ae879ced0cb88fb344f2b1b8ac7786af8">ts</link>;
00147 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);
00148 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ts;
00149 }
00150 
00151 
<anchor xml:id="_lparser_8c_source_1l00152"/><link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">00152</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>&#32;(<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4e">expkind</link>&#32;k,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{
00153 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;
00154 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;k;
00155 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;i;
00156 }
00157 
00158 
<anchor xml:id="_lparser_8c_source_1l00159"/><link linkend="_lparser_8c_1a08fd72f32434a2bab9cd08298085e9f9">00159</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a08fd72f32434a2bab9cd08298085e9f9">codestring</link>&#32;(<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<link linkend="_struct_t_string">TString</link>&#32;*s)&#32;{
00160 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;
00161 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab06fcbc55fc36e7552634eef34375124">VKSTR</link>;
00162 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a97fdec5618426b4684c2d66924e85713">strval</link>&#32;=&#32;s;
00163 }
00164 
00165 
<anchor xml:id="_lparser_8c_source_1l00166"/><link linkend="_lparser_8c_1a7da9556e730c9865b3de6c6440640266">00166</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a7da9556e730c9865b3de6c6440640266">codename</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00167 &#32;&#32;<link linkend="_lparser_8c_1a08fd72f32434a2bab9cd08298085e9f9">codestring</link>(e,&#32;<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls));
00168 }
00169 
00170 
00171 <emphasis role="comment">/*</emphasis>
00172 <emphasis role="comment">**&#32;Register&#32;a&#32;new&#32;local&#32;variable&#32;in&#32;the&#32;active&#32;&apos;Proto&apos;&#32;(for&#32;debug</emphasis>
00173 <emphasis role="comment">**&#32;information).</emphasis>
00174 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00175"/><link linkend="_lparser_8c_1ae3420853c676cec8df3bf2c102315f51">00175</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1ae3420853c676cec8df3bf2c102315f51">registerlocalvar</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_t_string">TString</link>&#32;*varname)&#32;{
00176 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*f&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;
00177 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;oldsize&#32;=&#32;f-&gt;<link linkend="_struct_proto_1af9147ae18b522811714aeb19036f639d">sizelocvars</link>;
00178 &#32;&#32;<link linkend="_lmem_8h_1a38823c4cdf0d53b73e1e3015affb06f9">luaM_growvector</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;f-&gt;<link linkend="_struct_proto_1a7a727780b57a02cd42e7ef902f6e7f90">locvars</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a98a2ba4884547f7e194926404e8c33b2">ndebugvars</link>,&#32;f-&gt;<link linkend="_struct_proto_1af9147ae18b522811714aeb19036f639d">sizelocvars</link>,
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_loc_var">LocVar</link>,&#32;SHRT_MAX,&#32;<emphasis role="stringliteral">&quot;local&#32;variables&quot;</emphasis>);
00180 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(oldsize&#32;&lt;&#32;f-&gt;sizelocvars)
00181 &#32;&#32;&#32;&#32;f-&gt;<link linkend="_struct_proto_1a7a727780b57a02cd42e7ef902f6e7f90">locvars</link>[oldsize++].<link linkend="_struct_loc_var_1ac2450e0899ac889b040f20956221cd83">varname</link>&#32;=&#32;NULL;
00182 &#32;&#32;f-&gt;<link linkend="_struct_proto_1a7a727780b57a02cd42e7ef902f6e7f90">locvars</link>[fs-&gt;<link linkend="_struct_func_state_1a98a2ba4884547f7e194926404e8c33b2">ndebugvars</link>].<link linkend="_struct_loc_var_1ac2450e0899ac889b040f20956221cd83">varname</link>&#32;=&#32;varname;
00183 &#32;&#32;f-&gt;<link linkend="_struct_proto_1a7a727780b57a02cd42e7ef902f6e7f90">locvars</link>[fs-&gt;<link linkend="_struct_func_state_1a98a2ba4884547f7e194926404e8c33b2">ndebugvars</link>].<link linkend="_struct_loc_var_1aede5156df384666bb10ffffe4e8c2d8f">startpc</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>;
00184 &#32;&#32;<link linkend="_lgc_8h_1a90ac4f3c7085a418025edcc7215e8983">luaC_objbarrier</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;f,&#32;varname);
00185 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fs-&gt;<link linkend="_struct_func_state_1a98a2ba4884547f7e194926404e8c33b2">ndebugvars</link>++;
00186 }
00187 
00188 
00189 <emphasis role="comment">/*</emphasis>
00190 <emphasis role="comment">**&#32;Create&#32;a&#32;new&#32;local&#32;variable&#32;with&#32;the&#32;given&#32;&apos;name&apos;.&#32;Return&#32;its&#32;index</emphasis>
00191 <emphasis role="comment">**&#32;in&#32;the&#32;function.</emphasis>
00192 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00193"/><link linkend="_lparser_8c_1a89f5732cbee45d78cfec9dbd1a207bb7">00193</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a89f5732cbee45d78cfec9dbd1a207bb7">new_localvar</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_t_string">TString</link>&#32;*name)&#32;{
00194 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>;
00195 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00196 &#32;&#32;<link linkend="_struct_dyndata">Dyndata</link>&#32;*dyd&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>;
00197 &#32;&#32;<link linkend="_union_vardesc">Vardesc</link>&#32;*var;
00198 &#32;&#32;<link linkend="_lparser_8c_1adcc7a63edd0b578c2e7980371ff7f686">checklimit</link>(fs,&#32;dyd-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;+&#32;1&#32;-&#32;fs-&gt;<link linkend="_struct_func_state_1a0a14fa0565e6102066866045271dce45">firstlocal</link>,
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a0879a0e632584a9a8bee5ebffab571ca">MAXVARS</link>,&#32;<emphasis role="stringliteral">&quot;local&#32;variables&quot;</emphasis>);
00200 &#32;&#32;<link linkend="_lmem_8h_1a38823c4cdf0d53b73e1e3015affb06f9">luaM_growvector</link>(L,&#32;dyd-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a82904a5390f50cd14b6b2b52717f1c95">arr</link>,&#32;dyd-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;+&#32;1,
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyd-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a439227feff9d7f55384e8780cfc2eb82">size</link>,&#32;<link linkend="_union_vardesc">Vardesc</link>,&#32;USHRT_MAX,&#32;<emphasis role="stringliteral">&quot;local&#32;variables&quot;</emphasis>);
00202 &#32;&#32;var&#32;=&#32;&amp;dyd-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a82904a5390f50cd14b6b2b52717f1c95">arr</link>[dyd-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>++];
00203 &#32;&#32;var-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;=&#32;<link linkend="_lparser_8h_1a5def61221e8337c622aaede33e79e7ea">VDKREG</link>;&#32;&#32;<emphasis role="comment">/*&#32;default&#32;*/</emphasis>
00204 &#32;&#32;var-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>&#32;=&#32;name;
00205 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dyd-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;-&#32;1&#32;-&#32;fs-&gt;<link linkend="_struct_func_state_1a0a14fa0565e6102066866045271dce45">firstlocal</link>;
00206 }
00207 
<anchor xml:id="_lparser_8c_source_1l00208"/><link linkend="_lparser_8c_1a031fd03dec54eb67a3cfac513b8575bb">00208</link> <emphasis role="preprocessor">#define&#32;new_localvarliteral(ls,v)&#32;\</emphasis>
00209 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;new_localvar(ls,&#32;&#32;\</emphasis>
00210 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;luaX_newstring(ls,&#32;&quot;&quot;&#32;v,&#32;(sizeof(v)/sizeof(char))&#32;-&#32;1));</emphasis>
00211 
00212 
00213 
00214 <emphasis role="comment">/*</emphasis>
00215 <emphasis role="comment">**&#32;Return&#32;the&#32;&quot;variable&#32;description&quot;&#32;(Vardesc)&#32;of&#32;a&#32;given&#32;variable.</emphasis>
00216 <emphasis role="comment">**&#32;(Unless&#32;noted&#32;otherwise,&#32;all&#32;variables&#32;are&#32;referred&#32;to&#32;by&#32;their</emphasis>
00217 <emphasis role="comment">**&#32;compiler&#32;indices.)</emphasis>
00218 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00219"/><link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">00219</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_union_vardesc">Vardesc</link>&#32;*<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;vidx)&#32;{
00220 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a82904a5390f50cd14b6b2b52717f1c95">arr</link>[fs-&gt;<link linkend="_struct_func_state_1a0a14fa0565e6102066866045271dce45">firstlocal</link>&#32;+&#32;vidx];
00221 }
00222 
00223 
00224 <emphasis role="comment">/*</emphasis>
00225 <emphasis role="comment">**&#32;Convert&#32;&apos;nvar&apos;,&#32;a&#32;compiler&#32;index&#32;level,&#32;to&#32;it&#32;corresponding</emphasis>
00226 <emphasis role="comment">**&#32;stack&#32;index&#32;level.&#32;For&#32;that,&#32;search&#32;for&#32;the&#32;highest&#32;variable</emphasis>
00227 <emphasis role="comment">**&#32;below&#32;that&#32;level&#32;that&#32;is&#32;in&#32;the&#32;stack&#32;and&#32;uses&#32;its&#32;stack</emphasis>
00228 <emphasis role="comment">**&#32;index&#32;(&apos;sidx&apos;).</emphasis>
00229 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00230"/><link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">00230</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nvar)&#32;{
00231 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(nvar--&#32;&gt;&#32;0)&#32;{
00232 &#32;&#32;&#32;&#32;<link linkend="_union_vardesc">Vardesc</link>&#32;*vd&#32;=&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(fs,&#32;nvar);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;variable&#32;*/</emphasis>
00233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vd-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;!=&#32;<link linkend="_lparser_8h_1ae37149486c77ebc6d130a3a1d1b5942d">RDKCTC</link>)&#32;&#32;<emphasis role="comment">/*&#32;is&#32;in&#32;the&#32;stack?&#32;*/</emphasis>
00234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vd-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1ad3780fafebbfafd0f0eb202cc4077e52">sidx</link>&#32;+&#32;1;
00235 &#32;&#32;}
00236 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;variables&#32;in&#32;the&#32;stack&#32;*/</emphasis>
00237 }
00238 
00239 
00240 <emphasis role="comment">/*</emphasis>
00241 <emphasis role="comment">**&#32;Return&#32;the&#32;number&#32;of&#32;variables&#32;in&#32;the&#32;stack&#32;for&#32;function&#32;&apos;fs&apos;</emphasis>
00242 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00243"/><link linkend="_lparser_8h_1abaccce7d28987ed29e8c1c5bc3a48a85">00243</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00244 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>(fs,&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>);
00245 }
00246 
00247 
00248 <emphasis role="comment">/*</emphasis>
00249 <emphasis role="comment">**&#32;Get&#32;the&#32;debug-information&#32;entry&#32;for&#32;current&#32;variable&#32;&apos;vidx&apos;.</emphasis>
00250 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00251"/><link linkend="_lparser_8c_1af4e2a81c94d2b795fd0a4c4a2cd9d22f">00251</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_loc_var">LocVar</link>&#32;*<link linkend="_lparser_8c_1af4e2a81c94d2b795fd0a4c4a2cd9d22f">localdebuginfo</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;vidx)&#32;{
00252 &#32;&#32;<link linkend="_union_vardesc">Vardesc</link>&#32;*vd&#32;=&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(fs,&#32;&#32;vidx);
00253 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vd-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;==&#32;<link linkend="_lparser_8h_1ae37149486c77ebc6d130a3a1d1b5942d">RDKCTC</link>)
00254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;debug&#32;info.&#32;for&#32;constants&#32;*/</emphasis>
00255 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00256 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx&#32;=&#32;vd-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a3737fb5a89eb5cf2a4048f7b544afb2f">pidx</link>;
00257 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(idx&#32;&lt;&#32;fs-&gt;ndebugvars);
00258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a7a727780b57a02cd42e7ef902f6e7f90">locvars</link>[idx];
00259 &#32;&#32;}
00260 }
00261 
00262 
00263 <emphasis role="comment">/*</emphasis>
00264 <emphasis role="comment">**&#32;Create&#32;an&#32;expression&#32;representing&#32;variable&#32;&apos;vidx&apos;</emphasis>
00265 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00266"/><link linkend="_lparser_8c_1a234a1dfbb418ebb04cc831ee29dac2b3">00266</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a234a1dfbb418ebb04cc831ee29dac2b3">init_var</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;vidx)&#32;{
00267 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;
00268 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>;
00269 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.vidx&#32;=&#32;vidx;
00270 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.sidx&#32;=&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(fs,&#32;vidx)-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1ad3780fafebbfafd0f0eb202cc4077e52">sidx</link>;
00271 }
00272 
00273 
00274 <emphasis role="comment">/*</emphasis>
00275 <emphasis role="comment">**&#32;Raises&#32;an&#32;error&#32;if&#32;variable&#32;described&#32;by&#32;&apos;e&apos;&#32;is&#32;read&#32;only</emphasis>
00276 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00277"/><link linkend="_lparser_8c_1a68563b28ef658576afc360b4979f3ed6">00277</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a68563b28ef658576afc360b4979f3ed6">check_readonly</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00278 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00279 &#32;&#32;<link linkend="_struct_t_string">TString</link>&#32;*varname&#32;=&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;to&#32;be&#32;set&#32;if&#32;variable&#32;is&#32;const&#32;*/</emphasis>
00280 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{
00281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea45b9027634b5e43ca50f4d6efbbe4220">VCONST</link>:&#32;{
00282 &#32;&#32;&#32;&#32;&#32;&#32;varname&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a82904a5390f50cd14b6b2b52717f1c95">arr</link>[e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>].<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>;
00283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00284 &#32;&#32;&#32;&#32;}
00285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>:&#32;{
00286 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_union_vardesc">Vardesc</link>&#32;*vardesc&#32;=&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.vidx);
00287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vardesc-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;!=&#32;<link linkend="_lparser_8h_1a5def61221e8337c622aaede33e79e7ea">VDKREG</link>)&#32;&#32;<emphasis role="comment">/*&#32;not&#32;a&#32;regular&#32;variable?&#32;*/</emphasis>
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;varname&#32;=&#32;vardesc-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>;
00289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00290 &#32;&#32;&#32;&#32;}
00291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>:&#32;{
00292 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_upvaldesc">Upvaldesc</link>&#32;*up&#32;=&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1ac3b891662880254a7e0a3dc0afa86254">upvalues</link>[e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>];
00293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(up-&gt;<link linkend="_struct_upvaldesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;!=&#32;<link linkend="_lparser_8h_1a5def61221e8337c622aaede33e79e7ea">VDKREG</link>)
00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;varname&#32;=&#32;up-&gt;<link linkend="_struct_upvaldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>;
00295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00296 &#32;&#32;&#32;&#32;}
00297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
00298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;other&#32;cases&#32;cannot&#32;be&#32;read-only&#32;*/</emphasis>
00299 &#32;&#32;}
00300 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(varname)&#32;{
00301 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg&#32;=&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,
00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;attempt&#32;to&#32;assign&#32;to&#32;const&#32;variable&#32;&apos;%s&apos;&quot;</emphasis>,&#32;<link linkend="_lobject_8h_1acb05d3ab238923581a9c629b8e11a6ac">getstr</link>(varname));
00303 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1abe3b325f24edb9acdca694951cbcb4d8">luaK_semerror</link>(ls,&#32;msg);&#32;&#32;<emphasis role="comment">/*&#32;error&#32;*/</emphasis>
00304 &#32;&#32;}
00305 }
00306 
00307 
00308 <emphasis role="comment">/*</emphasis>
00309 <emphasis role="comment">**&#32;Start&#32;the&#32;scope&#32;for&#32;the&#32;last&#32;&apos;nvars&apos;&#32;created&#32;variables.</emphasis>
00310 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00311"/><link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">00311</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">adjustlocalvars</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nvars)&#32;{
00312 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00313 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;stklevel&#32;=&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(fs);
00314 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00315 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nvars;&#32;i++)&#32;{
00316 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vidx&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>++;
00317 &#32;&#32;&#32;&#32;<link linkend="_union_vardesc">Vardesc</link>&#32;*var&#32;=&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(fs,&#32;vidx);
00318 &#32;&#32;&#32;&#32;var-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1ad3780fafebbfafd0f0eb202cc4077e52">sidx</link>&#32;=&#32;stklevel++;
00319 &#32;&#32;&#32;&#32;var-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a3737fb5a89eb5cf2a4048f7b544afb2f">pidx</link>&#32;=&#32;<link linkend="_lparser_8c_1ae3420853c676cec8df3bf2c102315f51">registerlocalvar</link>(ls,&#32;fs,&#32;var-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>);
00320 &#32;&#32;}
00321 }
00322 
00323 
00324 <emphasis role="comment">/*</emphasis>
00325 <emphasis role="comment">**&#32;Close&#32;the&#32;scope&#32;for&#32;all&#32;variables&#32;up&#32;to&#32;level&#32;&apos;tolevel&apos;.</emphasis>
00326 <emphasis role="comment">**&#32;(debug&#32;info.)</emphasis>
00327 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00328"/><link linkend="_lparser_8c_1a12f6d0b70d7dc43b72f45ad2a6293fb7">00328</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a12f6d0b70d7dc43b72f45ad2a6293fb7">removevars</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tolevel)&#32;{
00329 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;-=&#32;(fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;-&#32;tolevel);
00330 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;&gt;&#32;tolevel)&#32;{
00331 &#32;&#32;&#32;&#32;<link linkend="_struct_loc_var">LocVar</link>&#32;*var&#32;=&#32;<link linkend="_lparser_8c_1af4e2a81c94d2b795fd0a4c4a2cd9d22f">localdebuginfo</link>(fs,&#32;--fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>);
00332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(var)&#32;&#32;<emphasis role="comment">/*&#32;does&#32;it&#32;have&#32;debug&#32;information?&#32;*/</emphasis>
00333 &#32;&#32;&#32;&#32;&#32;&#32;var-&gt;<link linkend="_struct_loc_var_1a4531ef6d4151bc1400f288a004323700">endpc</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>;
00334 &#32;&#32;}
00335 }
00336 
00337 
00338 <emphasis role="comment">/*</emphasis>
00339 <emphasis role="comment">**&#32;Search&#32;the&#32;upvalues&#32;of&#32;the&#32;function&#32;&apos;fs&apos;&#32;for&#32;one</emphasis>
00340 <emphasis role="comment">**&#32;with&#32;the&#32;given&#32;&apos;name&apos;.</emphasis>
00341 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00342"/><link linkend="_lparser_8c_1a4fa16ff6ddba70e699b1b87ca18d30e1">00342</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a4fa16ff6ddba70e699b1b87ca18d30e1">searchupvalue</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_t_string">TString</link>&#32;*name)&#32;{
00343 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00344 &#32;&#32;<link linkend="_struct_upvaldesc">Upvaldesc</link>&#32;*up&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1ac3b891662880254a7e0a3dc0afa86254">upvalues</link>;
00345 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;fs-&gt;<link linkend="_struct_func_state_1a4709d4e7654d3620c605e6be84a96c3b">nups</link>;&#32;i++)&#32;{
00346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a5ea0ac9ed10a85ea4b0db7ca78050824">eqstr</link>(up[i].name,&#32;name))&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
00347 &#32;&#32;}
00348 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;found&#32;*/</emphasis>
00349 }
00350 
00351 
<anchor xml:id="_lparser_8c_source_1l00352"/><link linkend="_lparser_8c_1a355e8b6a68c23cc5a65e40cd276c38b1">00352</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_upvaldesc">Upvaldesc</link>&#32;*<link linkend="_lparser_8c_1a355e8b6a68c23cc5a65e40cd276c38b1">allocupvalue</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00353 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*f&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;
00354 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;oldsize&#32;=&#32;f-&gt;<link linkend="_struct_proto_1a2e13a98343ef0d1233bb3e62ae519c5f">sizeupvalues</link>;
00355 &#32;&#32;<link linkend="_lparser_8c_1adcc7a63edd0b578c2e7980371ff7f686">checklimit</link>(fs,&#32;fs-&gt;<link linkend="_struct_func_state_1a4709d4e7654d3620c605e6be84a96c3b">nups</link>&#32;+&#32;1,&#32;<link linkend="_lfunc_8h_1ac5b64a112a390053ec98913b67b3f112">MAXUPVAL</link>,&#32;<emphasis role="stringliteral">&quot;upvalues&quot;</emphasis>);
00356 &#32;&#32;<link linkend="_lmem_8h_1a38823c4cdf0d53b73e1e3015affb06f9">luaM_growvector</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;f-&gt;<link linkend="_struct_proto_1ac3b891662880254a7e0a3dc0afa86254">upvalues</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a4709d4e7654d3620c605e6be84a96c3b">nups</link>,&#32;f-&gt;<link linkend="_struct_proto_1a2e13a98343ef0d1233bb3e62ae519c5f">sizeupvalues</link>,
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_upvaldesc">Upvaldesc</link>,&#32;<link linkend="_lfunc_8h_1ac5b64a112a390053ec98913b67b3f112">MAXUPVAL</link>,&#32;<emphasis role="stringliteral">&quot;upvalues&quot;</emphasis>);
00358 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(oldsize&#32;&lt;&#32;f-&gt;sizeupvalues)
00359 &#32;&#32;&#32;&#32;f-&gt;<link linkend="_struct_proto_1ac3b891662880254a7e0a3dc0afa86254">upvalues</link>[oldsize++].<link linkend="_struct_upvaldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>&#32;=&#32;NULL;
00360 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;f-&gt;<link linkend="_struct_proto_1ac3b891662880254a7e0a3dc0afa86254">upvalues</link>[fs-&gt;<link linkend="_struct_func_state_1a4709d4e7654d3620c605e6be84a96c3b">nups</link>++];
00361 }
00362 
00363 
<anchor xml:id="_lparser_8c_source_1l00364"/><link linkend="_lparser_8c_1a840fa0de24ef09efda91ce6ebae3876d">00364</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a840fa0de24ef09efda91ce6ebae3876d">newupvalue</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_t_string">TString</link>&#32;*name,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
00365 &#32;&#32;<link linkend="_struct_upvaldesc">Upvaldesc</link>&#32;*up&#32;=&#32;<link linkend="_lparser_8c_1a355e8b6a68c23cc5a65e40cd276c38b1">allocupvalue</link>(fs);
00366 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*prev&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a5fa27b262907fd2c729f9bab5f6c87d8">prev</link>;
00367 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>)&#32;{
00368 &#32;&#32;&#32;&#32;up-&gt;<link linkend="_struct_upvaldesc_1acfbdd39f714ffdb714bddda46b7ae744">instack</link>&#32;=&#32;1;
00369 &#32;&#32;&#32;&#32;up-&gt;<link linkend="_struct_upvaldesc_1a6234b462bcd2f6c2e6f5e537b2793b84">idx</link>&#32;=&#32;v-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.sidx;
00370 &#32;&#32;&#32;&#32;up-&gt;<link linkend="_struct_upvaldesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;=&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(prev,&#32;v-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.vidx)-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>;
00371 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lparser_8c_1a5ea0ac9ed10a85ea4b0db7ca78050824">eqstr</link>(name,&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(prev,&#32;v-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.vidx)-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>));
00372 &#32;&#32;}
00373 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00374 &#32;&#32;&#32;&#32;up-&gt;<link linkend="_struct_upvaldesc_1acfbdd39f714ffdb714bddda46b7ae744">instack</link>&#32;=&#32;0;
00375 &#32;&#32;&#32;&#32;up-&gt;<link linkend="_struct_upvaldesc_1a6234b462bcd2f6c2e6f5e537b2793b84">idx</link>&#32;=&#32;<link linkend="_llimits_8h_1a596f5b6e992f53a5a4e5732083448dd4">cast_byte</link>(v-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>);
00376 &#32;&#32;&#32;&#32;up-&gt;<link linkend="_struct_upvaldesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;=&#32;prev-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1ac3b891662880254a7e0a3dc0afa86254">upvalues</link>[v-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>].<link linkend="_struct_upvaldesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>;
00377 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lparser_8c_1a5ea0ac9ed10a85ea4b0db7ca78050824">eqstr</link>(name,&#32;prev-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1ac3b891662880254a7e0a3dc0afa86254">upvalues</link>[v-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>].<link linkend="_struct_upvaldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>));
00378 &#32;&#32;}
00379 &#32;&#32;up-&gt;<link linkend="_struct_upvaldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>&#32;=&#32;name;
00380 &#32;&#32;<link linkend="_lgc_8h_1a90ac4f3c7085a418025edcc7215e8983">luaC_objbarrier</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>,&#32;name);
00381 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fs-&gt;<link linkend="_struct_func_state_1a4709d4e7654d3620c605e6be84a96c3b">nups</link>&#32;-&#32;1;
00382 }
00383 
00384 
00385 <emphasis role="comment">/*</emphasis>
00386 <emphasis role="comment">**&#32;Look&#32;for&#32;an&#32;active&#32;local&#32;variable&#32;with&#32;the&#32;name&#32;&apos;n&apos;&#32;in&#32;the</emphasis>
00387 <emphasis role="comment">**&#32;function&#32;&apos;fs&apos;.&#32;If&#32;found,&#32;initialize&#32;&apos;var&apos;&#32;with&#32;it&#32;and&#32;return</emphasis>
00388 <emphasis role="comment">**&#32;its&#32;expression&#32;kind;&#32;otherwise&#32;return&#32;-1.</emphasis>
00389 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00390"/><link linkend="_lparser_8c_1aa0f0bf6be9c3844c8c9bd05074b53c07">00390</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1aa0f0bf6be9c3844c8c9bd05074b53c07">searchvar</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_t_string">TString</link>&#32;*n,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*var)&#32;{
00391 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00392 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>)&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;i--)&#32;{
00393 &#32;&#32;&#32;&#32;<link linkend="_union_vardesc">Vardesc</link>&#32;*vd&#32;=&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(fs,&#32;i);
00394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a5ea0ac9ed10a85ea4b0db7ca78050824">eqstr</link>(n,&#32;vd-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;found?&#32;*/</emphasis>
00395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(vd-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;==&#32;<link linkend="_lparser_8h_1ae37149486c77ebc6d130a3a1d1b5942d">RDKCTC</link>)&#32;&#32;<emphasis role="comment">/*&#32;compile-time&#32;constant?&#32;*/</emphasis>
00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(var,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea45b9027634b5e43ca50f4d6efbbe4220">VCONST</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a0a14fa0565e6102066866045271dce45">firstlocal</link>&#32;+&#32;i);
00397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;real&#32;variable&#32;*/</emphasis>
00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a234a1dfbb418ebb04cc831ee29dac2b3">init_var</link>(fs,&#32;var,&#32;i);
00399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;var-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>;
00400 &#32;&#32;&#32;&#32;}
00401 &#32;&#32;}
00402 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;found&#32;*/</emphasis>
00403 }
00404 
00405 
00406 <emphasis role="comment">/*</emphasis>
00407 <emphasis role="comment">**&#32;Mark&#32;block&#32;where&#32;variable&#32;at&#32;given&#32;level&#32;was&#32;defined</emphasis>
00408 <emphasis role="comment">**&#32;(to&#32;emit&#32;close&#32;instructions&#32;later).</emphasis>
00409 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00410"/><link linkend="_lparser_8c_1ab92f39b4f46a9844ecab9d585d636bd4">00410</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1ab92f39b4f46a9844ecab9d585d636bd4">markupval</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;level)&#32;{
00411 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;*bl&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>;
00412 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(bl-&gt;<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;&gt;&#32;level)
00413 &#32;&#32;&#32;&#32;bl&#32;=&#32;bl-&gt;<link linkend="_struct_block_cnt_1ac2f830a4a64e2952f9bec87b687ecc18">previous</link>;
00414 &#32;&#32;bl-&gt;<link linkend="_struct_block_cnt_1ad374a38391476799f5e222e522e2c69f">upval</link>&#32;=&#32;1;
00415 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a1fa4457f711fca24bdfdcc9fc9abb308">needclose</link>&#32;=&#32;1;
00416 }
00417 
00418 
00419 <emphasis role="comment">/*</emphasis>
00420 <emphasis role="comment">**&#32;Find&#32;a&#32;variable&#32;with&#32;the&#32;given&#32;name&#32;&apos;n&apos;.&#32;If&#32;it&#32;is&#32;an&#32;upvalue,&#32;add</emphasis>
00421 <emphasis role="comment">**&#32;this&#32;upvalue&#32;into&#32;all&#32;intermediate&#32;functions.&#32;If&#32;it&#32;is&#32;a&#32;global,&#32;set</emphasis>
00422 <emphasis role="comment">**&#32;&apos;var&apos;&#32;as&#32;&apos;void&apos;&#32;as&#32;a&#32;flag.</emphasis>
00423 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00424"/><link linkend="_lparser_8c_1a4e2939a86340a3fe70c3238288c4af8a">00424</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a4e2939a86340a3fe70c3238288c4af8a">singlevaraux</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_t_string">TString</link>&#32;*n,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*var,&#32;<emphasis role="keywordtype">int</emphasis>&#32;base)&#32;{
00425 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;&#32;<emphasis role="comment">/*&#32;no&#32;more&#32;levels?&#32;*/</emphasis>
00426 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(var,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;default&#32;is&#32;global&#32;*/</emphasis>
00427 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00428 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;v&#32;=&#32;<link linkend="_lparser_8c_1aa0f0bf6be9c3844c8c9bd05074b53c07">searchvar</link>(fs,&#32;n,&#32;var);&#32;&#32;<emphasis role="comment">/*&#32;look&#32;up&#32;locals&#32;at&#32;current&#32;level&#32;*/</emphasis>
00429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v&#32;&gt;=&#32;0)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;found?&#32;*/</emphasis>
00430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>&#32;&amp;&amp;&#32;!base)
00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ab92f39b4f46a9844ecab9d585d636bd4">markupval</link>(fs,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.vidx);&#32;&#32;<emphasis role="comment">/*&#32;local&#32;will&#32;be&#32;used&#32;as&#32;an&#32;upval&#32;*/</emphasis>
00432 &#32;&#32;&#32;&#32;}
00433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;not&#32;found&#32;as&#32;local&#32;at&#32;current&#32;level;&#32;try&#32;upvalues&#32;*/</emphasis>
00434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx&#32;=&#32;<link linkend="_lparser_8c_1a4fa16ff6ddba70e699b1b87ca18d30e1">searchupvalue</link>(fs,&#32;n);&#32;&#32;<emphasis role="comment">/*&#32;try&#32;existing&#32;upvalues&#32;*/</emphasis>
00435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idx&#32;&lt;&#32;0)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;not&#32;found?&#32;*/</emphasis>
00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a4e2939a86340a3fe70c3238288c4af8a">singlevaraux</link>(fs-&gt;<link linkend="_struct_func_state_1a5fa27b262907fd2c729f9bab5f6c87d8">prev</link>,&#32;n,&#32;var,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;try&#32;upper&#32;levels&#32;*/</emphasis>
00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(var-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>&#32;||&#32;var-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>)&#32;&#32;<emphasis role="comment">/*&#32;local&#32;or&#32;upvalue?&#32;*/</emphasis>
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;idx&#32;&#32;=&#32;<link linkend="_lparser_8c_1a840fa0de24ef09efda91ce6ebae3876d">newupvalue</link>(fs,&#32;n,&#32;var);&#32;&#32;<emphasis role="comment">/*&#32;will&#32;be&#32;a&#32;new&#32;upvalue&#32;*/</emphasis>
00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;it&#32;is&#32;a&#32;global&#32;or&#32;a&#32;constant&#32;*/</emphasis>
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;don&apos;t&#32;need&#32;to&#32;do&#32;anything&#32;at&#32;this&#32;level&#32;*/</emphasis>
00441 &#32;&#32;&#32;&#32;&#32;&#32;}
00442 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(var,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>,&#32;idx);&#32;&#32;<emphasis role="comment">/*&#32;new&#32;or&#32;old&#32;upvalue&#32;*/</emphasis>
00443 &#32;&#32;&#32;&#32;}
00444 &#32;&#32;}
00445 }
00446 
00447 
00448 <emphasis role="comment">/*</emphasis>
00449 <emphasis role="comment">**&#32;Find&#32;a&#32;variable&#32;with&#32;the&#32;given&#32;name&#32;&apos;n&apos;,&#32;handling&#32;global&#32;variables</emphasis>
00450 <emphasis role="comment">**&#32;too.</emphasis>
00451 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00452"/><link linkend="_lparser_8c_1a39a46ec796479bdd22eea51ddef11685">00452</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a39a46ec796479bdd22eea51ddef11685">singlevar</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*var)&#32;{
00453 &#32;&#32;<link linkend="_struct_t_string">TString</link>&#32;*varname&#32;=&#32;<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls);
00454 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00455 &#32;&#32;<link linkend="_lparser_8c_1a4e2939a86340a3fe70c3238288c4af8a">singlevaraux</link>(fs,&#32;varname,&#32;var,&#32;1);
00456 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(var-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;global&#32;name?&#32;*/</emphasis>
00457 &#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;key;
00458 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a4e2939a86340a3fe70c3238288c4af8a">singlevaraux</link>(fs,&#32;ls-&gt;<link linkend="_struct_lex_state_1a67ee27111e3e3fb2fe5304d91f390a7f">envn</link>,&#32;var,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;environment&#32;variable&#32;*/</emphasis>
00459 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(var-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;!=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>);&#32;&#32;<emphasis role="comment">/*&#32;this&#32;one&#32;must&#32;exist&#32;*/</emphasis>
00460 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a08fd72f32434a2bab9cd08298085e9f9">codestring</link>(&amp;key,&#32;varname);&#32;&#32;<emphasis role="comment">/*&#32;key&#32;is&#32;variable&#32;name&#32;*/</emphasis>
00461 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af9e8e4c1ab85deb3fe8fdbc39d25c6d9">luaK_indexed</link>(fs,&#32;var,&#32;&amp;key);&#32;&#32;<emphasis role="comment">/*&#32;env[varname]&#32;*/</emphasis>
00462 &#32;&#32;}
00463 }
00464 
00465 
00466 <emphasis role="comment">/*</emphasis>
00467 <emphasis role="comment">**&#32;Adjust&#32;the&#32;number&#32;of&#32;results&#32;from&#32;an&#32;expression&#32;list&#32;&apos;e&apos;&#32;with&#32;&apos;nexps&apos;</emphasis>
00468 <emphasis role="comment">**&#32;expressions&#32;to&#32;&apos;nvars&apos;&#32;values.</emphasis>
00469 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00470"/><link linkend="_lparser_8c_1a7dafcad9b819fe82292276b63a632e80">00470</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a7dafcad9b819fe82292276b63a632e80">adjust_assign</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nvars,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nexps,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00471 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00472 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;needed&#32;=&#32;nvars&#32;-&#32;nexps;&#32;&#32;<emphasis role="comment">/*&#32;extra&#32;values&#32;needed&#32;*/</emphasis>
00473 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a38d6bad3bcde3d124ca880d6a9d82ba6">hasmultret</link>(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;last&#32;expression&#32;has&#32;multiple&#32;returns?&#32;*/</emphasis>
00474 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;extra&#32;=&#32;needed&#32;+&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;discount&#32;last&#32;expression&#32;itself&#32;*/</emphasis>
00475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(extra&#32;&lt;&#32;0)
00476 &#32;&#32;&#32;&#32;&#32;&#32;extra&#32;=&#32;0;
00477 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1aa088b6c0fff724b3d4c76830416da244">luaK_setreturns</link>(fs,&#32;e,&#32;extra);&#32;&#32;<emphasis role="comment">/*&#32;last&#32;exp.&#32;provides&#32;the&#32;difference&#32;*/</emphasis>
00478 &#32;&#32;}
00479 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;!=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>)&#32;&#32;<emphasis role="comment">/*&#32;at&#32;least&#32;one&#32;expression?&#32;*/</emphasis>
00481 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;e);&#32;&#32;<emphasis role="comment">/*&#32;close&#32;last&#32;expression&#32;*/</emphasis>
00482 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(needed&#32;&gt;&#32;0)&#32;&#32;<emphasis role="comment">/*&#32;missing&#32;values?&#32;*/</emphasis>
00483 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a625d410137e33fbd9593426c6e74bcf1">luaK_nil</link>(fs,&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>,&#32;needed);&#32;&#32;<emphasis role="comment">/*&#32;complete&#32;with&#32;nils&#32;*/</emphasis>
00484 &#32;&#32;}
00485 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(needed&#32;&gt;&#32;0)
00486 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;needed);&#32;&#32;<emphasis role="comment">/*&#32;registers&#32;for&#32;extra&#32;values&#32;*/</emphasis>
00487 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;adding&#32;&apos;needed&apos;&#32;is&#32;actually&#32;a&#32;subtraction&#32;*/</emphasis>
00488 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;+=&#32;needed;&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;extra&#32;values&#32;*/</emphasis>
00489 }
00490 
00491 
00492 <emphasis role="comment">/*</emphasis>
00493 <emphasis role="comment">**&#32;Macros&#32;to&#32;limit&#32;the&#32;maximum&#32;recursion&#32;depth&#32;while&#32;parsing</emphasis>
00494 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00495"/><link linkend="_lparser_8c_1ab61308992bd6c2013519fdebd0d52704">00495</link> <emphasis role="preprocessor">#define&#32;enterlevel(ls)&#32;&#32;luaE_enterCcall((ls)-&gt;L)</emphasis>
00496 
<anchor xml:id="_lparser_8c_source_1l00497"/><link linkend="_lparser_8c_1a147b3ba4d2004b4b4ee7260661ec31e1">00497</link> <emphasis role="preprocessor">#define&#32;leavelevel(ls)&#32;&#32;luaE_exitCcall((ls)-&gt;L)</emphasis>
00498 
00499 
00500 <emphasis role="comment">/*</emphasis>
00501 <emphasis role="comment">**&#32;Generates&#32;an&#32;error&#32;that&#32;a&#32;goto&#32;jumps&#32;into&#32;the&#32;scope&#32;of&#32;some</emphasis>
00502 <emphasis role="comment">**&#32;local&#32;variable.</emphasis>
00503 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00504"/><link linkend="_lparser_8c_1a6095ffe4a3669369b48424a59063fb71">00504</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_llimits_8h_1a9f743fcc9a5278cb9ee10355f09f7302">l_noret</link>&#32;<link linkend="_lparser_8c_1a6095ffe4a3669369b48424a59063fb71">jumpscopeerror</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*gt)&#32;{
00505 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*varname&#32;=&#32;<link linkend="_lobject_8h_1acb05d3ab238923581a9c629b8e11a6ac">getstr</link>(<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;gt-&gt;<link linkend="_struct_labeldesc_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>)-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>);
00506 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;goto&#32;%s&gt;&#32;at&#32;line&#32;%d&#32;jumps&#32;into&#32;the&#32;scope&#32;of&#32;local&#32;&apos;%s&apos;&quot;</emphasis>;
00507 &#32;&#32;msg&#32;=&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;msg,&#32;<link linkend="_lobject_8h_1acb05d3ab238923581a9c629b8e11a6ac">getstr</link>(gt-&gt;<link linkend="_struct_labeldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>),&#32;gt-&gt;<link linkend="_struct_labeldesc_1a41ebd28ef1d7c6ade45642cb6acc1039">line</link>,&#32;varname);
00508 &#32;&#32;<link linkend="_lcode_8c_1abe3b325f24edb9acdca694951cbcb4d8">luaK_semerror</link>(ls,&#32;msg);&#32;&#32;<emphasis role="comment">/*&#32;raise&#32;the&#32;error&#32;*/</emphasis>
00509 }
00510 
00511 
00512 <emphasis role="comment">/*</emphasis>
00513 <emphasis role="comment">**&#32;Solves&#32;the&#32;goto&#32;at&#32;index&#32;&apos;g&apos;&#32;to&#32;given&#32;&apos;label&apos;&#32;and&#32;removes&#32;it</emphasis>
00514 <emphasis role="comment">**&#32;from&#32;the&#32;list&#32;of&#32;pending&#32;goto&apos;s.</emphasis>
00515 <emphasis role="comment">**&#32;If&#32;it&#32;jumps&#32;into&#32;the&#32;scope&#32;of&#32;some&#32;variable,&#32;raises&#32;an&#32;error.</emphasis>
00516 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00517"/><link linkend="_lparser_8c_1a73b1624593cc10a15008229b30eeae81">00517</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a73b1624593cc10a15008229b30eeae81">solvegoto</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;g,&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*label)&#32;{
00518 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00519 &#32;&#32;<link linkend="_struct_labellist">Labellist</link>&#32;*gl&#32;=&#32;&amp;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a4c6dec0d9e4a816e2717a8b8534afaed">gt</link>;&#32;&#32;<emphasis role="comment">/*&#32;list&#32;of&#32;goto&apos;s&#32;*/</emphasis>
00520 &#32;&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*gt&#32;=&#32;&amp;gl-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[g];&#32;&#32;<emphasis role="comment">/*&#32;goto&#32;to&#32;be&#32;resolved&#32;*/</emphasis>
00521 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lparser_8c_1a5ea0ac9ed10a85ea4b0db7ca78050824">eqstr</link>(gt-&gt;<link linkend="_struct_labeldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>,&#32;label-&gt;<link linkend="_struct_labeldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>));
00522 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llimits_8h_1ac6c45889010c1bd68631771b64f18101">unlikely</link>(gt-&gt;<link linkend="_struct_labeldesc_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;&lt;&#32;label-&gt;<link linkend="_struct_labeldesc_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>))&#32;&#32;<emphasis role="comment">/*&#32;enter&#32;some&#32;scope?&#32;*/</emphasis>
00523 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a6095ffe4a3669369b48424a59063fb71">jumpscopeerror</link>(ls,&#32;gt);
00524 &#32;&#32;<link linkend="_lcode_8c_1a4db596b358989fa68a43b6f697fc9a09">luaK_patchlist</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;gt-&gt;<link linkend="_struct_labeldesc_1ac8c81e61335635fa4709d82412b31f06">pc</link>,&#32;label-&gt;<link linkend="_struct_labeldesc_1ac8c81e61335635fa4709d82412b31f06">pc</link>);
00525 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;g;&#32;i&#32;&lt;&#32;gl-&gt;<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;-&#32;1;&#32;i++)&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;goto&#32;from&#32;pending&#32;list&#32;*/</emphasis>
00526 &#32;&#32;&#32;&#32;gl-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[i]&#32;=&#32;gl-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[i&#32;+&#32;1];
00527 &#32;&#32;gl-&gt;<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>--;
00528 }
00529 
00530 
00531 <emphasis role="comment">/*</emphasis>
00532 <emphasis role="comment">**&#32;Search&#32;for&#32;an&#32;active&#32;label&#32;with&#32;the&#32;given&#32;name.</emphasis>
00533 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00534"/><link linkend="_lparser_8c_1a599b5cc6bd2b4abfe73b21b01e09af33">00534</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*<link linkend="_lparser_8c_1a599b5cc6bd2b4abfe73b21b01e09af33">findlabel</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_t_string">TString</link>&#32;*name)&#32;{
00535 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00536 &#32;&#32;<link linkend="_struct_dyndata">Dyndata</link>&#32;*dyd&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>;
00537 &#32;&#32;<emphasis role="comment">/*&#32;check&#32;labels&#32;in&#32;current&#32;function&#32;for&#32;a&#32;match&#32;*/</emphasis>
00538 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1a92037659e880f2ed9767df1686eaa5bb">firstlabel</link>;&#32;i&#32;&lt;&#32;dyd-&gt;label.n;&#32;i++)&#32;{
00539 &#32;&#32;&#32;&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*lb&#32;=&#32;&amp;dyd-&gt;<link linkend="_struct_dyndata_1afcc3242d2f2c467f33dbeac521a9e861">label</link>.<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[i];
00540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a5ea0ac9ed10a85ea4b0db7ca78050824">eqstr</link>(lb-&gt;<link linkend="_struct_labeldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>,&#32;name))&#32;&#32;<emphasis role="comment">/*&#32;correct&#32;label?&#32;*/</emphasis>
00541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lb;
00542 &#32;&#32;}
00543 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;label&#32;not&#32;found&#32;*/</emphasis>
00544 }
00545 
00546 
00547 <emphasis role="comment">/*</emphasis>
00548 <emphasis role="comment">**&#32;Adds&#32;a&#32;new&#32;label/goto&#32;in&#32;the&#32;corresponding&#32;list.</emphasis>
00549 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00550"/><link linkend="_lparser_8c_1ac8408d50bc1af7533968d363841bcf27">00550</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1ac8408d50bc1af7533968d363841bcf27">newlabelentry</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_labellist">Labellist</link>&#32;*l,&#32;<link linkend="_struct_t_string">TString</link>&#32;*name,
00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc)&#32;{
00552 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;l-&gt;<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
00553 &#32;&#32;<link linkend="_lmem_8h_1a38823c4cdf0d53b73e1e3015affb06f9">luaM_growvector</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;l-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>,&#32;n,&#32;l-&gt;<link linkend="_struct_labellist_1a439227feff9d7f55384e8780cfc2eb82">size</link>,
00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_labeldesc">Labeldesc</link>,&#32;SHRT_MAX,&#32;<emphasis role="stringliteral">&quot;labels/gotos&quot;</emphasis>);
00555 &#32;&#32;l-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[n].<link linkend="_struct_labeldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>&#32;=&#32;name;
00556 &#32;&#32;l-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[n].<link linkend="_struct_labeldesc_1a41ebd28ef1d7c6ade45642cb6acc1039">line</link>&#32;=&#32;line;
00557 &#32;&#32;l-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[n].<link linkend="_struct_labeldesc_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>;
00558 &#32;&#32;l-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[n].<link linkend="_struct_labeldesc_1a64a05a5e38f4a6588c0481b3833af6f1">close</link>&#32;=&#32;0;
00559 &#32;&#32;l-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[n].<link linkend="_struct_labeldesc_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;=&#32;pc;
00560 &#32;&#32;l-&gt;<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;=&#32;n&#32;+&#32;1;
00561 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
00562 }
00563 
00564 
<anchor xml:id="_lparser_8c_source_1l00565"/><link linkend="_lparser_8c_1afa4884f1fcf6756c7c9ebadef88a629f">00565</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1afa4884f1fcf6756c7c9ebadef88a629f">newgotoentry</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_t_string">TString</link>&#32;*name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc)&#32;{
00566 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lparser_8c_1ac8408d50bc1af7533968d363841bcf27">newlabelentry</link>(ls,&#32;&amp;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a4c6dec0d9e4a816e2717a8b8534afaed">gt</link>,&#32;name,&#32;line,&#32;pc);
00567 }
00568 
00569 
00570 <emphasis role="comment">/*</emphasis>
00571 <emphasis role="comment">**&#32;Solves&#32;forward&#32;jumps.&#32;Check&#32;whether&#32;new&#32;label&#32;&apos;lb&apos;&#32;matches&#32;any</emphasis>
00572 <emphasis role="comment">**&#32;pending&#32;gotos&#32;in&#32;current&#32;block&#32;and&#32;solves&#32;them.&#32;Return&#32;true</emphasis>
00573 <emphasis role="comment">**&#32;if&#32;any&#32;of&#32;the&#32;goto&apos;s&#32;need&#32;to&#32;close&#32;upvalues.</emphasis>
00574 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00575"/><link linkend="_lparser_8c_1abd72e798cea4c3def7bc6791e5f07a43">00575</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1abd72e798cea4c3def7bc6791e5f07a43">solvegotos</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*lb)&#32;{
00576 &#32;&#32;<link linkend="_struct_labellist">Labellist</link>&#32;*gl&#32;=&#32;&amp;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a4c6dec0d9e4a816e2717a8b8534afaed">gt</link>;
00577 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>-&gt;<link linkend="_struct_block_cnt_1af671961b250410c3aa35bc67b91899fe">firstgoto</link>;
00578 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;needsclose&#32;=&#32;0;
00579 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;gl-&gt;n)&#32;{
00580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a5ea0ac9ed10a85ea4b0db7ca78050824">eqstr</link>(gl-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[i].<link linkend="_struct_labeldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>,&#32;lb-&gt;<link linkend="_struct_labeldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>))&#32;{
00581 &#32;&#32;&#32;&#32;&#32;&#32;needsclose&#32;|=&#32;gl-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[i].<link linkend="_struct_labeldesc_1a64a05a5e38f4a6588c0481b3833af6f1">close</link>;
00582 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a73b1624593cc10a15008229b30eeae81">solvegoto</link>(ls,&#32;i,&#32;lb);&#32;&#32;<emphasis role="comment">/*&#32;will&#32;remove&#32;&apos;i&apos;&#32;from&#32;the&#32;list&#32;*/</emphasis>
00583 &#32;&#32;&#32;&#32;}
00584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00585 &#32;&#32;&#32;&#32;&#32;&#32;i++;
00586 &#32;&#32;}
00587 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;needsclose;
00588 }
00589 
00590 
00591 <emphasis role="comment">/*</emphasis>
00592 <emphasis role="comment">**&#32;Create&#32;a&#32;new&#32;label&#32;with&#32;the&#32;given&#32;&apos;name&apos;&#32;at&#32;the&#32;given&#32;&apos;line&apos;.</emphasis>
00593 <emphasis role="comment">**&#32;&apos;last&apos;&#32;tells&#32;whether&#32;label&#32;is&#32;the&#32;last&#32;non-op&#32;statement&#32;in&#32;its</emphasis>
00594 <emphasis role="comment">**&#32;block.&#32;Solves&#32;all&#32;pending&#32;goto&apos;s&#32;to&#32;this&#32;new&#32;label&#32;and&#32;adds</emphasis>
00595 <emphasis role="comment">**&#32;a&#32;close&#32;instruction&#32;if&#32;necessary.</emphasis>
00596 <emphasis role="comment">**&#32;Returns&#32;true&#32;iff&#32;it&#32;added&#32;a&#32;close&#32;instruction.</emphasis>
00597 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00598"/><link linkend="_lparser_8c_1abfc0a485f2b04026699cafcdaa1bfb04">00598</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1abfc0a485f2b04026699cafcdaa1bfb04">createlabel</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_t_string">TString</link>&#32;*name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;last)&#32;{
00600 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00601 &#32;&#32;<link linkend="_struct_labellist">Labellist</link>&#32;*ll&#32;=&#32;&amp;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1afcc3242d2f2c467f33dbeac521a9e861">label</link>;
00602 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;l&#32;=&#32;<link linkend="_lparser_8c_1ac8408d50bc1af7533968d363841bcf27">newlabelentry</link>(ls,&#32;ll,&#32;name,&#32;line,&#32;<link linkend="_lcode_8c_1afd70025e040dde0ef167df148de201b0">luaK_getlabel</link>(fs));
00603 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(last)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;label&#32;is&#32;last&#32;no-op&#32;statement&#32;in&#32;the&#32;block?&#32;*/</emphasis>
00604 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;assume&#32;that&#32;locals&#32;are&#32;already&#32;out&#32;of&#32;scope&#32;*/</emphasis>
00605 &#32;&#32;&#32;&#32;ll-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[l].<link linkend="_struct_labeldesc_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>-&gt;<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>;
00606 &#32;&#32;}
00607 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1abd72e798cea4c3def7bc6791e5f07a43">solvegotos</link>(ls,&#32;&amp;ll-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[l]))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;need&#32;close?&#32;*/</emphasis>
00608 &#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a9e771dc35104ec1246adba881d27e372">OP_CLOSE</link>,&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(fs),&#32;0,&#32;0);
00609 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00610 &#32;&#32;}
00611 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00612 }
00613 
00614 
00615 <emphasis role="comment">/*</emphasis>
00616 <emphasis role="comment">**&#32;Adjust&#32;pending&#32;gotos&#32;to&#32;outer&#32;level&#32;of&#32;a&#32;block.</emphasis>
00617 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00618"/><link linkend="_lparser_8c_1a59499d1fac1f098f62ea922753ff88bb">00618</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a59499d1fac1f098f62ea922753ff88bb">movegotosout</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;*bl)&#32;{
00619 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00620 &#32;&#32;<link linkend="_struct_labellist">Labellist</link>&#32;*gl&#32;=&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a4c6dec0d9e4a816e2717a8b8534afaed">gt</link>;
00621 &#32;&#32;<emphasis role="comment">/*&#32;correct&#32;pending&#32;gotos&#32;to&#32;current&#32;block&#32;*/</emphasis>
00622 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;bl-&gt;<link linkend="_struct_block_cnt_1af671961b250410c3aa35bc67b91899fe">firstgoto</link>;&#32;i&#32;&lt;&#32;gl-&gt;n;&#32;i++)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;for&#32;each&#32;pending&#32;goto&#32;*/</emphasis>
00623 &#32;&#32;&#32;&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*gt&#32;=&#32;&amp;gl-&gt;<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[i];
00624 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;leaving&#32;a&#32;variable&#32;scope?&#32;*/</emphasis>
00625 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>(fs,&#32;gt-&gt;<link linkend="_struct_labeldesc_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>)&#32;&gt;&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>(fs,&#32;bl-&gt;<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>))
00626 &#32;&#32;&#32;&#32;&#32;&#32;gt-&gt;<link linkend="_struct_labeldesc_1a64a05a5e38f4a6588c0481b3833af6f1">close</link>&#32;|=&#32;bl-&gt;<link linkend="_struct_block_cnt_1ad374a38391476799f5e222e522e2c69f">upval</link>;&#32;&#32;<emphasis role="comment">/*&#32;jump&#32;may&#32;need&#32;a&#32;close&#32;*/</emphasis>
00627 &#32;&#32;&#32;&#32;gt-&gt;<link linkend="_struct_labeldesc_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;=&#32;bl-&gt;<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>;&#32;&#32;<emphasis role="comment">/*&#32;update&#32;goto&#32;level&#32;*/</emphasis>
00628 &#32;&#32;}
00629 }
00630 
00631 
<anchor xml:id="_lparser_8c_source_1l00632"/><link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">00632</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;*bl,&#32;<link linkend="_llimits_8h_1ae1fe9ac10d9803bd1d7bdf30b18bad68">lu_byte</link>&#32;<link linkend="_struct_block_cnt_1aa4edbe7ee446eb5ff32f9961cbc86574">isloop</link>)&#32;{
00633 &#32;&#32;bl-&gt;<link linkend="_struct_block_cnt_1aa4edbe7ee446eb5ff32f9961cbc86574">isloop</link>&#32;=&#32;<link linkend="_struct_block_cnt_1aa4edbe7ee446eb5ff32f9961cbc86574">isloop</link>;
00634 &#32;&#32;bl-&gt;<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>;
00635 &#32;&#32;bl-&gt;<link linkend="_struct_block_cnt_1a92037659e880f2ed9767df1686eaa5bb">firstlabel</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1afcc3242d2f2c467f33dbeac521a9e861">label</link>.<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
00636 &#32;&#32;bl-&gt;<link linkend="_struct_block_cnt_1af671961b250410c3aa35bc67b91899fe">firstgoto</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a4c6dec0d9e4a816e2717a8b8534afaed">gt</link>.<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
00637 &#32;&#32;bl-&gt;<link linkend="_struct_block_cnt_1ad374a38391476799f5e222e522e2c69f">upval</link>&#32;=&#32;0;
00638 &#32;&#32;bl-&gt;<link linkend="_struct_block_cnt_1acd0d502f314b8217f087b17b734240d4">insidetbc</link>&#32;=&#32;(fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>&#32;!=&#32;NULL&#32;&amp;&amp;&#32;fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>-&gt;<link linkend="_struct_block_cnt_1acd0d502f314b8217f087b17b734240d4">insidetbc</link>);
00639 &#32;&#32;bl-&gt;<link linkend="_struct_block_cnt_1ac2f830a4a64e2952f9bec87b687ecc18">previous</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>;
00640 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>&#32;=&#32;bl;
00641 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;==&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(fs));
00642 }
00643 
00644 
00645 <emphasis role="comment">/*</emphasis>
00646 <emphasis role="comment">**&#32;generates&#32;an&#32;error&#32;for&#32;an&#32;undefined&#32;&apos;goto&apos;.</emphasis>
00647 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00648"/><link linkend="_lparser_8c_1a0e6f2c50414357750f14eb41e3d08edc">00648</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_llimits_8h_1a9f743fcc9a5278cb9ee10355f09f7302">l_noret</link>&#32;<link linkend="_lparser_8c_1a0e6f2c50414357750f14eb41e3d08edc">undefgoto</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*gt)&#32;{
00649 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg;
00650 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a5ea0ac9ed10a85ea4b0db7ca78050824">eqstr</link>(gt-&gt;<link linkend="_struct_labeldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>,&#32;<link linkend="_lstring_8h_1a1cd2754b136ed096325a76c6d16a82f5">luaS_newliteral</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;<emphasis role="stringliteral">&quot;break&quot;</emphasis>)))&#32;{
00651 &#32;&#32;&#32;&#32;msg&#32;=&#32;<emphasis role="stringliteral">&quot;break&#32;outside&#32;loop&#32;at&#32;line&#32;%d&quot;</emphasis>;
00652 &#32;&#32;&#32;&#32;msg&#32;=&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;msg,&#32;gt-&gt;<link linkend="_struct_labeldesc_1a41ebd28ef1d7c6ade45642cb6acc1039">line</link>);
00653 &#32;&#32;}
00654 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00655 &#32;&#32;&#32;&#32;msg&#32;=&#32;<emphasis role="stringliteral">&quot;no&#32;visible&#32;label&#32;&apos;%s&apos;&#32;for&#32;&lt;goto&gt;&#32;at&#32;line&#32;%d&quot;</emphasis>;
00656 &#32;&#32;&#32;&#32;msg&#32;=&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;msg,&#32;<link linkend="_lobject_8h_1acb05d3ab238923581a9c629b8e11a6ac">getstr</link>(gt-&gt;<link linkend="_struct_labeldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>),&#32;gt-&gt;<link linkend="_struct_labeldesc_1a41ebd28ef1d7c6ade45642cb6acc1039">line</link>);
00657 &#32;&#32;}
00658 &#32;&#32;<link linkend="_lcode_8c_1abe3b325f24edb9acdca694951cbcb4d8">luaK_semerror</link>(ls,&#32;msg);
00659 }
00660 
00661 
<anchor xml:id="_lparser_8c_source_1l00662"/><link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">00662</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00663 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;*bl&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>;
00664 &#32;&#32;<link linkend="_struct_lex_state">LexState</link>&#32;*ls&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>;
00665 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;hasclose&#32;=&#32;0;
00666 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;stklevel&#32;=&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>(fs,&#32;bl-&gt;<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>);&#32;&#32;<emphasis role="comment">/*&#32;level&#32;outside&#32;the&#32;block&#32;*/</emphasis>
00667 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bl-&gt;<link linkend="_struct_block_cnt_1aa4edbe7ee446eb5ff32f9961cbc86574">isloop</link>)&#32;&#32;<emphasis role="comment">/*&#32;fix&#32;pending&#32;breaks?&#32;*/</emphasis>
00668 &#32;&#32;&#32;&#32;hasclose&#32;=&#32;<link linkend="_lparser_8c_1abfc0a485f2b04026699cafcdaa1bfb04">createlabel</link>(ls,&#32;<link linkend="_lstring_8h_1a1cd2754b136ed096325a76c6d16a82f5">luaS_newliteral</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;<emphasis role="stringliteral">&quot;break&quot;</emphasis>),&#32;0,&#32;0);
00669 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!hasclose&#32;&amp;&amp;&#32;bl-&gt;<link linkend="_struct_block_cnt_1ac2f830a4a64e2952f9bec87b687ecc18">previous</link>&#32;&amp;&amp;&#32;bl-&gt;<link linkend="_struct_block_cnt_1ad374a38391476799f5e222e522e2c69f">upval</link>)
00670 &#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a9e771dc35104ec1246adba881d27e372">OP_CLOSE</link>,&#32;stklevel,&#32;0,&#32;0);
00671 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>&#32;=&#32;bl-&gt;<link linkend="_struct_block_cnt_1ac2f830a4a64e2952f9bec87b687ecc18">previous</link>;
00672 &#32;&#32;<link linkend="_lparser_8c_1a12f6d0b70d7dc43b72f45ad2a6293fb7">removevars</link>(fs,&#32;bl-&gt;<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>);
00673 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(bl-&gt;<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;==&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>);
00674 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;=&#32;stklevel;&#32;&#32;<emphasis role="comment">/*&#32;free&#32;registers&#32;*/</emphasis>
00675 &#32;&#32;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1afcc3242d2f2c467f33dbeac521a9e861">label</link>.<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;=&#32;bl-&gt;<link linkend="_struct_block_cnt_1a92037659e880f2ed9767df1686eaa5bb">firstlabel</link>;&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;local&#32;labels&#32;*/</emphasis>
00676 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bl-&gt;<link linkend="_struct_block_cnt_1ac2f830a4a64e2952f9bec87b687ecc18">previous</link>)&#32;&#32;<emphasis role="comment">/*&#32;inner&#32;block?&#32;*/</emphasis>
00677 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a59499d1fac1f098f62ea922753ff88bb">movegotosout</link>(fs,&#32;bl);&#32;&#32;<emphasis role="comment">/*&#32;update&#32;pending&#32;gotos&#32;to&#32;outer&#32;block&#32;*/</emphasis>
00678 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bl-&gt;<link linkend="_struct_block_cnt_1af671961b250410c3aa35bc67b91899fe">firstgoto</link>&#32;&lt;&#32;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a4c6dec0d9e4a816e2717a8b8534afaed">gt</link>.<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>)&#32;&#32;<emphasis role="comment">/*&#32;pending&#32;gotos&#32;in&#32;outer&#32;block?&#32;*/</emphasis>
00680 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a0e6f2c50414357750f14eb41e3d08edc">undefgoto</link>(ls,&#32;&amp;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a4c6dec0d9e4a816e2717a8b8534afaed">gt</link>.<link linkend="_struct_labellist_1ac756bb87f4ef801cff51f3513239236c">arr</link>[bl-&gt;<link linkend="_struct_block_cnt_1af671961b250410c3aa35bc67b91899fe">firstgoto</link>]);&#32;&#32;<emphasis role="comment">/*&#32;error&#32;*/</emphasis>
00681 &#32;&#32;}
00682 }
00683 
00684 
00685 <emphasis role="comment">/*</emphasis>
00686 <emphasis role="comment">**&#32;adds&#32;a&#32;new&#32;prototype&#32;into&#32;list&#32;of&#32;prototypes</emphasis>
00687 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00688"/><link linkend="_lparser_8c_1a57dad991ad72ca00978d43967277d9db">00688</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_proto">Proto</link>&#32;*<link linkend="_lparser_8c_1a57dad991ad72ca00978d43967277d9db">addprototype</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
00689 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*clp;
00690 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>;
00691 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00692 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*f&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;&#32;&#32;<emphasis role="comment">/*&#32;prototype&#32;of&#32;current&#32;function&#32;*/</emphasis>
00693 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs-&gt;<link linkend="_struct_func_state_1a928495140935d9d6ce0a100550473140">np</link>&#32;&gt;=&#32;f-&gt;<link linkend="_struct_proto_1aea0f5dcb02517aa08aa2ffa58c396260">sizep</link>)&#32;{
00694 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;oldsize&#32;=&#32;f-&gt;<link linkend="_struct_proto_1aea0f5dcb02517aa08aa2ffa58c396260">sizep</link>;
00695 &#32;&#32;&#32;&#32;<link linkend="_lmem_8h_1a38823c4cdf0d53b73e1e3015affb06f9">luaM_growvector</link>(L,&#32;f-&gt;<link linkend="_struct_proto_1ab7af98f98f5cf674f6be5e3fc855af43">p</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a928495140935d9d6ce0a100550473140">np</link>,&#32;f-&gt;<link linkend="_struct_proto_1aea0f5dcb02517aa08aa2ffa58c396260">sizep</link>,&#32;<link linkend="_struct_proto">Proto</link>&#32;*,&#32;<link linkend="_lopcodes_8h_1aebbf650de6e9cbec539bfabcb9ae50c6">MAXARG_Bx</link>,&#32;<emphasis role="stringliteral">&quot;functions&quot;</emphasis>);
00696 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(oldsize&#32;&lt;&#32;f-&gt;sizep)
00697 &#32;&#32;&#32;&#32;&#32;&#32;f-&gt;<link linkend="_struct_proto_1ab7af98f98f5cf674f6be5e3fc855af43">p</link>[oldsize++]&#32;=&#32;NULL;
00698 &#32;&#32;}
00699 &#32;&#32;f-&gt;<link linkend="_struct_proto_1ab7af98f98f5cf674f6be5e3fc855af43">p</link>[fs-&gt;<link linkend="_struct_func_state_1a928495140935d9d6ce0a100550473140">np</link>++]&#32;=&#32;clp&#32;=&#32;<link linkend="_lfunc_8c_1a4ffd9d8ef515a7f785d007de7ceb9e4f">luaF_newproto</link>(L);
00700 &#32;&#32;<link linkend="_lgc_8h_1a90ac4f3c7085a418025edcc7215e8983">luaC_objbarrier</link>(L,&#32;f,&#32;clp);
00701 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;clp;
00702 }
00703 
00704 
00705 <emphasis role="comment">/*</emphasis>
00706 <emphasis role="comment">**&#32;codes&#32;instruction&#32;to&#32;create&#32;new&#32;closure&#32;in&#32;parent&#32;function.</emphasis>
00707 <emphasis role="comment">**&#32;The&#32;OP_CLOSURE&#32;instruction&#32;uses&#32;the&#32;last&#32;available&#32;register,</emphasis>
00708 <emphasis role="comment">**&#32;so&#32;that,&#32;if&#32;it&#32;invokes&#32;the&#32;GC,&#32;the&#32;GC&#32;knows&#32;which&#32;registers</emphasis>
00709 <emphasis role="comment">**&#32;are&#32;in&#32;use&#32;at&#32;that&#32;time.</emphasis>
00710 <emphasis role="comment"></emphasis>
00711 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00712"/><link linkend="_lparser_8c_1a3f0a5b9e975f44a4e7291445786434d8">00712</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a3f0a5b9e975f44a4e7291445786434d8">codeclosure</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
00713 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1a5fa27b262907fd2c729f9bab5f6c87d8">prev</link>;
00714 &#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(v,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>,&#32;<link linkend="_lcode_8c_1a3fb5006a069fadbcb2ec7dde4740ad10">luaK_codeABx</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a407a76cd8c503b0f4dc14603687a77a2">OP_CLOSURE</link>,&#32;0,&#32;fs-&gt;<link linkend="_struct_func_state_1a928495140935d9d6ce0a100550473140">np</link>&#32;-&#32;1));
00715 &#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;v);&#32;&#32;<emphasis role="comment">/*&#32;fix&#32;it&#32;at&#32;the&#32;last&#32;register&#32;*/</emphasis>
00716 }
00717 
00718 
<anchor xml:id="_lparser_8c_source_1l00719"/><link linkend="_lparser_8c_1ac89cbbdfd75804eae46bce05f8381915">00719</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1ac89cbbdfd75804eae46bce05f8381915">open_func</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;*bl)&#32;{
00720 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*f&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;
00721 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a5fa27b262907fd2c729f9bab5f6c87d8">prev</link>&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;&#32;&#32;<emphasis role="comment">/*&#32;linked&#32;list&#32;of&#32;funcstates&#32;*/</emphasis>
00722 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>&#32;=&#32;ls;
00723 &#32;&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>&#32;=&#32;fs;
00724 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;=&#32;0;
00725 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a36e09444501db4b4ae62a42d12052902">previousline</link>&#32;=&#32;f-&gt;<link linkend="_struct_proto_1a4dfda1a3839aa77fb8fc7626075151dd">linedefined</link>;
00726 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1ab3a3c240b79a1ec22f1797373c3c31b7">iwthabs</link>&#32;=&#32;0;
00727 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a7c8e84a7a4eea3098db15621b30a6d41">lasttarget</link>&#32;=&#32;0;
00728 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;=&#32;0;
00729 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a7ce3fd35f4658d95e117a56ea98d5cba">nk</link>&#32;=&#32;0;
00730 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a62f82c703d737f9c15f2d95338c822e7">nabslineinfo</link>&#32;=&#32;0;
00731 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a928495140935d9d6ce0a100550473140">np</link>&#32;=&#32;0;
00732 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a4709d4e7654d3620c605e6be84a96c3b">nups</link>&#32;=&#32;0;
00733 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a98a2ba4884547f7e194926404e8c33b2">ndebugvars</link>&#32;=&#32;0;
00734 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;=&#32;0;
00735 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a1fa4457f711fca24bdfdcc9fc9abb308">needclose</link>&#32;=&#32;0;
00736 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a0a14fa0565e6102066866045271dce45">firstlocal</link>&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
00737 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a92037659e880f2ed9767df1686eaa5bb">firstlabel</link>&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1afcc3242d2f2c467f33dbeac521a9e861">label</link>.<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>;
00738 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>&#32;=&#32;NULL;
00739 &#32;&#32;f-&gt;<link linkend="_struct_proto_1a47b5f25d6c53f3892e43702659c6de69">source</link>&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a47b5f25d6c53f3892e43702659c6de69">source</link>;
00740 &#32;&#32;<link linkend="_lgc_8h_1a90ac4f3c7085a418025edcc7215e8983">luaC_objbarrier</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;f,&#32;f-&gt;<link linkend="_struct_proto_1a47b5f25d6c53f3892e43702659c6de69">source</link>);
00741 &#32;&#32;f-&gt;<link linkend="_struct_proto_1ad11e004e7f14af7e281b6da69d08ad7a">maxstacksize</link>&#32;=&#32;2;&#32;&#32;<emphasis role="comment">/*&#32;registers&#32;0/1&#32;are&#32;always&#32;valid&#32;*/</emphasis>
00742 &#32;&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>(fs,&#32;bl,&#32;0);
00743 }
00744 
00745 
<anchor xml:id="_lparser_8c_source_1l00746"/><link linkend="_lparser_8c_1a46bd6da1ec8052eeaf6fd524199ca72a">00746</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a46bd6da1ec8052eeaf6fd524199ca72a">close_func</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
00747 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>;
00748 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00749 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*f&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;
00750 &#32;&#32;<link linkend="_lcode_8c_1af04e0d7f5a543cbdc60d5ad981333bcf">luaK_ret</link>(fs,&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(fs),&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;final&#32;return&#32;*/</emphasis>
00751 &#32;&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>(fs);
00752 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>&#32;==&#32;NULL);
00753 &#32;&#32;<link linkend="_lcode_8c_1aae9456e48d7a5b94358d310b80b1589f">luaK_finish</link>(fs);
00754 &#32;&#32;<link linkend="_lmem_8h_1ab90797c53a311d30154c486b2b8561d5">luaM_shrinkvector</link>(L,&#32;f-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>,&#32;f-&gt;<link linkend="_struct_proto_1aa3cefdf204c272e3a1a3aa8bc12f4e3e">sizecode</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>,&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>);
00755 &#32;&#32;<link linkend="_lmem_8h_1ab90797c53a311d30154c486b2b8561d5">luaM_shrinkvector</link>(L,&#32;f-&gt;<link linkend="_struct_proto_1a0d5af822069e8cdb2bd7f17f3cdcf575">lineinfo</link>,&#32;f-&gt;<link linkend="_struct_proto_1a53f346647cd2060380dad39c9d5caebe">sizelineinfo</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>,&#32;<link linkend="_llimits_8h_1aab58a246c9e0a85c4c2ed0fd8d6724bb">ls_byte</link>);
00756 &#32;&#32;<link linkend="_lmem_8h_1ab90797c53a311d30154c486b2b8561d5">luaM_shrinkvector</link>(L,&#32;f-&gt;<link linkend="_struct_proto_1a731ed18a38cc12a903582b927104c883">abslineinfo</link>,&#32;f-&gt;<link linkend="_struct_proto_1ab443243fa7dd09b9c08117626c3f8a61">sizeabslineinfo</link>,
00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a62f82c703d737f9c15f2d95338c822e7">nabslineinfo</link>,&#32;<link linkend="_struct_abs_line_info">AbsLineInfo</link>);
00758 &#32;&#32;<link linkend="_lmem_8h_1ab90797c53a311d30154c486b2b8561d5">luaM_shrinkvector</link>(L,&#32;f-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>,&#32;f-&gt;<link linkend="_struct_proto_1a207b8b69ed4d393dd3c20925febd29e4">sizek</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a7ce3fd35f4658d95e117a56ea98d5cba">nk</link>,&#32;<link linkend="_struct_t_value">TValue</link>);
00759 &#32;&#32;<link linkend="_lmem_8h_1ab90797c53a311d30154c486b2b8561d5">luaM_shrinkvector</link>(L,&#32;f-&gt;<link linkend="_struct_proto_1ab7af98f98f5cf674f6be5e3fc855af43">p</link>,&#32;f-&gt;<link linkend="_struct_proto_1aea0f5dcb02517aa08aa2ffa58c396260">sizep</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a928495140935d9d6ce0a100550473140">np</link>,&#32;<link linkend="_struct_proto">Proto</link>&#32;*);
00760 &#32;&#32;<link linkend="_lmem_8h_1ab90797c53a311d30154c486b2b8561d5">luaM_shrinkvector</link>(L,&#32;f-&gt;<link linkend="_struct_proto_1a7a727780b57a02cd42e7ef902f6e7f90">locvars</link>,&#32;f-&gt;<link linkend="_struct_proto_1af9147ae18b522811714aeb19036f639d">sizelocvars</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a98a2ba4884547f7e194926404e8c33b2">ndebugvars</link>,&#32;<link linkend="_struct_loc_var">LocVar</link>);
00761 &#32;&#32;<link linkend="_lmem_8h_1ab90797c53a311d30154c486b2b8561d5">luaM_shrinkvector</link>(L,&#32;f-&gt;<link linkend="_struct_proto_1ac3b891662880254a7e0a3dc0afa86254">upvalues</link>,&#32;f-&gt;<link linkend="_struct_proto_1a2e13a98343ef0d1233bb3e62ae519c5f">sizeupvalues</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a4709d4e7654d3620c605e6be84a96c3b">nups</link>,&#32;<link linkend="_struct_upvaldesc">Upvaldesc</link>);
00762 &#32;&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a5fa27b262907fd2c729f9bab5f6c87d8">prev</link>;
00763 &#32;&#32;<link linkend="_lgc_8h_1ad013db5004ccc5fbe8a6450caa1f1ad9">luaC_checkGC</link>(L);
00764 }
00765 
00766 
00767 
00768 <emphasis role="comment">/*============================================================*/</emphasis>
00769 <emphasis role="comment">/*&#32;GRAMMAR&#32;RULES&#32;*/</emphasis>
00770 <emphasis role="comment">/*============================================================*/</emphasis>
00771 
00772 
00773 <emphasis role="comment">/*</emphasis>
00774 <emphasis role="comment">**&#32;check&#32;whether&#32;current&#32;token&#32;is&#32;in&#32;the&#32;follow&#32;set&#32;of&#32;a&#32;block.</emphasis>
00775 <emphasis role="comment">**&#32;&apos;until&apos;&#32;closes&#32;syntactical&#32;blocks,&#32;but&#32;do&#32;not&#32;close&#32;scope,</emphasis>
00776 <emphasis role="comment">**&#32;so&#32;it&#32;is&#32;handled&#32;in&#32;separate.</emphasis>
00777 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00778"/><link linkend="_lparser_8c_1a5be23689d7ea5fd2561c345df03fbf7c">00778</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a5be23689d7ea5fd2561c345df03fbf7c">block_follow</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;withuntil)&#32;{
00779 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>)&#32;{
00780 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a3f50a3a010dc1ba1401d460900575b47">TK_ELSE</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04af85f1d50bab033c17f7341b5e71f4d60">TK_ELSEIF</link>:
00781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a541ef482a7317bd2a54032f165d90db7">TK_END</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a9fcd34e2e50a0afb82f0dae65836187b">TK_EOS</link>:
00782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00783 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04ab7232de731ef17fbc644b370c783719c">TK_UNTIL</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;withuntil;
00784 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00785 &#32;&#32;}
00786 }
00787 
00788 
<anchor xml:id="_lparser_8c_source_1l00789"/><link linkend="_lparser_8c_1aff3c4f1970c0f3c50f37a8187a2414e3">00789</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1aff3c4f1970c0f3c50f37a8187a2414e3">statlist</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
00790 &#32;&#32;<emphasis role="comment">/*&#32;statlist&#32;-&gt;&#32;{&#32;stat&#32;[&apos;;&apos;]&#32;}&#32;*/</emphasis>
00791 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_lparser_8c_1a5be23689d7ea5fd2561c345df03fbf7c">block_follow</link>(ls,&#32;1))&#32;{
00792 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04aba4fafc284c6c6aa99340efdba0b76e8">TK_RETURN</link>)&#32;{
00793 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ac29df3687aea9407dcfec478092fce4c">statement</link>(ls);
00794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;&apos;return&apos;&#32;must&#32;be&#32;last&#32;statement&#32;*/</emphasis>
00795 &#32;&#32;&#32;&#32;}
00796 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ac29df3687aea9407dcfec478092fce4c">statement</link>(ls);
00797 &#32;&#32;}
00798 }
00799 
00800 
<anchor xml:id="_lparser_8c_source_1l00801"/><link linkend="_lparser_8c_1a749eb16d6a8c1bb6e94d4c0392e57374">00801</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a749eb16d6a8c1bb6e94d4c0392e57374">fieldsel</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
00802 &#32;&#32;<emphasis role="comment">/*&#32;fieldsel&#32;-&gt;&#32;[&apos;.&apos;&#32;|&#32;&apos;:&apos;]&#32;NAME&#32;*/</emphasis>
00803 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00804 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;key;
00805 &#32;&#32;<link linkend="_lcode_8c_1ad975c434bb45ed1baff91522069c4f11">luaK_exp2anyregup</link>(fs,&#32;v);
00806 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;the&#32;dot&#32;or&#32;colon&#32;*/</emphasis>
00807 &#32;&#32;<link linkend="_lparser_8c_1a7da9556e730c9865b3de6c6440640266">codename</link>(ls,&#32;&amp;key);
00808 &#32;&#32;<link linkend="_lcode_8c_1af9e8e4c1ab85deb3fe8fdbc39d25c6d9">luaK_indexed</link>(fs,&#32;v,&#32;&amp;key);
00809 }
00810 
00811 
<anchor xml:id="_lparser_8c_source_1l00812"/><link linkend="_lparser_8c_1ac3e6a3b89f1a54a2ff4f3570831faf35">00812</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1ac3e6a3b89f1a54a2ff4f3570831faf35">yindex</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
00813 &#32;&#32;<emphasis role="comment">/*&#32;index&#32;-&gt;&#32;&apos;[&apos;&#32;expr&#32;&apos;]&apos;&#32;*/</emphasis>
00814 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;the&#32;&apos;[&apos;&#32;*/</emphasis>
00815 &#32;&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>(ls,&#32;v);
00816 &#32;&#32;<link linkend="_lcode_8c_1a214015f257d752c11c44ba82460a603a">luaK_exp2val</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;v);
00817 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>);
00818 }
00819 
00820 
00821 <emphasis role="comment">/*</emphasis>
00822 <emphasis role="comment">**&#32;{======================================================================</emphasis>
00823 <emphasis role="comment">**&#32;Rules&#32;for&#32;Constructors</emphasis>
00824 <emphasis role="comment">**&#32;=======================================================================</emphasis>
00825 <emphasis role="comment">*/</emphasis>
00826 
00827 
<anchor xml:id="_lparser_8c_source_1l00828"/><link linkend="_struct_cons_control">00828</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_cons_control">ConsControl</link>&#32;{
<anchor xml:id="_lparser_8c_source_1l00829"/><link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">00829</link> &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>;&#32;&#32;<emphasis role="comment">/*&#32;last&#32;list&#32;item&#32;read&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00830"/><link linkend="_struct_cons_control_1aa1dc4c878594de78a85caf0f8a0f73c7">00830</link> &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*<link linkend="_struct_cons_control_1aa1dc4c878594de78a85caf0f8a0f73c7">t</link>;&#32;&#32;<emphasis role="comment">/*&#32;table&#32;descriptor&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00831"/><link linkend="_struct_cons_control_1af6f25363ed71c880e3c007eb6cb10455">00831</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_cons_control_1af6f25363ed71c880e3c007eb6cb10455">nh</link>;&#32;&#32;<emphasis role="comment">/*&#32;total&#32;number&#32;of&#32;&apos;record&apos;&#32;elements&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00832"/><link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">00832</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">na</link>;&#32;&#32;<emphasis role="comment">/*&#32;number&#32;of&#32;array&#32;elements&#32;already&#32;stored&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00833"/><link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">00833</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>;&#32;&#32;<emphasis role="comment">/*&#32;number&#32;of&#32;array&#32;elements&#32;pending&#32;to&#32;be&#32;stored&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l00834"/><link linkend="_lparser_8c_1aac0d82e2c5c45771c53cd25cb8b48972">00834</link> }&#32;<link linkend="_lparser_8c_1aac0d82e2c5c45771c53cd25cb8b48972">ConsControl</link>;
00835 
00836 
<anchor xml:id="_lparser_8c_source_1l00837"/><link linkend="_lparser_8c_1a84d7688b0c57f012eaf7f84c0062f29e">00837</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a84d7688b0c57f012eaf7f84c0062f29e">recfield</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_cons_control">ConsControl</link>&#32;*cc)&#32;{
00838 &#32;&#32;<emphasis role="comment">/*&#32;recfield&#32;-&gt;&#32;(NAME&#32;|&#32;&apos;[&apos;exp&apos;]&apos;)&#32;=&#32;exp&#32;*/</emphasis>
00839 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00840 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;reg&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>;
00841 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;tab,&#32;key,&#32;val;
00842 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a84e5aed35515b2881005d88dccaf0c30">TK_NAME</link>)&#32;{
00843 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1adcc7a63edd0b578c2e7980371ff7f686">checklimit</link>(fs,&#32;cc-&gt;<link linkend="_struct_cons_control_1af6f25363ed71c880e3c007eb6cb10455">nh</link>,&#32;<link linkend="_llimits_8h_1aaa1ac5caef84256eaeb39594e58e096f">MAX_INT</link>,&#32;<emphasis role="stringliteral">&quot;items&#32;in&#32;a&#32;constructor&quot;</emphasis>);
00844 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a7da9556e730c9865b3de6c6440640266">codename</link>(ls,&#32;&amp;key);
00845 &#32;&#32;}
00846 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;ls-&gt;t.token&#32;==&#32;&apos;[&apos;&#32;*/</emphasis>
00847 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ac3e6a3b89f1a54a2ff4f3570831faf35">yindex</link>(ls,&#32;&amp;key);
00848 &#32;&#32;cc-&gt;<link linkend="_struct_cons_control_1af6f25363ed71c880e3c007eb6cb10455">nh</link>++;
00849 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>);
00850 &#32;&#32;tab&#32;=&#32;*cc-&gt;<link linkend="_struct_cons_control_1aa1dc4c878594de78a85caf0f8a0f73c7">t</link>;
00851 &#32;&#32;<link linkend="_lcode_8c_1af9e8e4c1ab85deb3fe8fdbc39d25c6d9">luaK_indexed</link>(fs,&#32;&amp;tab,&#32;&amp;key);
00852 &#32;&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>(ls,&#32;&amp;val);
00853 &#32;&#32;<link linkend="_lcode_8c_1a31c85ce631d5ee0a691cb58a1bd360be">luaK_storevar</link>(fs,&#32;&amp;tab,&#32;&amp;val);
00854 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;=&#32;reg;&#32;&#32;<emphasis role="comment">/*&#32;free&#32;registers&#32;*/</emphasis>
00855 }
00856 
00857 
<anchor xml:id="_lparser_8c_source_1l00858"/><link linkend="_lparser_8c_1ab2704183a18ae12a124af76b08b2dccf">00858</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1ab2704183a18ae12a124af76b08b2dccf">closelistfield</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_cons_control">ConsControl</link>&#32;*cc)&#32;{
00859 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cc-&gt;<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>)&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;there&#32;is&#32;no&#32;list&#32;item&#32;*/</emphasis>
00860 &#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;&amp;cc-&gt;<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
00861 &#32;&#32;cc-&gt;<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>;
00862 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cc-&gt;<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>&#32;==&#32;<link linkend="_lopcodes_8h_1a0888e2bcb54f6e603f09208763aadfe9">LFIELDS_PER_FLUSH</link>)&#32;{
00863 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1adf5e140580f1f4ca545b7cfd471e3166">luaK_setlist</link>(fs,&#32;cc-&gt;<link linkend="_struct_cons_control_1aa1dc4c878594de78a85caf0f8a0f73c7">t</link>-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;cc-&gt;<link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">na</link>,&#32;cc-&gt;<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>);&#32;&#32;<emphasis role="comment">/*&#32;flush&#32;*/</emphasis>
00864 &#32;&#32;&#32;&#32;cc-&gt;<link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">na</link>&#32;+=&#32;cc-&gt;<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>;
00865 &#32;&#32;&#32;&#32;cc-&gt;<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;more&#32;items&#32;pending&#32;*/</emphasis>
00866 &#32;&#32;}
00867 }
00868 
00869 
<anchor xml:id="_lparser_8c_source_1l00870"/><link linkend="_lparser_8c_1aa4a987d1a5d0a2f3e72a02570322e923">00870</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1aa4a987d1a5d0a2f3e72a02570322e923">lastlistfield</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_cons_control">ConsControl</link>&#32;*cc)&#32;{
00871 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cc-&gt;<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>;
00872 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a38d6bad3bcde3d124ca880d6a9d82ba6">hasmultret</link>(cc-&gt;<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>))&#32;{
00873 &#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a525c933202c545dff0b84a9d5325ff49">luaK_setmultret</link>(fs,&#32;&amp;cc-&gt;<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
00874 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1adf5e140580f1f4ca545b7cfd471e3166">luaK_setlist</link>(fs,&#32;cc-&gt;<link linkend="_struct_cons_control_1aa1dc4c878594de78a85caf0f8a0f73c7">t</link>-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;cc-&gt;<link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">na</link>,&#32;<link linkend="_lua_8h_1ace3545adc11664c2f2b152fbe8b6283c">LUA_MULTRET</link>);
00875 &#32;&#32;&#32;&#32;cc-&gt;<link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">na</link>--;&#32;&#32;<emphasis role="comment">/*&#32;do&#32;not&#32;count&#32;last&#32;expression&#32;(unknown&#32;number&#32;of&#32;elements)&#32;*/</emphasis>
00876 &#32;&#32;}
00877 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cc-&gt;<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;!=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>)
00879 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;&amp;cc-&gt;<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
00880 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1adf5e140580f1f4ca545b7cfd471e3166">luaK_setlist</link>(fs,&#32;cc-&gt;<link linkend="_struct_cons_control_1aa1dc4c878594de78a85caf0f8a0f73c7">t</link>-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;cc-&gt;<link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">na</link>,&#32;cc-&gt;<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>);
00881 &#32;&#32;}
00882 &#32;&#32;cc-&gt;<link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">na</link>&#32;+=&#32;cc-&gt;<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>;
00883 }
00884 
00885 
<anchor xml:id="_lparser_8c_source_1l00886"/><link linkend="_lparser_8c_1a4ad1cddd376a59ba97755723bdcce8de">00886</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a4ad1cddd376a59ba97755723bdcce8de">listfield</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_cons_control">ConsControl</link>&#32;*cc)&#32;{
00887 &#32;&#32;<emphasis role="comment">/*&#32;listfield&#32;-&gt;&#32;exp&#32;*/</emphasis>
00888 &#32;&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>(ls,&#32;&amp;cc-&gt;<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
00889 &#32;&#32;cc-&gt;<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>++;
00890 }
00891 
00892 
<anchor xml:id="_lparser_8c_source_1l00893"/><link linkend="_lparser_8c_1a3a1a4b5a661e480a87ce14027a01f177">00893</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a3a1a4b5a661e480a87ce14027a01f177">field</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_cons_control">ConsControl</link>&#32;*cc)&#32;{
00894 &#32;&#32;<emphasis role="comment">/*&#32;field&#32;-&gt;&#32;listfield&#32;|&#32;recfield&#32;*/</emphasis>
00895 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>)&#32;{
00896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a84e5aed35515b2881005d88dccaf0c30">TK_NAME</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;may&#32;be&#32;&apos;listfield&apos;&#32;or&#32;&apos;recfield&apos;&#32;*/</emphasis>
00897 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llex_8c_1af44c274f4e9a24ac9bc41ff31bac5ffb">luaX_lookahead</link>(ls)&#32;!=&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>)&#32;&#32;<emphasis role="comment">/*&#32;expression?&#32;*/</emphasis>
00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a4ad1cddd376a59ba97755723bdcce8de">listfield</link>(ls,&#32;cc);
00899 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a84d7688b0c57f012eaf7f84c0062f29e">recfield</link>(ls,&#32;cc);
00901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00902 &#32;&#32;&#32;&#32;}
00903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:&#32;{
00904 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a84d7688b0c57f012eaf7f84c0062f29e">recfield</link>(ls,&#32;cc);
00905 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00906 &#32;&#32;&#32;&#32;}
00907 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{
00908 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a4ad1cddd376a59ba97755723bdcce8de">listfield</link>(ls,&#32;cc);
00909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00910 &#32;&#32;&#32;&#32;}
00911 &#32;&#32;}
00912 }
00913 
00914 
<anchor xml:id="_lparser_8c_source_1l00915"/><link linkend="_lparser_8c_1afd4901e9e6b1ba046efc1a5932cd664c">00915</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1afd4901e9e6b1ba046efc1a5932cd664c">constructor</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*t)&#32;{
00916 &#32;&#32;<emphasis role="comment">/*&#32;constructor&#32;-&gt;&#32;&apos;{&apos;&#32;[&#32;field&#32;{&#32;sep&#32;field&#32;}&#32;[sep]&#32;]&#32;&apos;}&apos;</emphasis>
00917 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;sep&#32;-&gt;&#32;&apos;,&apos;&#32;|&#32;&apos;;&apos;&#32;*/</emphasis>
00918 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00919 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
00920 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc&#32;=&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7af4ae9eb9a3c88596112a1d99d0c66280">OP_NEWTABLE</link>,&#32;0,&#32;0,&#32;0);
00921 &#32;&#32;<link linkend="_struct_cons_control">ConsControl</link>&#32;cc;
00922 &#32;&#32;<link linkend="_lcode_8c_1a7250af995defa0d720b40e35695775da">luaK_code</link>(fs,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;space&#32;for&#32;extra&#32;arg.&#32;*/</emphasis>
00923 &#32;&#32;cc.<link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">na</link>&#32;=&#32;cc.<link linkend="_struct_cons_control_1af6f25363ed71c880e3c007eb6cb10455">nh</link>&#32;=&#32;cc.<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>&#32;=&#32;0;
00924 &#32;&#32;cc.<link linkend="_struct_cons_control_1aa1dc4c878594de78a85caf0f8a0f73c7">t</link>&#32;=&#32;t;
00925 &#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(t,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>);&#32;&#32;<emphasis role="comment">/*&#32;table&#32;will&#32;be&#32;at&#32;stack&#32;top&#32;*/</emphasis>
00926 &#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;1);
00927 &#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(&amp;cc.<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;no&#32;value&#32;(yet)&#32;*/</emphasis>
00928 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>);
00929 &#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
00930 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(cc.<link linkend="_struct_cons_control_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>&#32;||&#32;cc.<link linkend="_struct_cons_control_1ac868c20eb8d6ad470703beabf835cb53">tostore</link>&#32;&gt;&#32;0);
00931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
00932 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ab2704183a18ae12a124af76b08b2dccf">closelistfield</link>(fs,&#32;&amp;cc);
00933 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a3a1a4b5a661e480a87ce14027a01f177">field</link>(ls,&#32;&amp;cc);
00934 &#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>)&#32;||&#32;<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>));
00935 &#32;&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>(ls,&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>,&#32;line);
00936 &#32;&#32;<link linkend="_lparser_8c_1aa4a987d1a5d0a2f3e72a02570322e923">lastlistfield</link>(fs,&#32;&amp;cc);
00937 &#32;&#32;<link linkend="_lcode_8c_1aa59fc2dadbee774d0cdf1196d047d7e1">luaK_settablesize</link>(fs,&#32;pc,&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;cc.<link linkend="_struct_cons_control_1ab16b6b5d5db4df1b0cb95f5b468065e2">na</link>,&#32;cc.<link linkend="_struct_cons_control_1af6f25363ed71c880e3c007eb6cb10455">nh</link>);
00938 }
00939 
00940 <emphasis role="comment">/*&#32;}======================================================================&#32;*/</emphasis>
00941 
00942 
<anchor xml:id="_lparser_8c_source_1l00943"/><link linkend="_lparser_8c_1a71bb47764e4103bbd98a4285ab97ca5d">00943</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a71bb47764e4103bbd98a4285ab97ca5d">setvararg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nparams)&#32;{
00944 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a75232df840e02cfa8134903745579657">is_vararg</link>&#32;=&#32;1;
00945 &#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a0ac7fd650d101088cfc6beed3757ba44">OP_VARARGPREP</link>,&#32;nparams,&#32;0,&#32;0);
00946 }
00947 
00948 
<anchor xml:id="_lparser_8c_source_1l00949"/><link linkend="_lparser_8c_1adc6c3bb5079c197371a6ddcdbc574de6">00949</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1adc6c3bb5079c197371a6ddcdbc574de6">parlist</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
00950 &#32;&#32;<emphasis role="comment">/*&#32;parlist&#32;-&gt;&#32;[&#32;param&#32;{&#32;&apos;,&apos;&#32;param&#32;}&#32;]&#32;*/</emphasis>
00951 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
00952 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*f&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;
00953 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nparams&#32;=&#32;0;
00954 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;isvararg&#32;=&#32;0;
00955 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;!=&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;is&#32;&apos;parlist&apos;&#32;not&#32;empty?&#32;*/</emphasis>
00956 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
00957 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>)&#32;{
00958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a84e5aed35515b2881005d88dccaf0c30">TK_NAME</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;param&#32;-&gt;&#32;NAME&#32;*/</emphasis>
00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a89f5732cbee45d78cfec9dbd1a207bb7">new_localvar</link>(ls,&#32;<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls));
00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nparams++;
00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a500efed658259c56ef30938c20c3b6c4">TK_DOTS</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;param&#32;-&gt;&#32;&apos;...&apos;&#32;*/</emphasis>
00964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);
00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isvararg&#32;=&#32;1;
00966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(ls,&#32;<emphasis role="stringliteral">&quot;&lt;name&gt;&#32;or&#32;&apos;...&apos;&#32;expected&quot;</emphasis>);
00969 &#32;&#32;&#32;&#32;&#32;&#32;}
00970 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!isvararg&#32;&amp;&amp;&#32;<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>));
00971 &#32;&#32;}
00972 &#32;&#32;<link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">adjustlocalvars</link>(ls,&#32;nparams);
00973 &#32;&#32;f-&gt;<link linkend="_struct_proto_1a2c5c3bfc47c6c4b7b9f4eef47d7167e9">numparams</link>&#32;=&#32;<link linkend="_llimits_8h_1a596f5b6e992f53a5a4e5732083448dd4">cast_byte</link>(fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>);
00974 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isvararg)
00975 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a71bb47764e4103bbd98a4285ab97ca5d">setvararg</link>(fs,&#32;f-&gt;<link linkend="_struct_proto_1a2c5c3bfc47c6c4b7b9f4eef47d7167e9">numparams</link>);&#32;&#32;<emphasis role="comment">/*&#32;declared&#32;vararg&#32;*/</emphasis>
00976 &#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>);&#32;&#32;<emphasis role="comment">/*&#32;reserve&#32;registers&#32;for&#32;parameters&#32;*/</emphasis>
00977 }
00978 
00979 
<anchor xml:id="_lparser_8c_source_1l00980"/><link linkend="_lparser_8c_1aa6a712055fa7e1b41488c71be4f55303">00980</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1aa6a712055fa7e1b41488c71be4f55303">body</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ismethod,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
00981 &#32;&#32;<emphasis role="comment">/*&#32;body&#32;-&gt;&#32;&#32;&apos;(&apos;&#32;parlist&#32;&apos;)&apos;&#32;block&#32;END&#32;*/</emphasis>
00982 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;new_fs;
00983 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;bl;
00984 &#32;&#32;new_fs.<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>&#32;=&#32;<link linkend="_lparser_8c_1a57dad991ad72ca00978d43967277d9db">addprototype</link>(ls);
00985 &#32;&#32;new_fs.<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a4dfda1a3839aa77fb8fc7626075151dd">linedefined</link>&#32;=&#32;line;
00986 &#32;&#32;<link linkend="_lparser_8c_1ac89cbbdfd75804eae46bce05f8381915">open_func</link>(ls,&#32;&amp;new_fs,&#32;&amp;bl);
00987 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>);
00988 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ismethod)&#32;{
00989 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a031fd03dec54eb67a3cfac513b8575bb">new_localvarliteral</link>(ls,&#32;<emphasis role="stringliteral">&quot;self&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;create&#32;&apos;self&apos;&#32;parameter&#32;*/</emphasis>
00990 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">adjustlocalvars</link>(ls,&#32;1);
00991 &#32;&#32;}
00992 &#32;&#32;<link linkend="_lparser_8c_1adc6c3bb5079c197371a6ddcdbc574de6">parlist</link>(ls);
00993 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>);
00994 &#32;&#32;<link linkend="_lparser_8c_1aff3c4f1970c0f3c50f37a8187a2414e3">statlist</link>(ls);
00995 &#32;&#32;new_fs.<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a0129a289db231fbe2c6c3b3d6062979e">lastlinedefined</link>&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
00996 &#32;&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a541ef482a7317bd2a54032f165d90db7">TK_END</link>,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04aafc8fa070d8d0bb9569b875cbc6b1a8c">TK_FUNCTION</link>,&#32;line);
00997 &#32;&#32;<link linkend="_lparser_8c_1a3f0a5b9e975f44a4e7291445786434d8">codeclosure</link>(ls,&#32;e);
00998 &#32;&#32;<link linkend="_lparser_8c_1a46bd6da1ec8052eeaf6fd524199ca72a">close_func</link>(ls);
00999 }
01000 
01001 
<anchor xml:id="_lparser_8c_source_1l01002"/><link linkend="_lparser_8c_1a25966bcc2d6cf47dbb9e0251fb26d661">01002</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a25966bcc2d6cf47dbb9e0251fb26d661">explist</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
01003 &#32;&#32;<emphasis role="comment">/*&#32;explist&#32;-&gt;&#32;expr&#32;{&#32;&apos;,&apos;&#32;expr&#32;}&#32;*/</emphasis>
01004 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;at&#32;least&#32;one&#32;expression&#32;*/</emphasis>
01005 &#32;&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>(ls,&#32;v);
01006 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>))&#32;{
01007 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;v);
01008 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>(ls,&#32;v);
01009 &#32;&#32;&#32;&#32;n++;
01010 &#32;&#32;}
01011 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
01012 }
01013 
01014 
<anchor xml:id="_lparser_8c_source_1l01015"/><link linkend="_lparser_8c_1a5050696e535c2da862810fc9910b6afc">01015</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a5050696e535c2da862810fc9910b6afc">funcargs</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*f,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01016 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01017 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;args;
01018 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;base,&#32;nparams;
01019 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>)&#32;{
01020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;funcargs&#32;-&gt;&#32;&apos;(&apos;&#32;[&#32;explist&#32;]&#32;&apos;)&apos;&#32;*/</emphasis>
01021 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);
01022 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>)&#32;&#32;<emphasis role="comment">/*&#32;arg&#32;list&#32;is&#32;empty?&#32;*/</emphasis>
01023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>;
01024 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a25966bcc2d6cf47dbb9e0251fb26d661">explist</link>(ls,&#32;&amp;args);
01026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a38d6bad3bcde3d124ca880d6a9d82ba6">hasmultret</link>(args.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>))
01027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a525c933202c545dff0b84a9d5325ff49">luaK_setmultret</link>(fs,&#32;&amp;args);
01028 &#32;&#32;&#32;&#32;&#32;&#32;}
01029 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>(ls,&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>,&#32;line);
01030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01031 &#32;&#32;&#32;&#32;}
01032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;funcargs&#32;-&gt;&#32;constructor&#32;*/</emphasis>
01033 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1afd4901e9e6b1ba046efc1a5932cd664c">constructor</link>(ls,&#32;&amp;args);
01034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01035 &#32;&#32;&#32;&#32;}
01036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a2f748d118b4a20e2b1dc12538ccd9876">TK_STRING</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;funcargs&#32;-&gt;&#32;STRING&#32;*/</emphasis>
01037 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a08fd72f32434a2bab9cd08298085e9f9">codestring</link>(&amp;args,&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a54762edd38b11a9194e6c7cee3c3fcdd">seminfo</link>.<link linkend="_union_sem_info_1ae879ced0cb88fb344f2b1b8ac7786af8">ts</link>);
01038 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;must&#32;use&#32;&apos;seminfo&apos;&#32;before&#32;&apos;next&apos;&#32;*/</emphasis>
01039 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01040 &#32;&#32;&#32;&#32;}
01041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{
01042 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(ls,&#32;<emphasis role="stringliteral">&quot;function&#32;arguments&#32;expected&quot;</emphasis>);
01043 &#32;&#32;&#32;&#32;}
01044 &#32;&#32;}
01045 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(f-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>);
01046 &#32;&#32;base&#32;=&#32;f-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;base&#32;register&#32;for&#32;call&#32;*/</emphasis>
01047 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a38d6bad3bcde3d124ca880d6a9d82ba6">hasmultret</link>(args.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>))
01048 &#32;&#32;&#32;&#32;nparams&#32;=&#32;<link linkend="_lua_8h_1ace3545adc11664c2f2b152fbe8b6283c">LUA_MULTRET</link>;&#32;&#32;<emphasis role="comment">/*&#32;open&#32;call&#32;*/</emphasis>
01049 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(args.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;!=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>)
01051 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;&amp;args);&#32;&#32;<emphasis role="comment">/*&#32;close&#32;last&#32;argument&#32;*/</emphasis>
01052 &#32;&#32;&#32;&#32;nparams&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;-&#32;(base+1);
01053 &#32;&#32;}
01054 &#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(f,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae61a8c04cfeabd756694cd13774e47b7">VCALL</link>,&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a098bbeea13096667b102f7fd90cbe38f">OP_CALL</link>,&#32;base,&#32;nparams+1,&#32;2));
01055 &#32;&#32;<link linkend="_lcode_8c_1ab17c57ffa1dc5c51f0d67a4ae8a5f073">luaK_fixline</link>(fs,&#32;line);
01056 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;=&#32;base+1;&#32;&#32;<emphasis role="comment">/*&#32;call&#32;remove&#32;function&#32;and&#32;arguments&#32;and&#32;leaves</emphasis>
01057 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(unless&#32;changed)&#32;one&#32;result&#32;*/</emphasis>
01058 }
01059 
01060 
01061 
01062 
01063 <emphasis role="comment">/*</emphasis>
01064 <emphasis role="comment">**&#32;{======================================================================</emphasis>
01065 <emphasis role="comment">**&#32;Expression&#32;parsing</emphasis>
01066 <emphasis role="comment">**&#32;=======================================================================</emphasis>
01067 <emphasis role="comment">*/</emphasis>
01068 
01069 
<anchor xml:id="_lparser_8c_source_1l01070"/><link linkend="_lparser_8c_1abb6d6e594e184f737324863a01201cce">01070</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1abb6d6e594e184f737324863a01201cce">primaryexp</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
01071 &#32;&#32;<emphasis role="comment">/*&#32;primaryexp&#32;-&gt;&#32;NAME&#32;|&#32;&apos;(&apos;&#32;expr&#32;&apos;)&apos;&#32;*/</emphasis>
01072 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>)&#32;{
01073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>:&#32;{
01074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
01075 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);
01076 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>(ls,&#32;v);
01077 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>(ls,&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>,&#32;line);
01078 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;v);
01079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01080 &#32;&#32;&#32;&#32;}
01081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a84e5aed35515b2881005d88dccaf0c30">TK_NAME</link>:&#32;{
01082 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a39a46ec796479bdd22eea51ddef11685">singlevar</link>(ls,&#32;v);
01083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01084 &#32;&#32;&#32;&#32;}
01085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{
01086 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(ls,&#32;<emphasis role="stringliteral">&quot;unexpected&#32;symbol&quot;</emphasis>);
01087 &#32;&#32;&#32;&#32;}
01088 &#32;&#32;}
01089 }
01090 
01091 
<anchor xml:id="_lparser_8c_source_1l01092"/><link linkend="_lparser_8c_1adecf4ab651d795c1af76b75998a4dd9c">01092</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1adecf4ab651d795c1af76b75998a4dd9c">suffixedexp</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
01093 &#32;&#32;<emphasis role="comment">/*&#32;suffixedexp&#32;-&gt;</emphasis>
01094 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;primaryexp&#32;{&#32;&apos;.&apos;&#32;NAME&#32;|&#32;&apos;[&apos;&#32;exp&#32;&apos;]&apos;&#32;|&#32;&apos;:&apos;&#32;NAME&#32;funcargs&#32;|&#32;funcargs&#32;}&#32;*/</emphasis>
01095 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01096 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
01097 &#32;&#32;<link linkend="_lparser_8c_1abb6d6e594e184f737324863a01201cce">primaryexp</link>(ls,&#32;v);
01098 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)&#32;{
01099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>)&#32;{
01100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;fieldsel&#32;*/</emphasis>
01101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a749eb16d6a8c1bb6e94d4c0392e57374">fieldsel</link>(ls,&#32;v);
01102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01103 &#32;&#32;&#32;&#32;&#32;&#32;}
01104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;&apos;[&apos;&#32;exp&#32;&apos;]&apos;&#32;*/</emphasis>
01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;key;
01106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad975c434bb45ed1baff91522069c4f11">luaK_exp2anyregup</link>(fs,&#32;v);
01107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ac3e6a3b89f1a54a2ff4f3570831faf35">yindex</link>(ls,&#32;&amp;key);
01108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af9e8e4c1ab85deb3fe8fdbc39d25c6d9">luaK_indexed</link>(fs,&#32;v,&#32;&amp;key);
01109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01110 &#32;&#32;&#32;&#32;&#32;&#32;}
01111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;&apos;:&apos;&#32;NAME&#32;funcargs&#32;*/</emphasis>
01112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;key;
01113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);
01114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a7da9556e730c9865b3de6c6440640266">codename</link>(ls,&#32;&amp;key);
01115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a38f9aab7679b62f5902d9adf5c502ea1">luaK_self</link>(fs,&#32;v,&#32;&amp;key);
01116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a5050696e535c2da862810fc9910b6afc">funcargs</link>(ls,&#32;v,&#32;line);
01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01118 &#32;&#32;&#32;&#32;&#32;&#32;}
01119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a2f748d118b4a20e2b1dc12538ccd9876">TK_STRING</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;funcargs&#32;*/</emphasis>
01120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;v);
01121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a5050696e535c2da862810fc9910b6afc">funcargs</link>(ls,&#32;v,&#32;line);
01122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01123 &#32;&#32;&#32;&#32;&#32;&#32;}
01124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>;
01125 &#32;&#32;&#32;&#32;}
01126 &#32;&#32;}
01127 }
01128 
01129 
<anchor xml:id="_lparser_8c_source_1l01130"/><link linkend="_lparser_8c_1a3b0b05af60978b05faf5713968573985">01130</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a3b0b05af60978b05faf5713968573985">simpleexp</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
01131 &#32;&#32;<emphasis role="comment">/*&#32;simpleexp&#32;-&gt;&#32;FLT&#32;|&#32;INT&#32;|&#32;STRING&#32;|&#32;NIL&#32;|&#32;TRUE&#32;|&#32;FALSE&#32;|&#32;...&#32;|</emphasis>
01132 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constructor&#32;|&#32;FUNCTION&#32;body&#32;|&#32;suffixedexp&#32;*/</emphasis>
01133 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>)&#32;{
01134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a81df881e62ebf1fe93b4820b7b54984d">TK_FLT</link>:&#32;{
01135 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(v,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>,&#32;0);
01136 &#32;&#32;&#32;&#32;&#32;&#32;v-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a53608b3835872ab9ee76fc00cfa47b4f">nval</link>&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a54762edd38b11a9194e6c7cee3c3fcdd">seminfo</link>.<link linkend="_union_sem_info_1ab1fde61ebd0228b9fe867095bbda02f6">r</link>;
01137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01138 &#32;&#32;&#32;&#32;}
01139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a9f48ed12541fab691e25e3ca9e38ac9f">TK_INT</link>:&#32;{
01140 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(v,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>,&#32;0);
01141 &#32;&#32;&#32;&#32;&#32;&#32;v-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a54762edd38b11a9194e6c7cee3c3fcdd">seminfo</link>.<link linkend="_union_sem_info_1a5bfb8f000fff9f547fdcebfb5ce512d6">i</link>;
01142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01143 &#32;&#32;&#32;&#32;}
01144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a2f748d118b4a20e2b1dc12538ccd9876">TK_STRING</link>:&#32;{
01145 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a08fd72f32434a2bab9cd08298085e9f9">codestring</link>(v,&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a54762edd38b11a9194e6c7cee3c3fcdd">seminfo</link>.<link linkend="_union_sem_info_1ae879ced0cb88fb344f2b1b8ac7786af8">ts</link>);
01146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01147 &#32;&#32;&#32;&#32;}
01148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a905f67bd8b8ac9b5e0236aa5dec2e7b5">TK_NIL</link>:&#32;{
01149 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(v,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea47eb055b6420db339de283cef27ad5d8">VNIL</link>,&#32;0);
01150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01151 &#32;&#32;&#32;&#32;}
01152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a67fdd8ec6c80ac2163c8d3e7d0ac50c1">TK_TRUE</link>:&#32;{
01153 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(v,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea1228eca4fdc8e7643d18155507942482">VTRUE</link>,&#32;0);
01154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01155 &#32;&#32;&#32;&#32;}
01156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a065bdf8569f3a1ab4130f7e1ff2203ae">TK_FALSE</link>:&#32;{
01157 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(v,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa">VFALSE</link>,&#32;0);
01158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01159 &#32;&#32;&#32;&#32;}
01160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a500efed658259c56ef30938c20c3b6c4">TK_DOTS</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;vararg&#32;*/</emphasis>
01161 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01162 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aece9aca90eb75d99df8490bdb813bdd4">check_condition</link>(ls,&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a75232df840e02cfa8134903745579657">is_vararg</link>,
01163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;cannot&#32;use&#32;&apos;...&apos;&#32;outside&#32;a&#32;vararg&#32;function&quot;</emphasis>);
01164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(v,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea3f5f58de0fa9e69449d4e2362ddbfaa1">VVARARG</link>,&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a1856103c50818d72aaa506821a4ef004">OP_VARARG</link>,&#32;0,&#32;0,&#32;1));
01165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01166 &#32;&#32;&#32;&#32;}
01167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;constructor&#32;*/</emphasis>
01168 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1afd4901e9e6b1ba046efc1a5932cd664c">constructor</link>(ls,&#32;v);
01169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01170 &#32;&#32;&#32;&#32;}
01171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04aafc8fa070d8d0bb9569b875cbc6b1a8c">TK_FUNCTION</link>:&#32;{
01172 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);
01173 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aa6a712055fa7e1b41488c71be4f55303">body</link>(ls,&#32;v,&#32;0,&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>);
01174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01175 &#32;&#32;&#32;&#32;}
01176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{
01177 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1adecf4ab651d795c1af76b75998a4dd9c">suffixedexp</link>(ls,&#32;v);
01178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01179 &#32;&#32;&#32;&#32;}
01180 &#32;&#32;}
01181 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);
01182 }
01183 
01184 
<anchor xml:id="_lparser_8c_source_1l01185"/><link linkend="_lparser_8c_1afb550c9d0656dfe2f49f1b87cb91b648">01185</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534">UnOpr</link>&#32;<link linkend="_lparser_8c_1afb550c9d0656dfe2f49f1b87cb91b648">getunopr</link>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;op)&#32;{
01186 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(op)&#32;{
01187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a985342409492de2e599c6202e9180ad9">TK_NOT</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534a238495588717191ca92bb9f8a5c80b59">OPR_NOT</link>;
01188 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534ad7aef0de1fbf580a7d03635a3e4058f3">OPR_MINUS</link>;
01189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534a692243c52fe8a114bce557d05a198c68">OPR_BNOT</link>;
01190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534a09eeed48a27b90460bab6d8ba33e620e">OPR_LEN</link>;
01191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534ae72bf1249ed8649f7ed837b537ed928d">OPR_NOUNOPR</link>;
01192 &#32;&#32;}
01193 }
01194 
01195 
<anchor xml:id="_lparser_8c_source_1l01196"/><link linkend="_lparser_8c_1a762cacc5df371cedf267a03fa2191385">01196</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;<link linkend="_lparser_8c_1a762cacc5df371cedf267a03fa2191385">getbinopr</link>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;op)&#32;{
01197 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(op)&#32;{
01198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a6a040b1b3b8cc217942b40bdcfd89a12">OPR_ADD</link>;
01199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a9af57e8c20b32a5bae4e7d5b94015a0d">OPR_SUB</link>;
01200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a3b374e6db04a6e4645e113fc82c873e2">OPR_MUL</link>;
01201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;%&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83abc6e1524cbf3d8a2b2a6689d5c40bc57">OPR_MOD</link>;
01202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;^&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83af06a2e29452e38eb8ed02812a1aa1083">OPR_POW</link>;
01203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aa0b20b22c1a53d0fb294bd15993fd4d8">OPR_DIV</link>;
01204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a7f7c69f2e524e3ab183318cf52575ba8">TK_IDIV</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83ac91ab547f0844521654b0e8924085d1e">OPR_IDIV</link>;
01205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&amp;&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a83d1f111c407b2a4ce3ecdf5fc588e4d">OPR_BAND</link>;
01206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;|&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aee42d0b535e2a8f6686dde348f113210">OPR_BOR</link>;
01207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aba9d6ec8db62deeab8b731a973023156">OPR_BXOR</link>;
01208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04afe39400ab62457e9a823aa8521d0610b">TK_SHL</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aea58586b669bfc9483fa17069e7f3602">OPR_SHL</link>;
01209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04ad15c43ae39b99d8f834419ec74183185">TK_SHR</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a53468a69eae492aec03a799f02754411">OPR_SHR</link>;
01210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a8367a7a9a88e9ea3cef16ab15887a278">TK_CONCAT</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a5f601beb91f937ddb7a1835f93016fdc">OPR_CONCAT</link>;
01211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a6897243f49a32e90ca094af33c16374b">TK_NE</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1f56f30f2368c0f93c9aeeea7e72ac55">OPR_NE</link>;
01212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04ae9b97178246db483138ab3d18039bfb2">TK_EQ</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1c53aacbc69d7058b240be92b134a7eb">OPR_EQ</link>;
01213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a15e3bd67027d90471048ea39abfd32fa">OPR_LT</link>;
01214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04ace38c3f7b08d6ffe00acdd0706ba35de">TK_LE</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a96f2a6272233d80a19b4f4482cf121a5">OPR_LE</link>;
01215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a3c68b5b6ad04299cc50ef1c4611441b0">OPR_GT</link>;
01216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a39306a802115256cf2099f6c724a95b0">TK_GE</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a5a35f1c08acd1e14156d32e04d8b9806">OPR_GE</link>;
01217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04adbea546e357b70d29f631824a4f9cfed">TK_AND</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a3dbbb7b8ec103877916a8a4c4671a3ef">OPR_AND</link>;
01218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04ab4578d7ddbacda8286ad2205d3d917e9">TK_OR</link>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83ae104a7612eb80ee5d9ff5715a938a2c1">OPR_OR</link>;
01219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1b1f5234efa3ff41b9898c76c8ee6f68">OPR_NOBINOPR</link>;
01220 &#32;&#32;}
01221 }
01222 
01223 
01224 <emphasis role="comment">/*</emphasis>
01225 <emphasis role="comment">**&#32;Priority&#32;table&#32;for&#32;binary&#32;operators.</emphasis>
01226 <emphasis role="comment">*/</emphasis>
01227 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_lparser_8c_source_1l01228"/><link linkend="_lparser_8c_1a3584754acc5e91c03d6fc91359eefd78">01228</link> &#32;&#32;<link linkend="_llimits_8h_1ae1fe9ac10d9803bd1d7bdf30b18bad68">lu_byte</link>&#32;<link linkend="_lparser_8c_1a3584754acc5e91c03d6fc91359eefd78">left</link>;&#32;&#32;<emphasis role="comment">/*&#32;left&#32;priority&#32;for&#32;each&#32;binary&#32;operator&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01229"/><link linkend="_lparser_8c_1a34b07942956eb7acd9d02c5b75177ae6">01229</link> &#32;&#32;<link linkend="_llimits_8h_1ae1fe9ac10d9803bd1d7bdf30b18bad68">lu_byte</link>&#32;<link linkend="_lparser_8c_1a34b07942956eb7acd9d02c5b75177ae6">right</link>;&#32;<emphasis role="comment">/*&#32;right&#32;priority&#32;*/</emphasis>
01230 }&#32;<link linkend="_lparser_8c_1ac6fd7e992c9eb0344ae1d64618ac5d27">priority</link>[]&#32;=&#32;{&#32;&#32;<emphasis role="comment">/*&#32;ORDER&#32;OPR&#32;*/</emphasis>
01231 &#32;&#32;&#32;{10,&#32;10},&#32;{10,&#32;10},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;+&apos;&#32;&apos;-&apos;&#32;*/</emphasis>
01232 &#32;&#32;&#32;{11,&#32;11},&#32;{11,&#32;11},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;*&apos;&#32;&apos;%&apos;&#32;*/</emphasis>
01233 &#32;&#32;&#32;{14,&#32;13},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;^&apos;&#32;(right&#32;associative)&#32;*/</emphasis>
01234 &#32;&#32;&#32;{11,&#32;11},&#32;{11,&#32;11},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;/&apos;&#32;&apos;//&apos;&#32;*/</emphasis>
01235 &#32;&#32;&#32;{6,&#32;6},&#32;{4,&#32;4},&#32;{5,&#32;5},&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;&amp;&apos;&#32;&apos;|&apos;&#32;&apos;~&apos;&#32;*/</emphasis>
01236 &#32;&#32;&#32;{7,&#32;7},&#32;{7,&#32;7},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;&lt;&lt;&apos;&#32;&apos;&gt;&gt;&apos;&#32;*/</emphasis>
01237 &#32;&#32;&#32;{9,&#32;8},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;..&apos;&#32;(right&#32;associative)&#32;*/</emphasis>
01238 &#32;&#32;&#32;{3,&#32;3},&#32;{3,&#32;3},&#32;{3,&#32;3},&#32;&#32;&#32;<emphasis role="comment">/*&#32;==,&#32;&lt;,&#32;&lt;=&#32;*/</emphasis>
01239 &#32;&#32;&#32;{3,&#32;3},&#32;{3,&#32;3},&#32;{3,&#32;3},&#32;&#32;&#32;<emphasis role="comment">/*&#32;~=,&#32;&gt;,&#32;&gt;=&#32;*/</emphasis>
01240 &#32;&#32;&#32;{2,&#32;2},&#32;{1,&#32;1}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;and,&#32;or&#32;*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01241"/><link linkend="_lparser_8c_1ac6fd7e992c9eb0344ae1d64618ac5d27">01241</link> };
01242 
<anchor xml:id="_lparser_8c_source_1l01243"/><link linkend="_lparser_8c_1a521d60e3611f1afe98634adda1a0a050">01243</link> <emphasis role="preprocessor">#define&#32;UNARY_PRIORITY&#32;&#32;12&#32;&#32;</emphasis><emphasis role="comment">/*&#32;priority&#32;for&#32;unary&#32;operators&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
01244 
01245 
01246 <emphasis role="comment">/*</emphasis>
01247 <emphasis role="comment">**&#32;subexpr&#32;-&gt;&#32;(simpleexp&#32;|&#32;unop&#32;subexpr)&#32;{&#32;binop&#32;subexpr&#32;}</emphasis>
01248 <emphasis role="comment">**&#32;where&#32;&apos;binop&apos;&#32;is&#32;any&#32;binary&#32;operator&#32;with&#32;a&#32;priority&#32;higher&#32;than&#32;&apos;limit&apos;</emphasis>
01249 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01250"/><link linkend="_lparser_8c_1a49946c41497533490f57063b1ca7cb7c">01250</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;<link linkend="_lparser_8c_1a49946c41497533490f57063b1ca7cb7c">subexpr</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v,&#32;<emphasis role="keywordtype">int</emphasis>&#32;limit)&#32;{
01251 &#32;&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;op;
01252 &#32;&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534">UnOpr</link>&#32;uop;
01253 &#32;&#32;<link linkend="_lparser_8c_1ab61308992bd6c2013519fdebd0d52704">enterlevel</link>(ls);
01254 &#32;&#32;uop&#32;=&#32;<link linkend="_lparser_8c_1afb550c9d0656dfe2f49f1b87cb91b648">getunopr</link>(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>);
01255 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uop&#32;!=&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534ae72bf1249ed8649f7ed837b537ed928d">OPR_NOUNOPR</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;prefix&#32;(unary)&#32;operator?&#32;*/</emphasis>
01256 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
01257 &#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;operator&#32;*/</emphasis>
01258 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a49946c41497533490f57063b1ca7cb7c">subexpr</link>(ls,&#32;v,&#32;<link linkend="_lparser_8c_1a521d60e3611f1afe98634adda1a0a050">UNARY_PRIORITY</link>);
01259 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a3fc6858944504885353a652022d15a4b">luaK_prefix</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;uop,&#32;v,&#32;line);
01260 &#32;&#32;}
01261 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_lparser_8c_1a3b0b05af60978b05faf5713968573985">simpleexp</link>(ls,&#32;v);
01262 &#32;&#32;<emphasis role="comment">/*&#32;expand&#32;while&#32;operators&#32;have&#32;priorities&#32;higher&#32;than&#32;&apos;limit&apos;&#32;*/</emphasis>
01263 &#32;&#32;op&#32;=&#32;<link linkend="_lparser_8c_1a762cacc5df371cedf267a03fa2191385">getbinopr</link>(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>);
01264 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(op&#32;!=&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1b1f5234efa3ff41b9898c76c8ee6f68">OPR_NOBINOPR</link>&#32;&amp;&amp;&#32;<link linkend="_lparser_8c_1ac6fd7e992c9eb0344ae1d64618ac5d27">priority</link>[op].<link linkend="_lparser_8c_1a3584754acc5e91c03d6fc91359eefd78">left</link>&#32;&gt;&#32;limit)&#32;{
01265 &#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;v2;
01266 &#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;nextop;
01267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
01268 &#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;operator&#32;*/</emphasis>
01269 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a07039dc526d35d6db3f1a29c7304fe89">luaK_infix</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;op,&#32;v);
01270 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;read&#32;sub-expression&#32;with&#32;higher&#32;priority&#32;*/</emphasis>
01271 &#32;&#32;&#32;&#32;nextop&#32;=&#32;<link linkend="_lparser_8c_1a49946c41497533490f57063b1ca7cb7c">subexpr</link>(ls,&#32;&amp;v2,&#32;<link linkend="_lparser_8c_1ac6fd7e992c9eb0344ae1d64618ac5d27">priority</link>[op].<link linkend="_lparser_8c_1a34b07942956eb7acd9d02c5b75177ae6">right</link>);
01272 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a21e9443ce3d06694c2f9ea497052fab4">luaK_posfix</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;op,&#32;v,&#32;&amp;v2,&#32;line);
01273 &#32;&#32;&#32;&#32;op&#32;=&#32;nextop;
01274 &#32;&#32;}
01275 &#32;&#32;<link linkend="_lparser_8c_1a147b3ba4d2004b4b4ee7260661ec31e1">leavelevel</link>(ls);
01276 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;op;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;first&#32;untreated&#32;operator&#32;*/</emphasis>
01277 }
01278 
01279 
<anchor xml:id="_lparser_8c_source_1l01280"/><link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">01280</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
01281 &#32;&#32;<link linkend="_lparser_8c_1a49946c41497533490f57063b1ca7cb7c">subexpr</link>(ls,&#32;v,&#32;0);
01282 }
01283 
01284 <emphasis role="comment">/*&#32;}====================================================================&#32;*/</emphasis>
01285 
01286 
01287 
01288 <emphasis role="comment">/*</emphasis>
01289 <emphasis role="comment">**&#32;{======================================================================</emphasis>
01290 <emphasis role="comment">**&#32;Rules&#32;for&#32;Statements</emphasis>
01291 <emphasis role="comment">**&#32;=======================================================================</emphasis>
01292 <emphasis role="comment">*/</emphasis>
01293 
01294 
<anchor xml:id="_lparser_8c_source_1l01295"/><link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">01295</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01296 &#32;&#32;<emphasis role="comment">/*&#32;block&#32;-&gt;&#32;statlist&#32;*/</emphasis>
01297 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01298 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;bl;
01299 &#32;&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>(fs,&#32;&amp;bl,&#32;0);
01300 &#32;&#32;<link linkend="_lparser_8c_1aff3c4f1970c0f3c50f37a8187a2414e3">statlist</link>(ls);
01301 &#32;&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>(fs);
01302 }
01303 
01304 
01305 <emphasis role="comment">/*</emphasis>
01306 <emphasis role="comment">**&#32;structure&#32;to&#32;chain&#32;all&#32;variables&#32;in&#32;the&#32;left-hand&#32;side&#32;of&#32;an</emphasis>
01307 <emphasis role="comment">**&#32;assignment</emphasis>
01308 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01309"/><link linkend="_struct_l_h_s__assign">01309</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_l_h_s__assign">LHS_assign</link>&#32;{
<anchor xml:id="_lparser_8c_source_1l01310"/><link linkend="_struct_l_h_s__assign_1ae3f545c32b2856453d55ecaf072b8992">01310</link> &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_l_h_s__assign">LHS_assign</link>&#32;*<link linkend="_struct_l_h_s__assign_1ae3f545c32b2856453d55ecaf072b8992">prev</link>;
<anchor xml:id="_lparser_8c_source_1l01311"/><link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">01311</link> &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>;&#32;&#32;<emphasis role="comment">/*&#32;variable&#32;(global,&#32;local,&#32;upvalue,&#32;or&#32;indexed)&#32;*/</emphasis>
01312 };
01313 
01314 
01315 <emphasis role="comment">/*</emphasis>
01316 <emphasis role="comment">**&#32;check&#32;whether,&#32;in&#32;an&#32;assignment&#32;to&#32;an&#32;upvalue/local&#32;variable,&#32;the</emphasis>
01317 <emphasis role="comment">**&#32;upvalue/local&#32;variable&#32;is&#32;begin&#32;used&#32;in&#32;a&#32;previous&#32;assignment&#32;to&#32;a</emphasis>
01318 <emphasis role="comment">**&#32;table.&#32;If&#32;so,&#32;save&#32;original&#32;upvalue/local&#32;value&#32;in&#32;a&#32;safe&#32;place&#32;and</emphasis>
01319 <emphasis role="comment">**&#32;use&#32;this&#32;safe&#32;copy&#32;in&#32;the&#32;previous&#32;assignment.</emphasis>
01320 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01321"/><link linkend="_lparser_8c_1a7d3af7471b2da7a36d18b73683181456">01321</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a7d3af7471b2da7a36d18b73683181456">check_conflict</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_l_h_s__assign">LHS_assign</link>&#32;*lh,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>)&#32;{
01322 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01323 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;extra&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>;&#32;&#32;<emphasis role="comment">/*&#32;eventual&#32;position&#32;to&#32;save&#32;local&#32;variable&#32;*/</emphasis>
01324 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;conflict&#32;=&#32;0;
01325 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;lh;&#32;lh&#32;=&#32;lh-&gt;<link linkend="_struct_l_h_s__assign_1ae3f545c32b2856453d55ecaf072b8992">prev</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;check&#32;all&#32;previous&#32;assignments&#32;*/</emphasis>
01326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8h_1a461494027b4038753f03ee04f4753d0f">vkisindexed</link>(lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;assignment&#32;to&#32;table&#32;field?&#32;*/</emphasis>
01327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea83132d11273ccae411b61430023e4be0">VINDEXUP</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;is&#32;table&#32;an&#32;upvalue?&#32;*/</emphasis>
01328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>&#32;&amp;&amp;&#32;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t&#32;==&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>)&#32;{
01329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conflict&#32;=&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;table&#32;is&#32;the&#32;upvalue&#32;being&#32;assigned&#32;now&#32;*/</emphasis>
01330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea16545cc6f945dda467b1418b80a35876">VINDEXSTR</link>;
01331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t&#32;=&#32;extra;&#32;&#32;<emphasis role="comment">/*&#32;assignment&#32;will&#32;use&#32;safe&#32;copy&#32;*/</emphasis>
01332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01333 &#32;&#32;&#32;&#32;&#32;&#32;}
01334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;table&#32;is&#32;a&#32;register&#32;*/</emphasis>
01335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>&#32;&amp;&amp;&#32;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t&#32;==&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.sidx)&#32;{
01336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conflict&#32;=&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;table&#32;is&#32;the&#32;local&#32;being&#32;assigned&#32;now&#32;*/</emphasis>
01337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t&#32;=&#32;extra;&#32;&#32;<emphasis role="comment">/*&#32;assignment&#32;will&#32;use&#32;safe&#32;copy&#32;*/</emphasis>
01338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is&#32;index&#32;the&#32;local&#32;being&#32;assigned?&#32;*/</emphasis>
01340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab1cb541b6c8f3a5f03b17184a2facc85">VINDEXED</link>&#32;&amp;&amp;&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>&#32;&amp;&amp;
01341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx&#32;==&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.sidx)&#32;{
01342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conflict&#32;=&#32;1;
01343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx&#32;=&#32;extra;&#32;&#32;<emphasis role="comment">/*&#32;previous&#32;assignment&#32;will&#32;use&#32;safe&#32;copy&#32;*/</emphasis>
01344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01345 &#32;&#32;&#32;&#32;&#32;&#32;}
01346 &#32;&#32;&#32;&#32;}
01347 &#32;&#32;}
01348 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(conflict)&#32;{
01349 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;copy&#32;upvalue/local&#32;value&#32;to&#32;a&#32;temporary&#32;(in&#32;position&#32;&apos;extra&apos;)&#32;*/</emphasis>
01350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>)
01351 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7addf83bbc02b6a88d325135c880d12184">OP_MOVE</link>,&#32;extra,&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.sidx,&#32;0);
01352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01353 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ab48573533495922f053a7d1c9b0d00b4">OP_GETUPVAL</link>,&#32;extra,&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;0);
01354 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;1);
01355 &#32;&#32;}
01356 }
01357 
01358 <emphasis role="comment">/*</emphasis>
01359 <emphasis role="comment">**&#32;Parse&#32;and&#32;compile&#32;a&#32;multiple&#32;assignment.&#32;The&#32;first&#32;&quot;variable&quot;</emphasis>
01360 <emphasis role="comment">**&#32;(a&#32;&apos;suffixedexp&apos;)&#32;was&#32;already&#32;read&#32;by&#32;the&#32;caller.</emphasis>
01361 <emphasis role="comment">**</emphasis>
01362 <emphasis role="comment">**&#32;assignment&#32;-&gt;&#32;suffixedexp&#32;restassign</emphasis>
01363 <emphasis role="comment">**&#32;restassign&#32;-&gt;&#32;&apos;,&apos;&#32;suffixedexp&#32;restassign&#32;|&#32;&apos;=&apos;&#32;explist</emphasis>
01364 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01365"/><link linkend="_lparser_8c_1a4edcfc19b8a94936c58860eded728be4">01365</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a4edcfc19b8a94936c58860eded728be4">restassign</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_l_h_s__assign">LHS_assign</link>&#32;*lh,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nvars)&#32;{
01366 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;e;
01367 &#32;&#32;<link linkend="_lparser_8c_1aece9aca90eb75d99df8490bdb813bdd4">check_condition</link>(ls,&#32;<link linkend="_lparser_8h_1a51778fbd65fc02656cb2731b5e9c7d06">vkisvar</link>(lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>),&#32;<emphasis role="stringliteral">&quot;syntax&#32;error&quot;</emphasis>);
01368 &#32;&#32;<link linkend="_lparser_8c_1a68563b28ef658576afc360b4979f3ed6">check_readonly</link>(ls,&#32;&amp;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
01369 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;restassign&#32;-&gt;&#32;&apos;,&apos;&#32;suffixedexp&#32;restassign&#32;*/</emphasis>
01370 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_l_h_s__assign">LHS_assign</link>&#32;nv;
01371 &#32;&#32;&#32;&#32;nv.<link linkend="_struct_l_h_s__assign_1ae3f545c32b2856453d55ecaf072b8992">prev</link>&#32;=&#32;lh;
01372 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1adecf4ab651d795c1af76b75998a4dd9c">suffixedexp</link>(ls,&#32;&amp;nv.<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
01373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lparser_8h_1a461494027b4038753f03ee04f4753d0f">vkisindexed</link>(nv.<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>))
01374 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a7d3af7471b2da7a36d18b73683181456">check_conflict</link>(ls,&#32;lh,&#32;&amp;nv.<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
01375 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ab61308992bd6c2013519fdebd0d52704">enterlevel</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;control&#32;recursion&#32;depth&#32;*/</emphasis>
01376 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a4edcfc19b8a94936c58860eded728be4">restassign</link>(ls,&#32;&amp;nv,&#32;nvars+1);
01377 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a147b3ba4d2004b4b4ee7260661ec31e1">leavelevel</link>(ls);
01378 &#32;&#32;}
01379 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;restassign&#32;-&gt;&#32;&apos;=&apos;&#32;explist&#32;*/</emphasis>
01380 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nexps;
01381 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>);
01382 &#32;&#32;&#32;&#32;nexps&#32;=&#32;<link linkend="_lparser_8c_1a25966bcc2d6cf47dbb9e0251fb26d661">explist</link>(ls,&#32;&amp;e);
01383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nexps&#32;!=&#32;nvars)
01384 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a7dafcad9b819fe82292276b63a632e80">adjust_assign</link>(ls,&#32;nvars,&#32;nexps,&#32;&amp;e);
01385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01386 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a80466f0e006b20a0c0c04f6bcc5b656d">luaK_setoneret</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;&amp;e);&#32;&#32;<emphasis role="comment">/*&#32;close&#32;last&#32;expression&#32;*/</emphasis>
01387 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a31c85ce631d5ee0a691cb58a1bd360be">luaK_storevar</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;&amp;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>,&#32;&amp;e);
01388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;avoid&#32;default&#32;*/</emphasis>
01389 &#32;&#32;&#32;&#32;}
01390 &#32;&#32;}
01391 &#32;&#32;<link linkend="_lparser_8c_1aaa0cc4c3d9d11b020ff13b23262b8b17">init_exp</link>(&amp;e,&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>,&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>-1);&#32;&#32;<emphasis role="comment">/*&#32;default&#32;assignment&#32;*/</emphasis>
01392 &#32;&#32;<link linkend="_lcode_8c_1a31c85ce631d5ee0a691cb58a1bd360be">luaK_storevar</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;&amp;lh-&gt;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>,&#32;&amp;e);
01393 }
01394 
01395 
<anchor xml:id="_lparser_8c_source_1l01396"/><link linkend="_lparser_8c_1a24002c50a108445d916457eb3c21d5e1">01396</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a24002c50a108445d916457eb3c21d5e1">cond</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01397 &#32;&#32;<emphasis role="comment">/*&#32;cond&#32;-&gt;&#32;exp&#32;*/</emphasis>
01398 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>;
01399 &#32;&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>(ls,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);&#32;&#32;<emphasis role="comment">/*&#32;read&#32;condition&#32;*/</emphasis>
01400 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea47eb055b6420db339de283cef27ad5d8">VNIL</link>)&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa">VFALSE</link>;&#32;&#32;<emphasis role="comment">/*&#32;&apos;falses&apos;&#32;are&#32;all&#32;equal&#32;here&#32;*/</emphasis>
01401 &#32;&#32;<link linkend="_lcode_8c_1a7d4ea6b61d0c157feca2afa59a9f877e">luaK_goiftrue</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
01402 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>;
01403 }
01404 
01405 
<anchor xml:id="_lparser_8c_source_1l01406"/><link linkend="_lparser_8c_1a55bae7d03576b713ff5460644f102dfd">01406</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a55bae7d03576b713ff5460644f102dfd">gotostat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01407 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01408 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
01409 &#32;&#32;<link linkend="_struct_t_string">TString</link>&#32;*name&#32;=&#32;<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;label&apos;s&#32;name&#32;*/</emphasis>
01410 &#32;&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*lb&#32;=&#32;<link linkend="_lparser_8c_1a599b5cc6bd2b4abfe73b21b01e09af33">findlabel</link>(ls,&#32;name);
01411 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lb&#32;==&#32;NULL)&#32;&#32;<emphasis role="comment">/*&#32;no&#32;label?&#32;*/</emphasis>
01412 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;forward&#32;jump;&#32;will&#32;be&#32;resolved&#32;when&#32;the&#32;label&#32;is&#32;declared&#32;*/</emphasis>
01413 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1afa4884f1fcf6756c7c9ebadef88a629f">newgotoentry</link>(ls,&#32;name,&#32;line,&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>(fs));
01414 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;found&#32;a&#32;label&#32;*/</emphasis>
01415 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;backward&#32;jump;&#32;will&#32;be&#32;resolved&#32;here&#32;*/</emphasis>
01416 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lblevel&#32;=&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>(fs,&#32;lb-&gt;<link linkend="_struct_labeldesc_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>);&#32;&#32;<emphasis role="comment">/*&#32;label&#32;level&#32;*/</emphasis>
01417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(fs)&#32;&gt;&#32;lblevel)&#32;&#32;<emphasis role="comment">/*&#32;leaving&#32;the&#32;scope&#32;of&#32;a&#32;variable?&#32;*/</emphasis>
01418 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a9e771dc35104ec1246adba881d27e372">OP_CLOSE</link>,&#32;lblevel,&#32;0,&#32;0);
01419 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;create&#32;jump&#32;and&#32;link&#32;it&#32;to&#32;the&#32;label&#32;*/</emphasis>
01420 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a4db596b358989fa68a43b6f697fc9a09">luaK_patchlist</link>(fs,&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>(fs),&#32;lb-&gt;<link linkend="_struct_labeldesc_1ac8c81e61335635fa4709d82412b31f06">pc</link>);
01421 &#32;&#32;}
01422 }
01423 
01424 
01425 <emphasis role="comment">/*</emphasis>
01426 <emphasis role="comment">**&#32;Break&#32;statement.&#32;Semantically&#32;equivalent&#32;to&#32;&quot;goto&#32;break&quot;.</emphasis>
01427 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01428"/><link linkend="_lparser_8c_1ae0650c2b4b5d311a24bd0ddb7b267db3">01428</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1ae0650c2b4b5d311a24bd0ddb7b267db3">breakstat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01429 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
01430 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;break&#32;*/</emphasis>
01431 &#32;&#32;<link linkend="_lparser_8c_1afa4884f1fcf6756c7c9ebadef88a629f">newgotoentry</link>(ls,&#32;<link linkend="_lstring_8h_1a1cd2754b136ed096325a76c6d16a82f5">luaS_newliteral</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;<emphasis role="stringliteral">&quot;break&quot;</emphasis>),&#32;line,&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>));
01432 }
01433 
01434 
01435 <emphasis role="comment">/*</emphasis>
01436 <emphasis role="comment">**&#32;Check&#32;whether&#32;there&#32;is&#32;already&#32;a&#32;label&#32;with&#32;the&#32;given&#32;&apos;name&apos;.</emphasis>
01437 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01438"/><link linkend="_lparser_8c_1aae46e95438b3cd72afa0838f362d9423">01438</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1aae46e95438b3cd72afa0838f362d9423">checkrepeated</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_t_string">TString</link>&#32;*name)&#32;{
01439 &#32;&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*lb&#32;=&#32;<link linkend="_lparser_8c_1a599b5cc6bd2b4abfe73b21b01e09af33">findlabel</link>(ls,&#32;name);
01440 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llimits_8h_1ac6c45889010c1bd68631771b64f18101">unlikely</link>(lb&#32;!=&#32;NULL))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;already&#32;defined?&#32;*/</emphasis>
01441 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg&#32;=&#32;<emphasis role="stringliteral">&quot;label&#32;&apos;%s&apos;&#32;already&#32;defined&#32;on&#32;line&#32;%d&quot;</emphasis>;
01442 &#32;&#32;&#32;&#32;msg&#32;=&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;msg,&#32;<link linkend="_lobject_8h_1acb05d3ab238923581a9c629b8e11a6ac">getstr</link>(name),&#32;lb-&gt;<link linkend="_struct_labeldesc_1a41ebd28ef1d7c6ade45642cb6acc1039">line</link>);
01443 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1abe3b325f24edb9acdca694951cbcb4d8">luaK_semerror</link>(ls,&#32;msg);&#32;&#32;<emphasis role="comment">/*&#32;error&#32;*/</emphasis>
01444 &#32;&#32;}
01445 }
01446 
01447 
<anchor xml:id="_lparser_8c_source_1l01448"/><link linkend="_lparser_8c_1a20b1ca0b6642f6a79d5cc5abeb5dae63">01448</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a20b1ca0b6642f6a79d5cc5abeb5dae63">labelstat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_t_string">TString</link>&#32;*name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01449 &#32;&#32;<emphasis role="comment">/*&#32;label&#32;-&gt;&#32;&apos;::&apos;&#32;NAME&#32;&apos;::&apos;&#32;*/</emphasis>
01450 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a3a767e0c4ce0407785d87a1a56980de2">TK_DBCOLON</link>);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;double&#32;colon&#32;*/</emphasis>
01451 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>&#32;||&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a3a767e0c4ce0407785d87a1a56980de2">TK_DBCOLON</link>)
01452 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ac29df3687aea9407dcfec478092fce4c">statement</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;other&#32;no-op&#32;statements&#32;*/</emphasis>
01453 &#32;&#32;<link linkend="_lparser_8c_1aae46e95438b3cd72afa0838f362d9423">checkrepeated</link>(ls,&#32;name);&#32;&#32;<emphasis role="comment">/*&#32;check&#32;for&#32;repeated&#32;labels&#32;*/</emphasis>
01454 &#32;&#32;<link linkend="_lparser_8c_1abfc0a485f2b04026699cafcdaa1bfb04">createlabel</link>(ls,&#32;name,&#32;line,&#32;<link linkend="_lparser_8c_1a5be23689d7ea5fd2561c345df03fbf7c">block_follow</link>(ls,&#32;0));
01455 }
01456 
01457 
<anchor xml:id="_lparser_8c_source_1l01458"/><link linkend="_lparser_8c_1af24623e7aa293515c8293aaf892de531">01458</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1af24623e7aa293515c8293aaf892de531">whilestat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01459 &#32;&#32;<emphasis role="comment">/*&#32;whilestat&#32;-&gt;&#32;WHILE&#32;cond&#32;DO&#32;block&#32;END&#32;*/</emphasis>
01460 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01461 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;whileinit;
01462 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;condexit;
01463 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;bl;
01464 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;WHILE&#32;*/</emphasis>
01465 &#32;&#32;whileinit&#32;=&#32;<link linkend="_lcode_8c_1afd70025e040dde0ef167df148de201b0">luaK_getlabel</link>(fs);
01466 &#32;&#32;condexit&#32;=&#32;<link linkend="_lparser_8c_1a24002c50a108445d916457eb3c21d5e1">cond</link>(ls);
01467 &#32;&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>(fs,&#32;&amp;bl,&#32;1);
01468 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a2fbaee0c1e87c30a1809ff22893fe2f9">TK_DO</link>);
01469 &#32;&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>(ls);
01470 &#32;&#32;<link linkend="_lcode_8h_1a08e8dcbeff76a91cea9bdca0bec9c24f">luaK_jumpto</link>(fs,&#32;whileinit);
01471 &#32;&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a541ef482a7317bd2a54032f165d90db7">TK_END</link>,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a592e99387742b5748aa5e341c99dffd0">TK_WHILE</link>,&#32;line);
01472 &#32;&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>(fs);
01473 &#32;&#32;<link linkend="_lcode_8c_1a5748ad3c940c7916a2586fab6181a197">luaK_patchtohere</link>(fs,&#32;condexit);&#32;&#32;<emphasis role="comment">/*&#32;false&#32;conditions&#32;finish&#32;the&#32;loop&#32;*/</emphasis>
01474 }
01475 
01476 
<anchor xml:id="_lparser_8c_source_1l01477"/><link linkend="_lparser_8c_1a8638807967aa30e7700834f6bd4aaa5d">01477</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a8638807967aa30e7700834f6bd4aaa5d">repeatstat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01478 &#32;&#32;<emphasis role="comment">/*&#32;repeatstat&#32;-&gt;&#32;REPEAT&#32;block&#32;UNTIL&#32;cond&#32;*/</emphasis>
01479 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;condexit;
01480 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01481 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;repeat_init&#32;=&#32;<link linkend="_lcode_8c_1afd70025e040dde0ef167df148de201b0">luaK_getlabel</link>(fs);
01482 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;bl1,&#32;bl2;
01483 &#32;&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>(fs,&#32;&amp;bl1,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;loop&#32;block&#32;*/</emphasis>
01484 &#32;&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>(fs,&#32;&amp;bl2,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;scope&#32;block&#32;*/</emphasis>
01485 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;REPEAT&#32;*/</emphasis>
01486 &#32;&#32;<link linkend="_lparser_8c_1aff3c4f1970c0f3c50f37a8187a2414e3">statlist</link>(ls);
01487 &#32;&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04ab7232de731ef17fbc644b370c783719c">TK_UNTIL</link>,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a9f9929bcc6f4a87310869eaf9efed4cd">TK_REPEAT</link>,&#32;line);
01488 &#32;&#32;condexit&#32;=&#32;<link linkend="_lparser_8c_1a24002c50a108445d916457eb3c21d5e1">cond</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;read&#32;condition&#32;(inside&#32;scope&#32;block)&#32;*/</emphasis>
01489 &#32;&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;finish&#32;scope&#32;*/</emphasis>
01490 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bl2.<link linkend="_struct_block_cnt_1ad374a38391476799f5e222e522e2c69f">upval</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;upvalues?&#32;*/</emphasis>
01491 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;exit&#32;=&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;normal&#32;exit&#32;must&#32;jump&#32;over&#32;fix&#32;*/</emphasis>
01492 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a5748ad3c940c7916a2586fab6181a197">luaK_patchtohere</link>(fs,&#32;condexit);&#32;&#32;<emphasis role="comment">/*&#32;repetition&#32;must&#32;close&#32;upvalues&#32;*/</emphasis>
01493 &#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a9e771dc35104ec1246adba881d27e372">OP_CLOSE</link>,&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>(fs,&#32;bl2.<link linkend="_struct_block_cnt_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>),&#32;0,&#32;0);
01494 &#32;&#32;&#32;&#32;condexit&#32;=&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;repeat&#32;after&#32;closing&#32;upvalues&#32;*/</emphasis>
01495 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a5748ad3c940c7916a2586fab6181a197">luaK_patchtohere</link>(fs,&#32;exit);&#32;&#32;<emphasis role="comment">/*&#32;normal&#32;exit&#32;comes&#32;to&#32;here&#32;*/</emphasis>
01496 &#32;&#32;}
01497 &#32;&#32;<link linkend="_lcode_8c_1a4db596b358989fa68a43b6f697fc9a09">luaK_patchlist</link>(fs,&#32;condexit,&#32;repeat_init);&#32;&#32;<emphasis role="comment">/*&#32;close&#32;the&#32;loop&#32;*/</emphasis>
01498 &#32;&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;finish&#32;loop&#32;*/</emphasis>
01499 }
01500 
01501 
01502 <emphasis role="comment">/*</emphasis>
01503 <emphasis role="comment">**&#32;Read&#32;an&#32;expression&#32;and&#32;generate&#32;code&#32;to&#32;put&#32;its&#32;results&#32;in&#32;next</emphasis>
01504 <emphasis role="comment">**&#32;stack&#32;slot.</emphasis>
01505 <emphasis role="comment">**</emphasis>
01506 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01507"/><link linkend="_lparser_8c_1ad7daced5a038385200486346caea6d96">01507</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1ad7daced5a038385200486346caea6d96">exp1</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01508 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;e;
01509 &#32;&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>(ls,&#32;&amp;e);
01510 &#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;&amp;e);
01511 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>);
01512 }
01513 
01514 
01515 <emphasis role="comment">/*</emphasis>
01516 <emphasis role="comment">**&#32;Fix&#32;for&#32;instruction&#32;at&#32;position&#32;&apos;pc&apos;&#32;to&#32;jump&#32;to&#32;&apos;dest&apos;.</emphasis>
01517 <emphasis role="comment">**&#32;(Jump&#32;addresses&#32;are&#32;relative&#32;in&#32;Lua).&#32;&apos;back&apos;&#32;true&#32;means</emphasis>
01518 <emphasis role="comment">**&#32;a&#32;back&#32;jump.</emphasis>
01519 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01520"/><link linkend="_lparser_8c_1a672ee0543c0616f70608b4ab0c99c646">01520</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a672ee0543c0616f70608b4ab0c99c646">fixforjump</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc,&#32;<emphasis role="keywordtype">int</emphasis>&#32;dest,&#32;<emphasis role="keywordtype">int</emphasis>&#32;back)&#32;{
01521 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*jmp&#32;=&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[pc];
01522 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;dest&#32;-&#32;(pc&#32;+&#32;1);
01523 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(back)
01524 &#32;&#32;&#32;&#32;offset&#32;=&#32;-offset;
01525 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llimits_8h_1ac6c45889010c1bd68631771b64f18101">unlikely</link>(offset&#32;&gt;&#32;<link linkend="_lopcodes_8h_1aebbf650de6e9cbec539bfabcb9ae50c6">MAXARG_Bx</link>))
01526 &#32;&#32;&#32;&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>,&#32;<emphasis role="stringliteral">&quot;control&#32;structure&#32;too&#32;long&quot;</emphasis>);
01527 &#32;&#32;<link linkend="_lopcodes_8h_1a0c476ba8d647ec398f25bb6374a0c088">SETARG_Bx</link>(*jmp,&#32;offset);
01528 }
01529 
01530 
01531 <emphasis role="comment">/*</emphasis>
01532 <emphasis role="comment">**&#32;Generate&#32;code&#32;for&#32;a&#32;&apos;for&apos;&#32;loop.</emphasis>
01533 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01534"/><link linkend="_lparser_8c_1a253feeb1a37a9ffb5814070a44893b7f">01534</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a253feeb1a37a9ffb5814070a44893b7f">forbody</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;base,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nvars,&#32;<emphasis role="keywordtype">int</emphasis>&#32;isgen)&#32;{
01535 &#32;&#32;<emphasis role="comment">/*&#32;forbody&#32;-&gt;&#32;DO&#32;block&#32;*/</emphasis>
01536 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;<link linkend="_lvm_8c_1a8d9c9746ae6f28dd1b17982a88589b51">forprep</link>[2]&#32;=&#32;{<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a5277c6eb2b1ab790c4942fdccd749e33">OP_FORPREP</link>,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7aafeb9e3e631d6f6c1700bf77134d425e">OP_TFORPREP</link>};
01537 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;forloop[2]&#32;=&#32;{<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7aa01470a2fc70a3f2dbd20c7c8f270802">OP_FORLOOP</link>,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a7dabccd7671c8ff374cb4502a6edb9c0">OP_TFORLOOP</link>};
01538 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;bl;
01539 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01540 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;prep,&#32;endfor;
01541 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a2fbaee0c1e87c30a1809ff22893fe2f9">TK_DO</link>);
01542 &#32;&#32;prep&#32;=&#32;<link linkend="_lcode_8c_1a3fb5006a069fadbcb2ec7dde4740ad10">luaK_codeABx</link>(fs,&#32;<link linkend="_lvm_8c_1a8d9c9746ae6f28dd1b17982a88589b51">forprep</link>[isgen],&#32;base,&#32;0);
01543 &#32;&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>(fs,&#32;&amp;bl,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;scope&#32;for&#32;declared&#32;variables&#32;*/</emphasis>
01544 &#32;&#32;<link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">adjustlocalvars</link>(ls,&#32;nvars);
01545 &#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;nvars);
01546 &#32;&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>(ls);
01547 &#32;&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;end&#32;of&#32;scope&#32;for&#32;declared&#32;variables&#32;*/</emphasis>
01548 &#32;&#32;<link linkend="_lparser_8c_1a672ee0543c0616f70608b4ab0c99c646">fixforjump</link>(fs,&#32;prep,&#32;<link linkend="_lcode_8c_1afd70025e040dde0ef167df148de201b0">luaK_getlabel</link>(fs),&#32;0);
01549 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isgen)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;generic&#32;for?&#32;*/</emphasis>
01550 &#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a899602d2c96443e08eec9e477071aa22">OP_TFORCALL</link>,&#32;base,&#32;0,&#32;nvars);
01551 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ab17c57ffa1dc5c51f0d67a4ae8a5f073">luaK_fixline</link>(fs,&#32;line);
01552 &#32;&#32;}
01553 &#32;&#32;endfor&#32;=&#32;<link linkend="_lcode_8c_1a3fb5006a069fadbcb2ec7dde4740ad10">luaK_codeABx</link>(fs,&#32;forloop[isgen],&#32;base,&#32;0);
01554 &#32;&#32;<link linkend="_lparser_8c_1a672ee0543c0616f70608b4ab0c99c646">fixforjump</link>(fs,&#32;endfor,&#32;prep&#32;+&#32;1,&#32;1);
01555 &#32;&#32;<link linkend="_lcode_8c_1ab17c57ffa1dc5c51f0d67a4ae8a5f073">luaK_fixline</link>(fs,&#32;line);
01556 }
01557 
01558 
<anchor xml:id="_lparser_8c_source_1l01559"/><link linkend="_lparser_8c_1a18532c1a3a900cb8f3399b470c00daf0">01559</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a18532c1a3a900cb8f3399b470c00daf0">fornum</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_t_string">TString</link>&#32;*varname,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01560 &#32;&#32;<emphasis role="comment">/*&#32;fornum&#32;-&gt;&#32;NAME&#32;=&#32;exp,exp[,exp]&#32;forbody&#32;*/</emphasis>
01561 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01562 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;base&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>;
01563 &#32;&#32;<link linkend="_lparser_8c_1a031fd03dec54eb67a3cfac513b8575bb">new_localvarliteral</link>(ls,&#32;<emphasis role="stringliteral">&quot;(for&#32;state)&quot;</emphasis>);
01564 &#32;&#32;<link linkend="_lparser_8c_1a031fd03dec54eb67a3cfac513b8575bb">new_localvarliteral</link>(ls,&#32;<emphasis role="stringliteral">&quot;(for&#32;state)&quot;</emphasis>);
01565 &#32;&#32;<link linkend="_lparser_8c_1a031fd03dec54eb67a3cfac513b8575bb">new_localvarliteral</link>(ls,&#32;<emphasis role="stringliteral">&quot;(for&#32;state)&quot;</emphasis>);
01566 &#32;&#32;<link linkend="_lparser_8c_1a89f5732cbee45d78cfec9dbd1a207bb7">new_localvar</link>(ls,&#32;varname);
01567 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>);
01568 &#32;&#32;<link linkend="_lparser_8c_1ad7daced5a038385200486346caea6d96">exp1</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;initial&#32;value&#32;*/</emphasis>
01569 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>);
01570 &#32;&#32;<link linkend="_lparser_8c_1ad7daced5a038385200486346caea6d96">exp1</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;limit&#32;*/</emphasis>
01571 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>))
01572 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ad7daced5a038385200486346caea6d96">exp1</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;optional&#32;step&#32;*/</emphasis>
01573 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;default&#32;step&#32;=&#32;1&#32;*/</emphasis>
01574 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a2fff5f96536d86c8d5df7bdf2ea4d317">luaK_int</link>(fs,&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>,&#32;1);
01575 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;1);
01576 &#32;&#32;}
01577 &#32;&#32;<link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">adjustlocalvars</link>(ls,&#32;3);&#32;&#32;<emphasis role="comment">/*&#32;control&#32;variables&#32;*/</emphasis>
01578 &#32;&#32;<link linkend="_lparser_8c_1a253feeb1a37a9ffb5814070a44893b7f">forbody</link>(ls,&#32;base,&#32;line,&#32;1,&#32;0);
01579 }
01580 
01581 
<anchor xml:id="_lparser_8c_source_1l01582"/><link linkend="_lparser_8c_1a5f15a71e248c4e1e9c867ccac8a450c2">01582</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a5f15a71e248c4e1e9c867ccac8a450c2">forlist</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_t_string">TString</link>&#32;*indexname)&#32;{
01583 &#32;&#32;<emphasis role="comment">/*&#32;forlist&#32;-&gt;&#32;NAME&#32;{,NAME}&#32;IN&#32;explist&#32;forbody&#32;*/</emphasis>
01584 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01585 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;e;
01586 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nvars&#32;=&#32;5;&#32;&#32;<emphasis role="comment">/*&#32;gen,&#32;state,&#32;control,&#32;toclose,&#32;&apos;indexname&apos;&#32;*/</emphasis>
01587 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line;
01588 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;base&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>;
01589 &#32;&#32;<emphasis role="comment">/*&#32;create&#32;control&#32;variables&#32;*/</emphasis>
01590 &#32;&#32;<link linkend="_lparser_8c_1a031fd03dec54eb67a3cfac513b8575bb">new_localvarliteral</link>(ls,&#32;<emphasis role="stringliteral">&quot;(for&#32;state)&quot;</emphasis>);
01591 &#32;&#32;<link linkend="_lparser_8c_1a031fd03dec54eb67a3cfac513b8575bb">new_localvarliteral</link>(ls,&#32;<emphasis role="stringliteral">&quot;(for&#32;state)&quot;</emphasis>);
01592 &#32;&#32;<link linkend="_lparser_8c_1a031fd03dec54eb67a3cfac513b8575bb">new_localvarliteral</link>(ls,&#32;<emphasis role="stringliteral">&quot;(for&#32;state)&quot;</emphasis>);
01593 &#32;&#32;<link linkend="_lparser_8c_1a031fd03dec54eb67a3cfac513b8575bb">new_localvarliteral</link>(ls,&#32;<emphasis role="stringliteral">&quot;(for&#32;state)&quot;</emphasis>);
01594 &#32;&#32;<emphasis role="comment">/*&#32;create&#32;declared&#32;variables&#32;*/</emphasis>
01595 &#32;&#32;<link linkend="_lparser_8c_1a89f5732cbee45d78cfec9dbd1a207bb7">new_localvar</link>(ls,&#32;indexname);
01596 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>))&#32;{
01597 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a89f5732cbee45d78cfec9dbd1a207bb7">new_localvar</link>(ls,&#32;<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls));
01598 &#32;&#32;&#32;&#32;nvars++;
01599 &#32;&#32;}
01600 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a88b8f5e56057cb0d4e633046b2b9e66e">TK_IN</link>);
01601 &#32;&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
01602 &#32;&#32;<link linkend="_lparser_8c_1a7dafcad9b819fe82292276b63a632e80">adjust_assign</link>(ls,&#32;4,&#32;<link linkend="_lparser_8c_1a25966bcc2d6cf47dbb9e0251fb26d661">explist</link>(ls,&#32;&amp;e),&#32;&amp;e);
01603 &#32;&#32;<link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">adjustlocalvars</link>(ls,&#32;4);&#32;&#32;<emphasis role="comment">/*&#32;control&#32;variables&#32;*/</emphasis>
01604 &#32;&#32;<link linkend="_lparser_8c_1ab92f39b4f46a9844ecab9d585d636bd4">markupval</link>(fs,&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>);&#32;&#32;<emphasis role="comment">/*&#32;last&#32;control&#32;var.&#32;must&#32;be&#32;closed&#32;*/</emphasis>
01605 &#32;&#32;<link linkend="_lcode_8c_1afd941e61245bcb4d05bd3ba5b4ffec3b">luaK_checkstack</link>(fs,&#32;3);&#32;&#32;<emphasis role="comment">/*&#32;extra&#32;space&#32;to&#32;call&#32;generator&#32;*/</emphasis>
01606 &#32;&#32;<link linkend="_lparser_8c_1a253feeb1a37a9ffb5814070a44893b7f">forbody</link>(ls,&#32;base,&#32;line,&#32;nvars&#32;-&#32;4,&#32;1);
01607 }
01608 
01609 
<anchor xml:id="_lparser_8c_source_1l01610"/><link linkend="_lparser_8c_1af783542828ac360981e0ce0f55abc630">01610</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1af783542828ac360981e0ce0f55abc630">forstat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01611 &#32;&#32;<emphasis role="comment">/*&#32;forstat&#32;-&gt;&#32;FOR&#32;(fornum&#32;|&#32;forlist)&#32;END&#32;*/</emphasis>
01612 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01613 &#32;&#32;<link linkend="_struct_t_string">TString</link>&#32;*varname;
01614 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;bl;
01615 &#32;&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>(fs,&#32;&amp;bl,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;scope&#32;for&#32;loop&#32;and&#32;control&#32;variables&#32;*/</emphasis>
01616 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;&apos;for&apos;&#32;*/</emphasis>
01617 &#32;&#32;varname&#32;=&#32;<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;first&#32;variable&#32;name&#32;*/</emphasis>
01618 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>)&#32;{
01619 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>:&#32;<link linkend="_lparser_8c_1a18532c1a3a900cb8f3399b470c00daf0">fornum</link>(ls,&#32;varname,&#32;line);&#32;<emphasis role="keywordflow">break</emphasis>;
01620 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a88b8f5e56057cb0d4e633046b2b9e66e">TK_IN</link>:&#32;<link linkend="_lparser_8c_1a5f15a71e248c4e1e9c867ccac8a450c2">forlist</link>(ls,&#32;varname);&#32;<emphasis role="keywordflow">break</emphasis>;
01621 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(ls,&#32;<emphasis role="stringliteral">&quot;&apos;=&apos;&#32;or&#32;&apos;in&apos;&#32;expected&quot;</emphasis>);
01622 &#32;&#32;}
01623 &#32;&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a541ef482a7317bd2a54032f165d90db7">TK_END</link>,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a7dcf533a644fc9cb697137a8a9b54f4b">TK_FOR</link>,&#32;line);
01624 &#32;&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;loop&#32;scope&#32;(&apos;break&apos;&#32;jumps&#32;to&#32;this&#32;point)&#32;*/</emphasis>
01625 }
01626 
01627 
01628 <emphasis role="comment">/*</emphasis>
01629 <emphasis role="comment">**&#32;Check&#32;whether&#32;next&#32;instruction&#32;is&#32;a&#32;single&#32;jump&#32;(a&#32;&apos;break&apos;,&#32;a&#32;&apos;goto&apos;</emphasis>
01630 <emphasis role="comment">**&#32;to&#32;a&#32;forward&#32;label,&#32;or&#32;a&#32;&apos;goto&apos;&#32;to&#32;a&#32;backward&#32;label&#32;with&#32;no&#32;variable</emphasis>
01631 <emphasis role="comment">**&#32;to&#32;close).&#32;If&#32;so,&#32;set&#32;the&#32;name&#32;of&#32;the&#32;&apos;label&apos;&#32;it&#32;is&#32;jumping&#32;to</emphasis>
01632 <emphasis role="comment">**&#32;(&quot;break&quot;&#32;for&#32;a&#32;&apos;break&apos;)&#32;or&#32;to&#32;where&#32;it&#32;is&#32;jumping&#32;to&#32;(&apos;target&apos;)&#32;and</emphasis>
01633 <emphasis role="comment">**&#32;return&#32;true.&#32;If&#32;not&#32;a&#32;single&#32;jump,&#32;leave&#32;input&#32;unchanged,&#32;to&#32;be</emphasis>
01634 <emphasis role="comment">**&#32;handled&#32;as&#32;a&#32;regular&#32;statement.</emphasis>
01635 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01636"/><link linkend="_lparser_8c_1ac39115fb9e5fd58006bbe36a28eddc7a">01636</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1ac39115fb9e5fd58006bbe36a28eddc7a">issinglejump</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_t_string">TString</link>&#32;**label,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*target)&#32;{
01637 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a37065a9cb3cc1cc8a17537dc1ee5e0f0">TK_BREAK</link>))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;a&#32;break?&#32;*/</emphasis>
01638 &#32;&#32;&#32;&#32;*label&#32;=&#32;<link linkend="_lstring_8h_1a1cd2754b136ed096325a76c6d16a82f5">luaS_newliteral</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;<emphasis role="stringliteral">&quot;break&quot;</emphasis>);
01639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01640 &#32;&#32;}
01641 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;!=&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04af41cf088c658a62b2381424416171445">TK_GOTO</link>&#32;||&#32;<link linkend="_llex_8c_1af44c274f4e9a24ac9bc41ff31bac5ffb">luaX_lookahead</link>(ls)&#32;!=&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a84e5aed35515b2881005d88dccaf0c30">TK_NAME</link>)
01642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;a&#32;valid&#32;goto&#32;*/</emphasis>
01643 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01644 &#32;&#32;&#32;&#32;<link linkend="_struct_t_string">TString</link>&#32;*lname&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1aff1615e0bd5c464085f800a63c335e43">lookahead</link>.<link linkend="_struct_token_1a54762edd38b11a9194e6c7cee3c3fcdd">seminfo</link>.<link linkend="_union_sem_info_1ae879ced0cb88fb344f2b1b8ac7786af8">ts</link>;&#32;&#32;<emphasis role="comment">/*&#32;label&apos;s&#32;id&#32;*/</emphasis>
01645 &#32;&#32;&#32;&#32;<link linkend="_struct_labeldesc">Labeldesc</link>&#32;*lb&#32;=&#32;<link linkend="_lparser_8c_1a599b5cc6bd2b4abfe73b21b01e09af33">findlabel</link>(ls,&#32;lname);
01646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lb)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;a&#32;backward&#32;jump?&#32;*/</emphasis>
01647 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;does&#32;it&#32;need&#32;to&#32;close&#32;variables?&#32;*/</emphasis>
01648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>)&#32;&gt;&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;lb-&gt;<link linkend="_struct_labeldesc_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>))
01649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;a&#32;single&#32;jump;&#32;cannot&#32;optimize&#32;*/</emphasis>
01650 &#32;&#32;&#32;&#32;&#32;&#32;*target&#32;=&#32;lb-&gt;<link linkend="_struct_labeldesc_1ac8c81e61335635fa4709d82412b31f06">pc</link>;
01651 &#32;&#32;&#32;&#32;}
01652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;jump&#32;forward&#32;*/</emphasis>
01653 &#32;&#32;&#32;&#32;&#32;&#32;*label&#32;=&#32;lname;
01654 &#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;goto&#32;*/</emphasis>
01655 &#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;name&#32;*/</emphasis>
01656 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01657 &#32;&#32;}
01658 }
01659 
01660 
<anchor xml:id="_lparser_8c_source_1l01661"/><link linkend="_lparser_8c_1a51dbd956bff1ce06bb45b3e3d9fde83f">01661</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a51dbd956bff1ce06bb45b3e3d9fde83f">test_then_block</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*escapelist)&#32;{
01662 &#32;&#32;<emphasis role="comment">/*&#32;test_then_block&#32;-&gt;&#32;[IF&#32;|&#32;ELSEIF]&#32;cond&#32;THEN&#32;block&#32;*/</emphasis>
01663 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;bl;
01664 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line;
01665 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01666 &#32;&#32;<link linkend="_struct_t_string">TString</link>&#32;*jlb&#32;=&#32;NULL;
01667 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;target&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;
01668 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>;
01669 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;jf;&#32;&#32;<emphasis role="comment">/*&#32;instruction&#32;to&#32;skip&#32;&apos;then&apos;&#32;code&#32;(if&#32;condition&#32;is&#32;false)&#32;*/</emphasis>
01670 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;IF&#32;or&#32;ELSEIF&#32;*/</emphasis>
01671 &#32;&#32;<link linkend="_lparser_8c_1af2c543df6cbb49247cd0a71956786d92">expr</link>(ls,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);&#32;&#32;<emphasis role="comment">/*&#32;read&#32;condition&#32;*/</emphasis>
01672 &#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a757e31c13acf13af22615dca8c1b7c97">TK_THEN</link>);
01673 &#32;&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;
01674 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1ac39115fb9e5fd58006bbe36a28eddc7a">issinglejump</link>(ls,&#32;&amp;jlb,&#32;&amp;target))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;&apos;if&#32;x&#32;then&#32;goto&apos;&#32;?&#32;*/</emphasis>
01675 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a61d509689d21bb8b1fe8681a03ccbe58">luaK_goiffalse</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);&#32;&#32;<emphasis role="comment">/*&#32;will&#32;jump&#32;to&#32;label&#32;if&#32;condition&#32;is&#32;true&#32;*/</emphasis>
01676 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>(fs,&#32;&amp;bl,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;must&#32;enter&#32;block&#32;before&#32;&apos;goto&apos;&#32;*/</emphasis>
01677 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jlb&#32;!=&#32;NULL)&#32;&#32;<emphasis role="comment">/*&#32;forward&#32;jump?&#32;*/</emphasis>
01678 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1afa4884f1fcf6756c7c9ebadef88a629f">newgotoentry</link>(ls,&#32;jlb,&#32;line,&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>);&#32;&#32;<emphasis role="comment">/*&#32;will&#32;be&#32;resolved&#32;later&#32;*/</emphasis>
01679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;backward&#32;jump&#32;*/</emphasis>
01680 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a4db596b358989fa68a43b6f697fc9a09">luaK_patchlist</link>(fs,&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>,&#32;target);&#32;&#32;<emphasis role="comment">/*&#32;jump&#32;directly&#32;to&#32;&apos;target&apos;&#32;*/</emphasis>
01681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>))&#32;{}&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;semicolons&#32;*/</emphasis>
01682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a5be23689d7ea5fd2561c345df03fbf7c">block_follow</link>(ls,&#32;0))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;jump&#32;is&#32;the&#32;entire&#32;block?&#32;*/</emphasis>
01683 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>(fs);
01684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;and&#32;that&#32;is&#32;it&#32;*/</emphasis>
01685 &#32;&#32;&#32;&#32;}
01686 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;must&#32;skip&#32;over&#32;&apos;then&apos;&#32;part&#32;if&#32;condition&#32;is&#32;false&#32;*/</emphasis>
01687 &#32;&#32;&#32;&#32;&#32;&#32;jf&#32;=&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>(fs);
01688 &#32;&#32;}
01689 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;regular&#32;case&#32;(not&#32;a&#32;jump)&#32;*/</emphasis>
01690 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a7d4ea6b61d0c157feca2afa59a9f877e">luaK_goiftrue</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;over&#32;block&#32;if&#32;condition&#32;is&#32;false&#32;*/</emphasis>
01691 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aeed63e1438983826777df4cadc063aee">enterblock</link>(fs,&#32;&amp;bl,&#32;0);
01692 &#32;&#32;&#32;&#32;jf&#32;=&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>;
01693 &#32;&#32;}
01694 &#32;&#32;<link linkend="_lparser_8c_1aff3c4f1970c0f3c50f37a8187a2414e3">statlist</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;&apos;then&apos;&#32;part&#32;*/</emphasis>
01695 &#32;&#32;<link linkend="_lparser_8c_1a9f9c2ed0786c3b036f177f2b33f4f79d">leaveblock</link>(fs);
01696 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a3f50a3a010dc1ba1401d460900575b47">TK_ELSE</link>&#32;||
01697 &#32;&#32;&#32;&#32;&#32;&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04af85f1d50bab033c17f7341b5e71f4d60">TK_ELSEIF</link>)&#32;&#32;<emphasis role="comment">/*&#32;followed&#32;by&#32;&apos;else&apos;/&apos;elseif&apos;?&#32;*/</emphasis>
01698 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a99718e3c19e193690f60b7595bee952e">luaK_concat</link>(fs,&#32;escapelist,&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>(fs));&#32;&#32;<emphasis role="comment">/*&#32;must&#32;jump&#32;over&#32;it&#32;*/</emphasis>
01699 &#32;&#32;<link linkend="_lcode_8c_1a5748ad3c940c7916a2586fab6181a197">luaK_patchtohere</link>(fs,&#32;jf);
01700 }
01701 
01702 
<anchor xml:id="_lparser_8c_source_1l01703"/><link linkend="_lparser_8c_1ae59a0e4b7bd8d539f377ee6f82eac19b">01703</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1ae59a0e4b7bd8d539f377ee6f82eac19b">ifstat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01704 &#32;&#32;<emphasis role="comment">/*&#32;ifstat&#32;-&gt;&#32;IF&#32;cond&#32;THEN&#32;block&#32;{ELSEIF&#32;cond&#32;THEN&#32;block}&#32;[ELSE&#32;block]&#32;END&#32;*/</emphasis>
01705 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01706 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;escapelist&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;&#32;&#32;<emphasis role="comment">/*&#32;exit&#32;list&#32;for&#32;finished&#32;parts&#32;*/</emphasis>
01707 &#32;&#32;<link linkend="_lparser_8c_1a51dbd956bff1ce06bb45b3e3d9fde83f">test_then_block</link>(ls,&#32;&amp;escapelist);&#32;&#32;<emphasis role="comment">/*&#32;IF&#32;cond&#32;THEN&#32;block&#32;*/</emphasis>
01708 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04af85f1d50bab033c17f7341b5e71f4d60">TK_ELSEIF</link>)
01709 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a51dbd956bff1ce06bb45b3e3d9fde83f">test_then_block</link>(ls,&#32;&amp;escapelist);&#32;&#32;<emphasis role="comment">/*&#32;ELSEIF&#32;cond&#32;THEN&#32;block&#32;*/</emphasis>
01710 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a3f50a3a010dc1ba1401d460900575b47">TK_ELSE</link>))
01711 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;&apos;else&apos;&#32;part&#32;*/</emphasis>
01712 &#32;&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a541ef482a7317bd2a54032f165d90db7">TK_END</link>,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a601b374145c8554a0dc2d1663cbdfeb1">TK_IF</link>,&#32;line);
01713 &#32;&#32;<link linkend="_lcode_8c_1a5748ad3c940c7916a2586fab6181a197">luaK_patchtohere</link>(fs,&#32;escapelist);&#32;&#32;<emphasis role="comment">/*&#32;patch&#32;escape&#32;list&#32;to&#32;&apos;if&apos;&#32;end&#32;*/</emphasis>
01714 }
01715 
01716 
<anchor xml:id="_lparser_8c_source_1l01717"/><link linkend="_lparser_8c_1a906778e7e7ae16a38c8c6b38bdc34f13">01717</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a906778e7e7ae16a38c8c6b38bdc34f13">localfunc</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01718 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;b;
01719 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01720 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fvar&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>;&#32;&#32;<emphasis role="comment">/*&#32;function&apos;s&#32;variable&#32;index&#32;*/</emphasis>
01721 &#32;&#32;<link linkend="_lparser_8c_1a89f5732cbee45d78cfec9dbd1a207bb7">new_localvar</link>(ls,&#32;<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls));&#32;&#32;<emphasis role="comment">/*&#32;new&#32;local&#32;variable&#32;*/</emphasis>
01722 &#32;&#32;<link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">adjustlocalvars</link>(ls,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;enter&#32;its&#32;scope&#32;*/</emphasis>
01723 &#32;&#32;<link linkend="_lparser_8c_1aa6a712055fa7e1b41488c71be4f55303">body</link>(ls,&#32;&amp;b,&#32;0,&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>);&#32;&#32;<emphasis role="comment">/*&#32;function&#32;created&#32;in&#32;next&#32;register&#32;*/</emphasis>
01724 &#32;&#32;<emphasis role="comment">/*&#32;debug&#32;information&#32;will&#32;only&#32;see&#32;the&#32;variable&#32;after&#32;this&#32;point!&#32;*/</emphasis>
01725 &#32;&#32;<link linkend="_lparser_8c_1af4e2a81c94d2b795fd0a4c4a2cd9d22f">localdebuginfo</link>(fs,&#32;fvar)-&gt;<link linkend="_struct_loc_var_1aede5156df384666bb10ffffe4e8c2d8f">startpc</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>;
01726 }
01727 
01728 
<anchor xml:id="_lparser_8c_source_1l01729"/><link linkend="_lparser_8c_1aacf507e8cbb1eb7a3b49474c510043a8">01729</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1aacf507e8cbb1eb7a3b49474c510043a8">getlocalattribute</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01730 &#32;&#32;<emphasis role="comment">/*&#32;ATTRIB&#32;-&gt;&#32;[&apos;&lt;&apos;&#32;Name&#32;&apos;&gt;&apos;]&#32;*/</emphasis>
01731 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>))&#32;{
01732 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*attr&#32;=&#32;<link linkend="_lobject_8h_1acb05d3ab238923581a9c629b8e11a6ac">getstr</link>(<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls));
01733 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a00410145409eca75b14b1f1c4f553ca0">checknext</link>(ls,&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>);
01734 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(attr,&#32;<emphasis role="stringliteral">&quot;const&quot;</emphasis>)&#32;==&#32;0)
01735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lparser_8h_1a6edb3863e15fbe2a86f0da27cd40dd36">RDKCONST</link>;&#32;&#32;<emphasis role="comment">/*&#32;read-only&#32;variable&#32;*/</emphasis>
01736 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(attr,&#32;<emphasis role="stringliteral">&quot;close&quot;</emphasis>)&#32;==&#32;0)
01737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lparser_8h_1aff76bd46e696b6c05c8ebcacbff3e436">RDKTOCLOSE</link>;&#32;&#32;<emphasis role="comment">/*&#32;to-be-closed&#32;variable&#32;*/</emphasis>
01738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01739 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1abe3b325f24edb9acdca694951cbcb4d8">luaK_semerror</link>(ls,
01740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8c_1a8e224db7123c74d695076a96d1bfda61">luaO_pushfstring</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;<emphasis role="stringliteral">&quot;unknown&#32;attribute&#32;&apos;%s&apos;&quot;</emphasis>,&#32;attr));
01741 &#32;&#32;}
01742 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lparser_8h_1a5def61221e8337c622aaede33e79e7ea">VDKREG</link>;&#32;&#32;<emphasis role="comment">/*&#32;regular&#32;variable&#32;*/</emphasis>
01743 }
01744 
01745 
<anchor xml:id="_lparser_8c_source_1l01746"/><link linkend="_lparser_8c_1a2940067b35656914fe3c7be633096a9b">01746</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a2940067b35656914fe3c7be633096a9b">checktoclose</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;level)&#32;{
01747 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(level&#32;!=&#32;-1)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;is&#32;there&#32;a&#32;to-be-closed&#32;variable?&#32;*/</emphasis>
01748 &#32;&#32;&#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01749 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ab92f39b4f46a9844ecab9d585d636bd4">markupval</link>(fs,&#32;level&#32;+&#32;1);
01750 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>-&gt;<link linkend="_struct_block_cnt_1acd0d502f314b8217f087b17b734240d4">insidetbc</link>&#32;=&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;in&#32;the&#32;scope&#32;of&#32;a&#32;to-be-closed&#32;variable&#32;*/</emphasis>
01751 &#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a45ba48df2b6802b55eb5eef6bc66b749">OP_TBC</link>,&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>(fs,&#32;level),&#32;0,&#32;0);
01752 &#32;&#32;}
01753 }
01754 
01755 
<anchor xml:id="_lparser_8c_source_1l01756"/><link linkend="_lparser_8c_1aedb81864a38588cc65a205ff4c07abfa">01756</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1aedb81864a38588cc65a205ff4c07abfa">localstat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01757 &#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;LOCAL&#32;ATTRIB&#32;NAME&#32;{&apos;,&apos;&#32;ATTRIB&#32;NAME}&#32;[&apos;=&apos;&#32;explist]&#32;*/</emphasis>
01758 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01759 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;toclose&#32;=&#32;-1;&#32;&#32;<emphasis role="comment">/*&#32;index&#32;of&#32;to-be-closed&#32;variable&#32;(if&#32;any)&#32;*/</emphasis>
01760 &#32;&#32;<link linkend="_union_vardesc">Vardesc</link>&#32;*var;&#32;&#32;<emphasis role="comment">/*&#32;last&#32;variable&#32;*/</emphasis>
01761 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vidx,&#32;kind;&#32;&#32;<emphasis role="comment">/*&#32;index&#32;and&#32;kind&#32;of&#32;last&#32;variable&#32;*/</emphasis>
01762 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nvars&#32;=&#32;0;
01763 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nexps;
01764 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;e;
01765 &#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
01766 &#32;&#32;&#32;&#32;vidx&#32;=&#32;<link linkend="_lparser_8c_1a89f5732cbee45d78cfec9dbd1a207bb7">new_localvar</link>(ls,&#32;<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls));
01767 &#32;&#32;&#32;&#32;kind&#32;=&#32;<link linkend="_lparser_8c_1aacf507e8cbb1eb7a3b49474c510043a8">getlocalattribute</link>(ls);
01768 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(fs,&#32;vidx)-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;=&#32;kind;
01769 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(kind&#32;==&#32;<link linkend="_lparser_8h_1aff76bd46e696b6c05c8ebcacbff3e436">RDKTOCLOSE</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;to-be-closed?&#32;*/</emphasis>
01770 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(toclose&#32;!=&#32;-1)&#32;&#32;<emphasis role="comment">/*&#32;one&#32;already&#32;present?&#32;*/</emphasis>
01771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1abe3b325f24edb9acdca694951cbcb4d8">luaK_semerror</link>(ls,&#32;<emphasis role="stringliteral">&quot;multiple&#32;to-be-closed&#32;variables&#32;in&#32;local&#32;list&quot;</emphasis>);
01772 &#32;&#32;&#32;&#32;&#32;&#32;toclose&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>&#32;+&#32;nvars;
01773 &#32;&#32;&#32;&#32;}
01774 &#32;&#32;&#32;&#32;nvars++;
01775 &#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>));
01776 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>))
01777 &#32;&#32;&#32;&#32;nexps&#32;=&#32;<link linkend="_lparser_8c_1a25966bcc2d6cf47dbb9e0251fb26d661">explist</link>(ls,&#32;&amp;e);
01778 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01779 &#32;&#32;&#32;&#32;e.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6">VVOID</link>;
01780 &#32;&#32;&#32;&#32;nexps&#32;=&#32;0;
01781 &#32;&#32;}
01782 &#32;&#32;var&#32;=&#32;<link linkend="_lparser_8c_1ae54e8d8f199763735b5175342fbce5ca">getlocalvardesc</link>(fs,&#32;vidx);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;last&#32;variable&#32;*/</emphasis>
01783 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nvars&#32;==&#32;nexps&#32;&amp;&amp;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;adjustments?&#32;*/</emphasis>
01784 &#32;&#32;&#32;&#32;&#32;&#32;var-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;==&#32;<link linkend="_lparser_8h_1a6edb3863e15fbe2a86f0da27cd40dd36">RDKCONST</link>&#32;&amp;&amp;&#32;&#32;<emphasis role="comment">/*&#32;last&#32;variable&#32;is&#32;const?&#32;*/</emphasis>
01785 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ae610aa01273d82b5603702ad3a3825a3">luaK_exp2const</link>(fs,&#32;&amp;e,&#32;&amp;var-&gt;<link linkend="_union_vardesc_1a815e30589587125079e138dcb9088545">k</link>))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;compile-time&#32;constant?&#32;*/</emphasis>
01786 &#32;&#32;&#32;&#32;var-&gt;<link linkend="_union_vardesc_1a8a9db6a891666ab631e1be19d4341e92">vd</link>.<link linkend="_union_vardesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;=&#32;<link linkend="_lparser_8h_1ae37149486c77ebc6d130a3a1d1b5942d">RDKCTC</link>;&#32;&#32;<emphasis role="comment">/*&#32;variable&#32;is&#32;a&#32;compile-time&#32;constant&#32;*/</emphasis>
01787 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">adjustlocalvars</link>(ls,&#32;nvars&#32;-&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;exclude&#32;last&#32;variable&#32;*/</emphasis>
01788 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1abc1218239fe21b5314b49ac06b25d2ef">nactvar</link>++;&#32;&#32;<emphasis role="comment">/*&#32;but&#32;count&#32;it&#32;*/</emphasis>
01789 &#32;&#32;}
01790 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01791 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a7dafcad9b819fe82292276b63a632e80">adjust_assign</link>(ls,&#32;nvars,&#32;nexps,&#32;&amp;e);
01792 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a4f84287f74dc67840aae694b6ace6998">adjustlocalvars</link>(ls,&#32;nvars);
01793 &#32;&#32;}
01794 &#32;&#32;<link linkend="_lparser_8c_1a2940067b35656914fe3c7be633096a9b">checktoclose</link>(ls,&#32;toclose);
01795 }
01796 
01797 
<anchor xml:id="_lparser_8c_source_1l01798"/><link linkend="_lparser_8c_1a9c06dde377cf16bda138da1cba949c82">01798</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a9c06dde377cf16bda138da1cba949c82">funcname</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>)&#32;{
01799 &#32;&#32;<emphasis role="comment">/*&#32;funcname&#32;-&gt;&#32;NAME&#32;{fieldsel}&#32;[&apos;:&apos;&#32;NAME]&#32;*/</emphasis>
01800 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ismethod&#32;=&#32;0;
01801 &#32;&#32;<link linkend="_lparser_8c_1a39a46ec796479bdd22eea51ddef11685">singlevar</link>(ls,&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
01802 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)
01803 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a749eb16d6a8c1bb6e94d4c0392e57374">fieldsel</link>(ls,&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
01804 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>)&#32;{
01805 &#32;&#32;&#32;&#32;ismethod&#32;=&#32;1;
01806 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a749eb16d6a8c1bb6e94d4c0392e57374">fieldsel</link>(ls,&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
01807 &#32;&#32;}
01808 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ismethod;
01809 }
01810 
01811 
<anchor xml:id="_lparser_8c_source_1l01812"/><link linkend="_lparser_8c_1a7ab22c159a4bdcda2bd652f01229111b">01812</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a7ab22c159a4bdcda2bd652f01229111b">funcstat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01813 &#32;&#32;<emphasis role="comment">/*&#32;funcstat&#32;-&gt;&#32;FUNCTION&#32;funcname&#32;body&#32;*/</emphasis>
01814 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ismethod;
01815 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>,&#32;b;
01816 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;FUNCTION&#32;*/</emphasis>
01817 &#32;&#32;ismethod&#32;=&#32;<link linkend="_lparser_8c_1a9c06dde377cf16bda138da1cba949c82">funcname</link>(ls,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>);
01818 &#32;&#32;<link linkend="_lparser_8c_1aa6a712055fa7e1b41488c71be4f55303">body</link>(ls,&#32;&amp;b,&#32;ismethod,&#32;line);
01819 &#32;&#32;<link linkend="_lcode_8c_1a31c85ce631d5ee0a691cb58a1bd360be">luaK_storevar</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>,&#32;&amp;b);
01820 &#32;&#32;<link linkend="_lcode_8c_1ab17c57ffa1dc5c51f0d67a4ae8a5f073">luaK_fixline</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>,&#32;line);&#32;&#32;<emphasis role="comment">/*&#32;definition&#32;&quot;happens&quot;&#32;in&#32;the&#32;first&#32;line&#32;*/</emphasis>
01821 }
01822 
01823 
<anchor xml:id="_lparser_8c_source_1l01824"/><link linkend="_lparser_8c_1a2bafac5e65f8e5de6e00d717bf90f091">01824</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a2bafac5e65f8e5de6e00d717bf90f091">exprstat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01825 &#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;func&#32;|&#32;assignment&#32;*/</emphasis>
01826 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01827 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_l_h_s__assign">LHS_assign</link>&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>;
01828 &#32;&#32;<link linkend="_lparser_8c_1adecf4ab651d795c1af76b75998a4dd9c">suffixedexp</link>(ls,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.v);
01829 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<emphasis role="charliteral">&apos;=&apos;</emphasis>&#32;||&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>)&#32;{&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;assignment&#32;?&#32;*/</emphasis>
01830 &#32;&#32;&#32;&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.prev&#32;=&#32;NULL;
01831 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a4edcfc19b8a94936c58860eded728be4">restassign</link>(ls,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>,&#32;1);
01832 &#32;&#32;}
01833 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;func&#32;*/</emphasis>
01834 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*inst;
01835 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aece9aca90eb75d99df8490bdb813bdd4">check_condition</link>(ls,&#32;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.v.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae61a8c04cfeabd756694cd13774e47b7">VCALL</link>,&#32;<emphasis role="stringliteral">&quot;syntax&#32;error&quot;</emphasis>);
01836 &#32;&#32;&#32;&#32;inst&#32;=&#32;&amp;<link linkend="_lcode_8h_1ae32808dba4795004b96e16024b1f9b2c">getinstruction</link>(fs,&#32;&amp;<link linkend="_struct_l_h_s__assign_1ab57b969e5510d4b9c4b367178fe464e3">v</link>.v);
01837 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a085f9af93bc2386ddb0b9fb53d5ff0b8">SETARG_C</link>(*inst,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;call&#32;statement&#32;uses&#32;no&#32;results&#32;*/</emphasis>
01838 &#32;&#32;}
01839 }
01840 
01841 
<anchor xml:id="_lparser_8c_source_1l01842"/><link linkend="_lparser_8c_1a7998fc603fbe151c85cf0ff9b5517ad6">01842</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a7998fc603fbe151c85cf0ff9b5517ad6">retstat</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01843 &#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;RETURN&#32;[explist]&#32;[&apos;;&apos;]&#32;*/</emphasis>
01844 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>;
01845 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;e;
01846 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nret;&#32;&#32;<emphasis role="comment">/*&#32;number&#32;of&#32;values&#32;being&#32;returned&#32;*/</emphasis>
01847 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;first&#32;=&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;first&#32;slot&#32;to&#32;be&#32;returned&#32;*/</emphasis>
01848 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a5be23689d7ea5fd2561c345df03fbf7c">block_follow</link>(ls,&#32;1)&#32;||&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;==&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>)
01849 &#32;&#32;&#32;&#32;nret&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;no&#32;values&#32;*/</emphasis>
01850 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01851 &#32;&#32;&#32;&#32;nret&#32;=&#32;<link linkend="_lparser_8c_1a25966bcc2d6cf47dbb9e0251fb26d661">explist</link>(ls,&#32;&amp;e);&#32;&#32;<emphasis role="comment">/*&#32;optional&#32;return&#32;values&#32;*/</emphasis>
01852 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a38d6bad3bcde3d124ca880d6a9d82ba6">hasmultret</link>(e.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>))&#32;{
01853 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a525c933202c545dff0b84a9d5325ff49">luaK_setmultret</link>(fs,&#32;&amp;e);
01854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e.<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae61a8c04cfeabd756694cd13774e47b7">VCALL</link>&#32;&amp;&amp;&#32;nret&#32;==&#32;1&#32;&amp;&amp;&#32;!fs-&gt;<link linkend="_struct_func_state_1a3da355c257be5d7a52ae3bd79416be5e">bl</link>-&gt;<link linkend="_struct_block_cnt_1acd0d502f314b8217f087b17b734240d4">insidetbc</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;tail&#32;call?&#32;*/</emphasis>
01855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a9ae2b84a40beacf053969ff426aae06f">SET_OPCODE</link>(<link linkend="_lcode_8h_1ae32808dba4795004b96e16024b1f9b2c">getinstruction</link>(fs,&amp;e),&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7aff2c07ebfd82aa22cc247e9855a16069">OP_TAILCALL</link>);
01856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lopcodes_8h_1a1d504abc1e2246548f89977210dce0b9">GETARG_A</link>(<link linkend="_lcode_8h_1ae32808dba4795004b96e16024b1f9b2c">getinstruction</link>(fs,&amp;e))&#32;==&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(fs));
01857 &#32;&#32;&#32;&#32;&#32;&#32;}
01858 &#32;&#32;&#32;&#32;&#32;&#32;nret&#32;=&#32;<link linkend="_lua_8h_1ace3545adc11664c2f2b152fbe8b6283c">LUA_MULTRET</link>;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;all&#32;values&#32;*/</emphasis>
01859 &#32;&#32;&#32;&#32;}
01860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nret&#32;==&#32;1)&#32;&#32;<emphasis role="comment">/*&#32;only&#32;one&#32;single&#32;value?&#32;*/</emphasis>
01862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;&amp;e);&#32;&#32;<emphasis role="comment">/*&#32;can&#32;use&#32;original&#32;slot&#32;*/</emphasis>
01863 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;values&#32;must&#32;go&#32;to&#32;the&#32;top&#32;of&#32;the&#32;stack&#32;*/</emphasis>
01864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;&amp;e);
01865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(nret&#32;==&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;-&#32;first);
01866 &#32;&#32;&#32;&#32;&#32;&#32;}
01867 &#32;&#32;&#32;&#32;}
01868 &#32;&#32;}
01869 &#32;&#32;<link linkend="_lcode_8c_1af04e0d7f5a543cbdc60d5ad981333bcf">luaK_ret</link>(fs,&#32;first,&#32;nret);
01870 &#32;&#32;<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;optional&#32;semicolon&#32;*/</emphasis>
01871 }
01872 
01873 
<anchor xml:id="_lparser_8c_source_1l01874"/><link linkend="_lparser_8c_1ac29df3687aea9407dcfec478092fce4c">01874</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1ac29df3687aea9407dcfec478092fce4c">statement</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls)&#32;{
01875 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1abe06567f8b14c148f18771aacccf1be1">linenumber</link>;&#32;&#32;<emphasis role="comment">/*&#32;may&#32;be&#32;needed&#32;for&#32;error&#32;messages&#32;*/</emphasis>
01876 &#32;&#32;<link linkend="_lparser_8c_1ab61308992bd6c2013519fdebd0d52704">enterlevel</link>(ls);
01877 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>)&#32;{
01878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;;&apos;</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;&apos;;&apos;&#32;(empty&#32;statement)&#32;*/</emphasis>
01879 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;&apos;;&apos;&#32;*/</emphasis>
01880 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01881 &#32;&#32;&#32;&#32;}
01882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a601b374145c8554a0dc2d1663cbdfeb1">TK_IF</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;ifstat&#32;*/</emphasis>
01883 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ae59a0e4b7bd8d539f377ee6f82eac19b">ifstat</link>(ls,&#32;line);
01884 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01885 &#32;&#32;&#32;&#32;}
01886 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a592e99387742b5748aa5e341c99dffd0">TK_WHILE</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;whilestat&#32;*/</emphasis>
01887 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1af24623e7aa293515c8293aaf892de531">whilestat</link>(ls,&#32;line);
01888 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01889 &#32;&#32;&#32;&#32;}
01890 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a2fbaee0c1e87c30a1809ff22893fe2f9">TK_DO</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;DO&#32;block&#32;END&#32;*/</emphasis>
01891 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;DO&#32;*/</emphasis>
01892 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>(ls);
01893 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1abbe267f2acab7a24f25b89b7782b21a6">check_match</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a541ef482a7317bd2a54032f165d90db7">TK_END</link>,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a2fbaee0c1e87c30a1809ff22893fe2f9">TK_DO</link>,&#32;line);
01894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01895 &#32;&#32;&#32;&#32;}
01896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a7dcf533a644fc9cb697137a8a9b54f4b">TK_FOR</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;forstat&#32;*/</emphasis>
01897 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1af783542828ac360981e0ce0f55abc630">forstat</link>(ls,&#32;line);
01898 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01899 &#32;&#32;&#32;&#32;}
01900 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a9f9929bcc6f4a87310869eaf9efed4cd">TK_REPEAT</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;repeatstat&#32;*/</emphasis>
01901 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a8638807967aa30e7700834f6bd4aaa5d">repeatstat</link>(ls,&#32;line);
01902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01903 &#32;&#32;&#32;&#32;}
01904 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04aafc8fa070d8d0bb9569b875cbc6b1a8c">TK_FUNCTION</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;funcstat&#32;*/</emphasis>
01905 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a7ab22c159a4bdcda2bd652f01229111b">funcstat</link>(ls,&#32;line);
01906 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01907 &#32;&#32;&#32;&#32;}
01908 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a5d6f51dd7b248ee46da5de8e33f34992">TK_LOCAL</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;localstat&#32;*/</emphasis>
01909 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;LOCAL&#32;*/</emphasis>
01910 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a73a8be4e1269883a7b1f101bc14902e3">testnext</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04aafc8fa070d8d0bb9569b875cbc6b1a8c">TK_FUNCTION</link>))&#32;&#32;<emphasis role="comment">/*&#32;local&#32;function?&#32;*/</emphasis>
01911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a906778e7e7ae16a38c8c6b38bdc34f13">localfunc</link>(ls);
01912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1aedb81864a38588cc65a205ff4c07abfa">localstat</link>(ls);
01914 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01915 &#32;&#32;&#32;&#32;}
01916 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a3a767e0c4ce0407785d87a1a56980de2">TK_DBCOLON</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;label&#32;*/</emphasis>
01917 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;double&#32;colon&#32;*/</emphasis>
01918 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a20b1ca0b6642f6a79d5cc5abeb5dae63">labelstat</link>(ls,&#32;<link linkend="_lparser_8c_1ac6a77e92851fefeaf3facfdc47e5e39d">str_checkname</link>(ls),&#32;line);
01919 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01920 &#32;&#32;&#32;&#32;}
01921 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04aba4fafc284c6c6aa99340efdba0b76e8">TK_RETURN</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;retstat&#32;*/</emphasis>
01922 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;RETURN&#32;*/</emphasis>
01923 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a7998fc603fbe151c85cf0ff9b5517ad6">retstat</link>(ls);
01924 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01925 &#32;&#32;&#32;&#32;}
01926 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a37065a9cb3cc1cc8a17537dc1ee5e0f0">TK_BREAK</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;breakstat&#32;*/</emphasis>
01927 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1ae0650c2b4b5d311a24bd0ddb7b267db3">breakstat</link>(ls);
01928 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01929 &#32;&#32;&#32;&#32;}
01930 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04af41cf088c658a62b2381424416171445">TK_GOTO</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;&apos;goto&apos;&#32;NAME&#32;*/</emphasis>
01931 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;&apos;goto&apos;&#32;*/</emphasis>
01932 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a55bae7d03576b713ff5460644f102dfd">gotostat</link>(ls);
01933 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01934 &#32;&#32;&#32;&#32;}
01935 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;stat&#32;-&gt;&#32;func&#32;|&#32;assignment&#32;*/</emphasis>
01936 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a2bafac5e65f8e5de6e00d717bf90f091">exprstat</link>(ls);
01937 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01938 &#32;&#32;&#32;&#32;}
01939 &#32;&#32;}
01940 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1ad11e004e7f14af7e281b6da69d08ad7a">maxstacksize</link>&#32;&gt;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;&amp;&amp;
01941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;&gt;=&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>));
01942 &#32;&#32;ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;=&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(ls-&gt;<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>);&#32;&#32;<emphasis role="comment">/*&#32;free&#32;registers&#32;*/</emphasis>
01943 &#32;&#32;<link linkend="_lparser_8c_1a147b3ba4d2004b4b4ee7260661ec31e1">leavelevel</link>(ls);
01944 }
01945 
01946 <emphasis role="comment">/*&#32;}======================================================================&#32;*/</emphasis>
01947 
01948 
01949 <emphasis role="comment">/*</emphasis>
01950 <emphasis role="comment">**&#32;compiles&#32;the&#32;main&#32;function,&#32;which&#32;is&#32;a&#32;regular&#32;vararg&#32;function&#32;with&#32;an</emphasis>
01951 <emphasis role="comment">**&#32;upvalue&#32;named&#32;LUA_ENV</emphasis>
01952 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lparser_8c_source_1l01953"/><link linkend="_lparser_8c_1a011959c631cc7cfc75646a0fddc1a149">01953</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lparser_8c_1a011959c631cc7cfc75646a0fddc1a149">mainfunc</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
01954 &#32;&#32;<link linkend="_struct_block_cnt">BlockCnt</link>&#32;bl;
01955 &#32;&#32;<link linkend="_struct_upvaldesc">Upvaldesc</link>&#32;*env;
01956 &#32;&#32;<link linkend="_lparser_8c_1ac89cbbdfd75804eae46bce05f8381915">open_func</link>(ls,&#32;fs,&#32;&amp;bl);
01957 &#32;&#32;<link linkend="_lparser_8c_1a71bb47764e4103bbd98a4285ab97ca5d">setvararg</link>(fs,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;main&#32;function&#32;is&#32;always&#32;declared&#32;vararg&#32;*/</emphasis>
01958 &#32;&#32;env&#32;=&#32;<link linkend="_lparser_8c_1a355e8b6a68c23cc5a65e40cd276c38b1">allocupvalue</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;...set&#32;environment&#32;upvalue&#32;*/</emphasis>
01959 &#32;&#32;env-&gt;<link linkend="_struct_upvaldesc_1acfbdd39f714ffdb714bddda46b7ae744">instack</link>&#32;=&#32;1;
01960 &#32;&#32;env-&gt;<link linkend="_struct_upvaldesc_1a6234b462bcd2f6c2e6f5e537b2793b84">idx</link>&#32;=&#32;0;
01961 &#32;&#32;env-&gt;<link linkend="_struct_upvaldesc_1a85f4000f0b6d1a7e3ff5f1612472db29">kind</link>&#32;=&#32;<link linkend="_lparser_8h_1a5def61221e8337c622aaede33e79e7ea">VDKREG</link>;
01962 &#32;&#32;env-&gt;<link linkend="_struct_upvaldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>&#32;=&#32;ls-&gt;<link linkend="_struct_lex_state_1a67ee27111e3e3fb2fe5304d91f390a7f">envn</link>;
01963 &#32;&#32;<link linkend="_lgc_8h_1a90ac4f3c7085a418025edcc7215e8983">luaC_objbarrier</link>(ls-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>,&#32;env-&gt;<link linkend="_struct_upvaldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>);
01964 &#32;&#32;<link linkend="_llex_8c_1a8b9f2aa3f74c4e2f814d860dc7f5a6a8">luaX_next</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;read&#32;first&#32;token&#32;*/</emphasis>
01965 &#32;&#32;<link linkend="_lparser_8c_1aff3c4f1970c0f3c50f37a8187a2414e3">statlist</link>(ls);&#32;&#32;<emphasis role="comment">/*&#32;parse&#32;main&#32;body&#32;*/</emphasis>
01966 &#32;&#32;<link linkend="_lparser_8c_1a2c856a5873c90f45525cf0d9abebbfde">check</link>(ls,&#32;<link linkend="_llex_8h_1ae5bd761f37716726f95e4be16a08ac04a9fcd34e2e50a0afb82f0dae65836187b">TK_EOS</link>);
01967 &#32;&#32;<link linkend="_lparser_8c_1a46bd6da1ec8052eeaf6fd524199ca72a">close_func</link>(ls);
01968 }
01969 
01970 
<anchor xml:id="_lparser_8c_source_1l01971"/><link linkend="_lparser_8h_1a71163cae919941bd5b31805e92de2e9b">01971</link> <link linkend="_struct_l_closure">LClosure</link>&#32;*<link linkend="_lparser_8c_1ab1aebed32ae816b2979db5b8dd2d1554">luaY_parser</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<link linkend="_struct_zio">ZIO</link>&#32;*z,&#32;<link linkend="_struct_mbuffer">Mbuffer</link>&#32;*buff,
01972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_dyndata">Dyndata</link>&#32;*dyd,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;firstchar)&#32;{
01973 &#32;&#32;<link linkend="_struct_lex_state">LexState</link>&#32;lexstate;
01974 &#32;&#32;<link linkend="_struct_func_state">FuncState</link>&#32;funcstate;
01975 &#32;&#32;<link linkend="_struct_l_closure">LClosure</link>&#32;*cl&#32;=&#32;<link linkend="_lfunc_8c_1a9fb730389493e9e60bbf0b6809061af5">luaF_newLclosure</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;create&#32;main&#32;closure&#32;*/</emphasis>
01976 &#32;&#32;<link linkend="_lobject_8h_1a3e4e5270b0c50551ed8c3a0367f56d14">setclLvalue2s</link>(L,&#32;L-&gt;<link linkend="_structlua___state_1afeb5dbe379fc406b35fe5f8a5fcfc5d7">top</link>,&#32;cl);&#32;&#32;<emphasis role="comment">/*&#32;anchor&#32;it&#32;(to&#32;avoid&#32;being&#32;collected)&#32;*/</emphasis>
01977 &#32;&#32;<link linkend="_ldo_8c_1a4dd006aa3210fdc854d0441e2a98c9af">luaD_inctop</link>(L);
01978 &#32;&#32;lexstate.<link linkend="_struct_lex_state_1ae8d2bc73408dae7cb98274d0da3fe172">h</link>&#32;=&#32;<link linkend="_ltable_8c_1a6c97fb2d6a020b0a6f852562fef93d97">luaH_new</link>(L);&#32;&#32;<emphasis role="comment">/*&#32;create&#32;table&#32;for&#32;scanner&#32;*/</emphasis>
01979 &#32;&#32;<link linkend="_lobject_8h_1aea789832f6c549f64cb3903216a7aeac">sethvalue2s</link>(L,&#32;L-&gt;<link linkend="_structlua___state_1afeb5dbe379fc406b35fe5f8a5fcfc5d7">top</link>,&#32;lexstate.<link linkend="_struct_lex_state_1ae8d2bc73408dae7cb98274d0da3fe172">h</link>);&#32;&#32;<emphasis role="comment">/*&#32;anchor&#32;it&#32;*/</emphasis>
01980 &#32;&#32;<link linkend="_ldo_8c_1a4dd006aa3210fdc854d0441e2a98c9af">luaD_inctop</link>(L);
01981 &#32;&#32;funcstate.<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>&#32;=&#32;cl-&gt;<link linkend="_struct_l_closure_1aed1f50b9bdc5ce4c7cfa49529472b42c">p</link>&#32;=&#32;<link linkend="_lfunc_8c_1a4ffd9d8ef515a7f785d007de7ceb9e4f">luaF_newproto</link>(L);
01982 &#32;&#32;<link linkend="_lgc_8h_1a90ac4f3c7085a418025edcc7215e8983">luaC_objbarrier</link>(L,&#32;cl,&#32;cl-&gt;<link linkend="_struct_l_closure_1aed1f50b9bdc5ce4c7cfa49529472b42c">p</link>);
01983 &#32;&#32;funcstate.<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a47b5f25d6c53f3892e43702659c6de69">source</link>&#32;=&#32;<link linkend="_lstring_8c_1a6d47e53be6b8e58202bb927752f4824b">luaS_new</link>(L,&#32;name);&#32;&#32;<emphasis role="comment">/*&#32;create&#32;and&#32;anchor&#32;TString&#32;*/</emphasis>
01984 &#32;&#32;<link linkend="_lgc_8h_1a90ac4f3c7085a418025edcc7215e8983">luaC_objbarrier</link>(L,&#32;funcstate.<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>,&#32;funcstate.<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a47b5f25d6c53f3892e43702659c6de69">source</link>);
01985 &#32;&#32;lexstate.<link linkend="_struct_lex_state_1a95ff497fc7c445d1bcd30c247eff828a">buff</link>&#32;=&#32;buff;
01986 &#32;&#32;lexstate.<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>&#32;=&#32;dyd;
01987 &#32;&#32;dyd-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;=&#32;dyd-&gt;<link linkend="_struct_dyndata_1a4c6dec0d9e4a816e2717a8b8534afaed">gt</link>.<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;=&#32;dyd-&gt;<link linkend="_struct_dyndata_1afcc3242d2f2c467f33dbeac521a9e861">label</link>.<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;=&#32;0;
01988 &#32;&#32;<link linkend="_llex_8c_1a169c85d08461f83e3f8a8c32dcb3d151">luaX_setinput</link>(L,&#32;&amp;lexstate,&#32;z,&#32;funcstate.<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a47b5f25d6c53f3892e43702659c6de69">source</link>,&#32;firstchar);
01989 &#32;&#32;<link linkend="_lparser_8c_1a011959c631cc7cfc75646a0fddc1a149">mainfunc</link>(&amp;lexstate,&#32;&amp;funcstate);
01990 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!funcstate.<link linkend="_struct_func_state_1a5fa27b262907fd2c729f9bab5f6c87d8">prev</link>&#32;&amp;&amp;&#32;funcstate.<link linkend="_struct_func_state_1a4709d4e7654d3620c605e6be84a96c3b">nups</link>&#32;==&#32;1&#32;&amp;&amp;&#32;!lexstate.<link linkend="_struct_lex_state_1a99c527337ae84b128baaa1006f44d987">fs</link>);
01991 &#32;&#32;<emphasis role="comment">/*&#32;all&#32;scopes&#32;should&#32;be&#32;correctly&#32;finished&#32;*/</emphasis>
01992 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(dyd-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;==&#32;0&#32;&amp;&amp;&#32;dyd-&gt;<link linkend="_struct_dyndata_1a4c6dec0d9e4a816e2717a8b8534afaed">gt</link>.<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;==&#32;0&#32;&amp;&amp;&#32;dyd-&gt;<link linkend="_struct_dyndata_1afcc3242d2f2c467f33dbeac521a9e861">label</link>.<link linkend="_struct_labellist_1a76f11d9a0a47b94f72c2d0e77fb32240">n</link>&#32;==&#32;0);
01993 &#32;&#32;L-&gt;<link linkend="_structlua___state_1afeb5dbe379fc406b35fe5f8a5fcfc5d7">top</link>--;&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;scanner&apos;s&#32;table&#32;*/</emphasis>
01994 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cl;&#32;&#32;<emphasis role="comment">/*&#32;closure&#32;is&#32;on&#32;the&#32;stack,&#32;too&#32;*/</emphasis>
01995 }
01996 
</programlisting></section>
