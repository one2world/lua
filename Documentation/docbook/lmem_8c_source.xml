<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lmem_8c_source" xml:lang="zh">
<title>D:/gitworkspace/lua/lmem.c</title>
<programlisting>00001 <emphasis role="comment">/*</emphasis>
00002 <emphasis role="comment">**&#32;$Id:&#32;lmem.c&#32;$</emphasis>
00003 <emphasis role="comment">**&#32;Interface&#32;to&#32;Memory&#32;Manager</emphasis>
00004 <emphasis role="comment">**&#32;See&#32;Copyright&#32;Notice&#32;in&#32;lua.h</emphasis>
00005 <emphasis role="comment">*/</emphasis>
00006 
<anchor xml:id="_lmem_8c_source_1l00007"/><link linkend="_lmem_8c_1adb2b6ef72119096fe9a546091881ab11">00007</link> <emphasis role="preprocessor">#define&#32;lmem_c</emphasis>
<anchor xml:id="_lmem_8c_source_1l00008"/><link linkend="_lmem_8c_1abf0b3947b59218777a8e928a10be205b">00008</link> <emphasis role="preprocessor">#define&#32;LUA_CORE</emphasis>
00009 
00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lprefix_8h">lprefix.h</link>&quot;</emphasis>
00011 
00012 
00013 <emphasis role="preprocessor">#include&#32;&lt;stddef.h&gt;</emphasis>
00014 
00015 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lua_8h">lua.h</link>&quot;</emphasis>
00016 
00017 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ldebug_8h">ldebug.h</link>&quot;</emphasis>
00018 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ldo_8h">ldo.h</link>&quot;</emphasis>
00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lgc_8h">lgc.h</link>&quot;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lmem_8h">lmem.h</link>&quot;</emphasis>
00021 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lobject_8h">lobject.h</link>&quot;</emphasis>
00022 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lstate_8h">lstate.h</link>&quot;</emphasis>
00023 
00024 
00025 <emphasis role="preprocessor">#if&#32;defined(EMERGENCYGCTESTS)</emphasis>
00026 <emphasis role="comment">/*</emphasis>
00027 <emphasis role="comment">**&#32;First&#32;allocation&#32;will&#32;fail&#32;whenever&#32;not&#32;building&#32;initial&#32;state</emphasis>
00028 <emphasis role="comment">**&#32;and&#32;not&#32;shrinking&#32;a&#32;block.&#32;(This&#32;fail&#32;will&#32;trigger&#32;&apos;tryagain&apos;&#32;and</emphasis>
00029 <emphasis role="comment">**&#32;a&#32;full&#32;GC&#32;cycle&#32;at&#32;every&#32;allocation.)</emphasis>
00030 <emphasis role="comment">*/</emphasis>
00031 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lmem_8c_1ab28b0855c7a625f9f245613df749b115">firsttry</link>&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;os,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;ns)&#32;{
00032 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lobject_8h_1a39af019fafa202841da3bf7c427bf090">ttisnil</link>(&amp;g-&gt;<link linkend="_structglobal___state_1a5c7c7d05244a09ddf235150da6f8f995">nilvalue</link>)&#32;&amp;&amp;&#32;ns&#32;&gt;&#32;os)
00033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;fail&#32;*/</emphasis>
00034 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;normal&#32;allocation&#32;*/</emphasis>
00035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*g-&gt;<link linkend="_structglobal___state_1aded8ba234ad5c0f907e3b70c935e28b6">frealloc</link>)(g-&gt;<link linkend="_structglobal___state_1a6c4e6337ac6cb9aab6e53aa909764129">ud</link>,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;os,&#32;ns);
00036 }
00037 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_lmem_8c_source_1l00038"/><link linkend="_lmem_8c_1ab28b0855c7a625f9f245613df749b115">00038</link> <emphasis role="preprocessor">#define&#32;firsttry(g,block,os,ns)&#32;&#32;&#32;&#32;((*g-&gt;frealloc)(g-&gt;ud,&#32;block,&#32;os,&#32;ns))</emphasis>
00039 <emphasis role="preprocessor">#endif</emphasis>
00040 
00041 
00042 
00043 
00044 
00045 <emphasis role="comment">/*</emphasis>
00046 <emphasis role="comment">**&#32;About&#32;the&#32;realloc&#32;function:</emphasis>
00047 <emphasis role="comment">**&#32;void&#32;*frealloc&#32;(void&#32;*ud,&#32;void&#32;*ptr,&#32;size_t&#32;osize,&#32;size_t&#32;nsize);</emphasis>
00048 <emphasis role="comment">**&#32;(&apos;osize&apos;&#32;is&#32;the&#32;old&#32;size,&#32;&apos;nsize&apos;&#32;is&#32;the&#32;new&#32;size)</emphasis>
00049 <emphasis role="comment">**</emphasis>
00050 <emphasis role="comment">**&#32;-&#32;frealloc(ud,&#32;p,&#32;x,&#32;0)&#32;frees&#32;the&#32;block&#32;&apos;p&apos;&#32;and&#32;returns&#32;NULL.</emphasis>
00051 <emphasis role="comment">**&#32;Particularly,&#32;frealloc(ud,&#32;NULL,&#32;0,&#32;0)&#32;does&#32;nothing,</emphasis>
00052 <emphasis role="comment">**&#32;which&#32;is&#32;equivalent&#32;to&#32;free(NULL)&#32;in&#32;ISO&#32;C.</emphasis>
00053 <emphasis role="comment">**</emphasis>
00054 <emphasis role="comment">**&#32;-&#32;frealloc(ud,&#32;NULL,&#32;x,&#32;s)&#32;creates&#32;a&#32;new&#32;block&#32;of&#32;size&#32;&apos;s&apos;</emphasis>
00055 <emphasis role="comment">**&#32;(no&#32;matter&#32;&apos;x&apos;).&#32;Returns&#32;NULL&#32;if&#32;it&#32;cannot&#32;create&#32;the&#32;new&#32;block.</emphasis>
00056 <emphasis role="comment">**</emphasis>
00057 <emphasis role="comment">**&#32;-&#32;otherwise,&#32;frealloc(ud,&#32;b,&#32;x,&#32;y)&#32;reallocates&#32;the&#32;block&#32;&apos;b&apos;&#32;from</emphasis>
00058 <emphasis role="comment">**&#32;size&#32;&apos;x&apos;&#32;to&#32;size&#32;&apos;y&apos;.&#32;Returns&#32;NULL&#32;if&#32;it&#32;cannot&#32;reallocate&#32;the</emphasis>
00059 <emphasis role="comment">**&#32;block&#32;to&#32;the&#32;new&#32;size.</emphasis>
00060 <emphasis role="comment">*/</emphasis>
00061 
00062 
00063 
00064 
00065 <emphasis role="comment">/*</emphasis>
00066 <emphasis role="comment">**&#32;{==================================================================</emphasis>
00067 <emphasis role="comment">**&#32;Functions&#32;to&#32;allocate/deallocate&#32;arrays&#32;for&#32;the&#32;Parser</emphasis>
00068 <emphasis role="comment">**&#32;===================================================================</emphasis>
00069 <emphasis role="comment">*/</emphasis>
00070 
00071 <emphasis role="comment">/*</emphasis>
00072 <emphasis role="comment">**&#32;Minimum&#32;size&#32;for&#32;arrays&#32;during&#32;parsing,&#32;to&#32;avoid&#32;overhead&#32;of</emphasis>
00073 <emphasis role="comment">**&#32;reallocating&#32;to&#32;size&#32;1,&#32;then&#32;2,&#32;and&#32;then&#32;4.&#32;All&#32;these&#32;arrays</emphasis>
00074 <emphasis role="comment">**&#32;will&#32;be&#32;reallocated&#32;to&#32;exact&#32;sizes&#32;or&#32;erased&#32;when&#32;parsing&#32;ends.</emphasis>
00075 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lmem_8c_source_1l00076"/><link linkend="_lmem_8c_1ad0c497dab6f56823e95b1e5e0c4b35a8">00076</link> <emphasis role="preprocessor">#define&#32;MINSIZEARRAY&#32;&#32;&#32;&#32;4</emphasis>
00077 
00078 
<anchor xml:id="_lmem_8c_source_1l00079"/><link linkend="_lmem_8h_1a28fa4e4a69de0a640dd25c23fd3aa721">00079</link> <emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lmem_8c_1a30dcbc002fb19db04580cc7762d9a65c">luaM_growaux_</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nelems,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*psize,
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size_elems,&#32;<emphasis role="keywordtype">int</emphasis>&#32;limit,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*what)&#32;{
00081 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*newblock;
00082 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;size&#32;=&#32;*psize;
00083 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nelems&#32;+&#32;1&#32;&lt;=&#32;size)&#32;&#32;<emphasis role="comment">/*&#32;does&#32;one&#32;extra&#32;element&#32;still&#32;fit?&#32;*/</emphasis>
00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>;&#32;&#32;<emphasis role="comment">/*&#32;nothing&#32;to&#32;be&#32;done&#32;*/</emphasis>
00085 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&gt;=&#32;limit&#32;/&#32;2)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;cannot&#32;double&#32;it?&#32;*/</emphasis>
00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llimits_8h_1ac6c45889010c1bd68631771b64f18101">unlikely</link>(size&#32;&gt;=&#32;limit))&#32;&#32;<emphasis role="comment">/*&#32;cannot&#32;grow&#32;even&#32;a&#32;little?&#32;*/</emphasis>
00087 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_ldebug_8c_1a88d38ca5da2e7a1492fc9d5ad70c32c5">luaG_runerror</link>(L,&#32;<emphasis role="stringliteral">&quot;too&#32;many&#32;%s&#32;(limit&#32;is&#32;%d)&quot;</emphasis>,&#32;what,&#32;limit);
00088 &#32;&#32;&#32;&#32;size&#32;=&#32;limit;&#32;&#32;<emphasis role="comment">/*&#32;still&#32;have&#32;at&#32;least&#32;one&#32;free&#32;place&#32;*/</emphasis>
00089 &#32;&#32;}
00090 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00091 &#32;&#32;&#32;&#32;size&#32;*=&#32;2;
00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&lt;&#32;<link linkend="_lmem_8c_1ad0c497dab6f56823e95b1e5e0c4b35a8">MINSIZEARRAY</link>)
00093 &#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;<link linkend="_lmem_8c_1ad0c497dab6f56823e95b1e5e0c4b35a8">MINSIZEARRAY</link>;&#32;&#32;<emphasis role="comment">/*&#32;minimum&#32;size&#32;*/</emphasis>
00094 &#32;&#32;}
00095 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(nelems&#32;+&#32;1&#32;&lt;=&#32;size&#32;&amp;&amp;&#32;size&#32;&lt;=&#32;limit);
00096 &#32;&#32;<emphasis role="comment">/*&#32;&apos;limit&apos;&#32;ensures&#32;that&#32;multiplication&#32;will&#32;not&#32;overflow&#32;*/</emphasis>
00097 &#32;&#32;newblock&#32;=&#32;<link linkend="_lmem_8c_1adf85a6fc8395278dd72f0ef6ba60934b">luaM_saferealloc_</link>(L,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>(*psize)&#32;*&#32;size_elems,
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>(size)&#32;*&#32;size_elems);
00099 &#32;&#32;*psize&#32;=&#32;size;&#32;&#32;<emphasis role="comment">/*&#32;update&#32;only&#32;when&#32;everything&#32;else&#32;is&#32;OK&#32;*/</emphasis>
00100 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newblock;
00101 }
00102 
00103 
00104 <emphasis role="comment">/*</emphasis>
00105 <emphasis role="comment">**&#32;In&#32;prototypes,&#32;the&#32;size&#32;of&#32;the&#32;array&#32;is&#32;also&#32;its&#32;number&#32;of</emphasis>
00106 <emphasis role="comment">**&#32;elements&#32;(to&#32;save&#32;memory).&#32;So,&#32;if&#32;it&#32;cannot&#32;shrink&#32;an&#32;array</emphasis>
00107 <emphasis role="comment">**&#32;to&#32;its&#32;number&#32;of&#32;elements,&#32;the&#32;only&#32;option&#32;is&#32;to&#32;raise&#32;an</emphasis>
00108 <emphasis role="comment">**&#32;error.</emphasis>
00109 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lmem_8c_source_1l00110"/><link linkend="_lmem_8h_1a84227d0880b31ba10479080cb096b3d2">00110</link> <emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lmem_8c_1a895840cef509924846e0194c4cc22155">luaM_shrinkvector_</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*size,
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;final_n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;size_elem)&#32;{
00112 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*newblock;
00113 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;oldsize&#32;=&#32;<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>((*size)&#32;*&#32;size_elem);
00114 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;newsize&#32;=&#32;<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>(final_n&#32;*&#32;size_elem);
00115 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(newsize&#32;&lt;=&#32;oldsize);
00116 &#32;&#32;newblock&#32;=&#32;<link linkend="_lmem_8c_1adf85a6fc8395278dd72f0ef6ba60934b">luaM_saferealloc_</link>(L,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;oldsize,&#32;newsize);
00117 &#32;&#32;*size&#32;=&#32;final_n;
00118 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newblock;
00119 }
00120 
00121 <emphasis role="comment">/*&#32;}==================================================================&#32;*/</emphasis>
00122 
00123 
<anchor xml:id="_lmem_8c_source_1l00124"/><link linkend="_lmem_8h_1a23b8703b7b50e1c5dd37d41569a09a9a">00124</link> <link linkend="_llimits_8h_1a9f743fcc9a5278cb9ee10355f09f7302">l_noret</link>&#32;<link linkend="_lmem_8c_1a8fc7df43dd830ccbe7581fd53f65bdbe">luaM_toobig</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00125 &#32;&#32;<link linkend="_ldebug_8c_1a88d38ca5da2e7a1492fc9d5ad70c32c5">luaG_runerror</link>(L,&#32;<emphasis role="stringliteral">&quot;memory&#32;allocation&#32;error:&#32;block&#32;too&#32;big&quot;</emphasis>);
00126 }
00127 
00128 
00129 <emphasis role="comment">/*</emphasis>
00130 <emphasis role="comment">**&#32;Free&#32;memory</emphasis>
00131 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lmem_8c_source_1l00132"/><link linkend="_lmem_8h_1a1596632e07c593bd9558ee4920fbe5de">00132</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lmem_8c_1a36b12d49a937e5de982e2a2a135e6824">luaM_free_</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;osize)&#32;{
00133 &#32;&#32;<link linkend="_structglobal___state">global_State</link>&#32;*g&#32;=&#32;<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L);
00134 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>((osize&#32;==&#32;0)&#32;==&#32;(<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>&#32;==&#32;NULL));
00135 &#32;&#32;(*g-&gt;<link linkend="_structglobal___state_1aded8ba234ad5c0f907e3b70c935e28b6">frealloc</link>)(g-&gt;<link linkend="_structglobal___state_1a6c4e6337ac6cb9aab6e53aa909764129">ud</link>,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;osize,&#32;0);
00136 &#32;&#32;g-&gt;<link linkend="_structglobal___state_1ae466d806319d4ba1b672bbff60f369f9">GCdebt</link>&#32;-=&#32;osize;
00137 }
00138 
00139 
00140 <emphasis role="comment">/*</emphasis>
00141 <emphasis role="comment">**&#32;In&#32;case&#32;of&#32;allocation&#32;fail,&#32;this&#32;function&#32;will&#32;call&#32;the&#32;GC&#32;to&#32;try</emphasis>
00142 <emphasis role="comment">**&#32;to&#32;free&#32;some&#32;memory&#32;and&#32;then&#32;try&#32;the&#32;allocation&#32;again.</emphasis>
00143 <emphasis role="comment">**&#32;(It&#32;should&#32;not&#32;be&#32;called&#32;when&#32;shrinking&#32;a&#32;block,&#32;because&#32;then&#32;the</emphasis>
00144 <emphasis role="comment">**&#32;interpreter&#32;may&#32;be&#32;in&#32;the&#32;middle&#32;of&#32;a&#32;collection&#32;step.)</emphasis>
00145 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lmem_8c_source_1l00146"/><link linkend="_lmem_8c_1ac7379e62dbe09e64e1b91045fee89b66">00146</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lmem_8c_1ac7379e62dbe09e64e1b91045fee89b66">tryagain</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;osize,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nsize)&#32;{
00148 &#32;&#32;<link linkend="_structglobal___state">global_State</link>&#32;*g&#32;=&#32;<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L);
00149 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lobject_8h_1a39af019fafa202841da3bf7c427bf090">ttisnil</link>(&amp;g-&gt;<link linkend="_structglobal___state_1a5c7c7d05244a09ddf235150da6f8f995">nilvalue</link>))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;is&#32;state&#32;fully&#32;build?&#32;*/</emphasis>
00150 &#32;&#32;&#32;&#32;<link linkend="_lgc_8c_1ac48130e5263ad8be09a9c51dae6125b9">luaC_fullgc</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;try&#32;to&#32;free&#32;some&#32;memory...&#32;*/</emphasis>
00151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*g-&gt;<link linkend="_structglobal___state_1aded8ba234ad5c0f907e3b70c935e28b6">frealloc</link>)(g-&gt;<link linkend="_structglobal___state_1a6c4e6337ac6cb9aab6e53aa909764129">ud</link>,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;osize,&#32;nsize);&#32;&#32;<emphasis role="comment">/*&#32;try&#32;again&#32;*/</emphasis>
00152 &#32;&#32;}
00153 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;cannot&#32;free&#32;any&#32;memory&#32;without&#32;a&#32;full&#32;state&#32;*/</emphasis>
00154 }
00155 
00156 
00157 <emphasis role="comment">/*</emphasis>
00158 <emphasis role="comment">**&#32;Generic&#32;allocation&#32;routine.</emphasis>
00159 <emphasis role="comment">**&#32;If&#32;allocation&#32;fails&#32;while&#32;shrinking&#32;a&#32;block,&#32;do&#32;not&#32;try&#32;again;&#32;the</emphasis>
00160 <emphasis role="comment">**&#32;GC&#32;shrinks&#32;some&#32;blocks&#32;and&#32;it&#32;is&#32;not&#32;reentrant.</emphasis>
00161 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lmem_8c_source_1l00162"/><link linkend="_lmem_8h_1ae7dc8a57fc5dbca825653a88a356a72d">00162</link> <emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lmem_8c_1a3eccd13af2d5f64c05ee510b4fbb8d5b">luaM_realloc_</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;osize,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nsize)&#32;{
00163 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*newblock;
00164 &#32;&#32;<link linkend="_structglobal___state">global_State</link>&#32;*g&#32;=&#32;<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L);
00165 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>((osize&#32;==&#32;0)&#32;==&#32;(<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>&#32;==&#32;NULL));
00166 &#32;&#32;newblock&#32;=&#32;<link linkend="_lmem_8c_1ab28b0855c7a625f9f245613df749b115">firsttry</link>(g,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;osize,&#32;nsize);
00167 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llimits_8h_1ac6c45889010c1bd68631771b64f18101">unlikely</link>(newblock&#32;==&#32;NULL&#32;&amp;&amp;&#32;nsize&#32;&gt;&#32;0))&#32;{
00168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nsize&#32;&gt;&#32;osize)&#32;&#32;<emphasis role="comment">/*&#32;not&#32;shrinking&#32;a&#32;block?&#32;*/</emphasis>
00169 &#32;&#32;&#32;&#32;&#32;&#32;newblock&#32;=&#32;<link linkend="_lmem_8c_1ac7379e62dbe09e64e1b91045fee89b66">tryagain</link>(L,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;osize,&#32;nsize);
00170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newblock&#32;==&#32;NULL)&#32;&#32;<emphasis role="comment">/*&#32;still&#32;no&#32;memory?&#32;*/</emphasis>
00171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;do&#32;not&#32;update&#32;&apos;GCdebt&apos;&#32;*/</emphasis>
00172 &#32;&#32;}
00173 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>((nsize&#32;==&#32;0)&#32;==&#32;(newblock&#32;==&#32;NULL));
00174 &#32;&#32;g-&gt;<link linkend="_structglobal___state_1ae466d806319d4ba1b672bbff60f369f9">GCdebt</link>&#32;=&#32;(g-&gt;<link linkend="_structglobal___state_1ae466d806319d4ba1b672bbff60f369f9">GCdebt</link>&#32;+&#32;nsize)&#32;-&#32;osize;
00175 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newblock;
00176 }
00177 
00178 
<anchor xml:id="_lmem_8c_source_1l00179"/><link linkend="_lmem_8h_1a0e576053c97b77716cd2c48dd104ecb7">00179</link> <emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lmem_8c_1adf85a6fc8395278dd72f0ef6ba60934b">luaM_saferealloc_</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;osize,
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nsize)&#32;{
00181 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*newblock&#32;=&#32;<link linkend="_lmem_8c_1a3eccd13af2d5f64c05ee510b4fbb8d5b">luaM_realloc_</link>(L,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;osize,&#32;nsize);
00182 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llimits_8h_1ac6c45889010c1bd68631771b64f18101">unlikely</link>(newblock&#32;==&#32;NULL&#32;&amp;&amp;&#32;nsize&#32;&gt;&#32;0))&#32;&#32;<emphasis role="comment">/*&#32;allocation&#32;failed?&#32;*/</emphasis>
00183 &#32;&#32;&#32;&#32;<link linkend="_lmem_8h_1ae11aaaf07d13b2f0c3a671b01d7e3822">luaM_error</link>(L);
00184 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newblock;
00185 }
00186 
00187 
<anchor xml:id="_lmem_8c_source_1l00188"/><link linkend="_lmem_8h_1a96658ef7ad4e37d8dbd71b788733941b">00188</link> <emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_lmem_8c_1a4ae158767f82aba82a4d50be097fcbe5">luaM_malloc_</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tag)&#32;{
00189 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;0)
00190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;that&apos;s&#32;all&#32;*/</emphasis>
00191 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00192 &#32;&#32;&#32;&#32;<link linkend="_structglobal___state">global_State</link>&#32;*g&#32;=&#32;<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L);
00193 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*newblock&#32;=&#32;<link linkend="_lmem_8c_1ab28b0855c7a625f9f245613df749b115">firsttry</link>(g,&#32;NULL,&#32;tag,&#32;size);
00194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llimits_8h_1ac6c45889010c1bd68631771b64f18101">unlikely</link>(newblock&#32;==&#32;NULL))&#32;{
00195 &#32;&#32;&#32;&#32;&#32;&#32;newblock&#32;=&#32;<link linkend="_lmem_8c_1ac7379e62dbe09e64e1b91045fee89b66">tryagain</link>(L,&#32;NULL,&#32;tag,&#32;size);
00196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newblock&#32;==&#32;NULL)
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lmem_8h_1ae11aaaf07d13b2f0c3a671b01d7e3822">luaM_error</link>(L);
00198 &#32;&#32;&#32;&#32;}
00199 &#32;&#32;&#32;&#32;g-&gt;<link linkend="_structglobal___state_1ae466d806319d4ba1b672bbff60f369f9">GCdebt</link>&#32;+=&#32;size;
00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newblock;
00201 &#32;&#32;}
00202 }
</programlisting></section>
