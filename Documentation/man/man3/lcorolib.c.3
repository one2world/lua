.TH "D:/gitworkspace/lua/src/lcorolib.c" 3 "2020年 九月 8日 星期二" "Lua_Docmention" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/gitworkspace/lua/src/lcorolib.c
.SH SYNOPSIS
.br
.PP
\fC#include 'lprefix\&.h'\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include 'lua\&.h'\fP
.br
\fC#include 'lauxlib\&.h'\fP
.br
\fC#include 'lualib\&.h'\fP
.br

.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBlcorolib_c\fP"
.br
.ti -1c
.RI "#define \fBLUA_LIB\fP"
.br
.ti -1c
.RI "#define \fBCOS_RUN\fP   0"
.br
.ti -1c
.RI "#define \fBCOS_DEAD\fP   1"
.br
.ti -1c
.RI "#define \fBCOS_YIELD\fP   2"
.br
.ti -1c
.RI "#define \fBCOS_NORM\fP   3"
.br
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "static \fBlua_State\fP * \fBgetco\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "static int \fBauxresume\fP (\fBlua_State\fP *L, \fBlua_State\fP *co, int narg)"
.br
.ti -1c
.RI "static int \fBluaB_coresume\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "static int \fBluaB_auxwrap\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "static int \fBluaB_cocreate\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "static int \fBluaB_cowrap\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "static int \fBluaB_yield\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "static int \fBauxstatus\fP (\fBlua_State\fP *L, \fBlua_State\fP *co)"
.br
.ti -1c
.RI "static int \fBluaB_costatus\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "static int \fBluaB_yieldable\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "static int \fBluaB_corunning\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "static int \fBluaB_close\fP (\fBlua_State\fP *L)"
.br
.ti -1c
.RI "\fBLUAMOD_API\fP int \fBluaopen_coroutine\fP (\fBlua_State\fP *L)"
.br
.in -1c
.SS "变量"

.in +1c
.ti -1c
.RI "static const char *const \fBstatname\fP []"
.br
.ti -1c
.RI "static const \fBluaL_Reg\fP \fBco_funcs\fP []"
.br
.in -1c
.SH "宏定义说明"
.PP 
.SS "#define COS_DEAD   1"

.PP
在文件 lcorolib\&.c 第 114 行定义\&.
.SS "#define COS_NORM   3"

.PP
在文件 lcorolib\&.c 第 116 行定义\&.
.SS "#define COS_RUN   0"

.PP
在文件 lcorolib\&.c 第 113 行定义\&.
.SS "#define COS_YIELD   2"

.PP
在文件 lcorolib\&.c 第 115 行定义\&.
.SS "#define lcorolib_c"

.PP
在文件 lcorolib\&.c 第 7 行定义\&.
.SS "#define LUA_LIB"

.PP
在文件 lcorolib\&.c 第 8 行定义\&.
.SH "函数说明"
.PP 
.SS "static int auxresume (\fBlua_State\fP * L, \fBlua_State\fP * co, int narg)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 32 行定义\&.
.SS "static int auxstatus (\fBlua_State\fP * L, \fBlua_State\fP * co)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 123 行定义\&.
.SS "static \fBlua_State\fP* getco (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 21 行定义\&.
.SS "static int luaB_auxwrap (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 73 行定义\&.
.SS "static int luaB_close (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 166 行定义\&.
.SS "static int luaB_cocreate (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 91 行定义\&.
.SS "static int luaB_coresume (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 56 行定义\&.
.SS "static int luaB_corunning (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 159 行定义\&.
.SS "static int luaB_costatus (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 145 行定义\&.
.SS "static int luaB_cowrap (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 101 行定义\&.
.SS "static int luaB_yield (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 108 行定义\&.
.SS "static int luaB_yieldable (\fBlua_State\fP * L)\fC [static]\fP"

.PP
在文件 lcorolib\&.c 第 152 行定义\&.
.SS "\fBLUAMOD_API\fP int luaopen_coroutine (\fBlua_State\fP * L)"

.PP
在文件 lcorolib\&.c 第 202 行定义\&.
.SH "变量说明"
.PP 
.SS "const \fBluaL_Reg\fP co_funcs[]\fC [static]\fP"
\fB初始值:\fP
.PP
.nf
= {
  {"create", luaB_cocreate},
  {"resume", luaB_coresume},
  {"running", luaB_corunning},
  {"status", luaB_costatus},
  {"wrap", luaB_cowrap},
  {"yield", luaB_yield},
  {"isyieldable", luaB_yieldable},
  {"close", luaB_close},
  {NULL, NULL}
}
.fi
.PP
在文件 lcorolib\&.c 第 188 行定义\&.
.SS "const char* const statname[]\fC [static]\fP"
\fB初始值:\fP
.PP
.nf
=
  {"running", "dead", "suspended", "normal"}
.fi
.PP
在文件 lcorolib\&.c 第 119 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 Lua_Docmention 的 源代码自动生成\&.
