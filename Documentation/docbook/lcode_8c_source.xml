<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lcode_8c_source" xml:lang="zh">
<title>D:/gitworkspace/lua/lcode.c</title>
<programlisting>00001 <emphasis role="comment">/*</emphasis>
00002 <emphasis role="comment">**&#32;$Id:&#32;lcode.c&#32;$</emphasis>
00003 <emphasis role="comment">**&#32;Code&#32;generator&#32;for&#32;Lua</emphasis>
00004 <emphasis role="comment">**&#32;See&#32;Copyright&#32;Notice&#32;in&#32;lua.h</emphasis>
00005 <emphasis role="comment">*/</emphasis>
00006 
<anchor xml:id="_lcode_8c_source_1l00007"/><link linkend="_lcode_8c_1aea04ff04f275dadd5678a39d6547cbe5">00007</link> <emphasis role="preprocessor">#define&#32;lcode_c</emphasis>
<anchor xml:id="_lcode_8c_source_1l00008"/><link linkend="_lcode_8c_1abf0b3947b59218777a8e928a10be205b">00008</link> <emphasis role="preprocessor">#define&#32;LUA_CORE</emphasis>
00009 
00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lprefix_8h">lprefix.h</link>&quot;</emphasis>
00011 
00012 
00013 <emphasis role="preprocessor">#include&#32;&lt;limits.h&gt;</emphasis>
00014 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
00015 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
00016 
00017 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lua_8h">lua.h</link>&quot;</emphasis>
00018 
00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lcode_8h">lcode.h</link>&quot;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ldebug_8h">ldebug.h</link>&quot;</emphasis>
00021 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ldo_8h">ldo.h</link>&quot;</emphasis>
00022 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lgc_8h">lgc.h</link>&quot;</emphasis>
00023 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_llex_8h">llex.h</link>&quot;</emphasis>
00024 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lmem_8h">lmem.h</link>&quot;</emphasis>
00025 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lobject_8h">lobject.h</link>&quot;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lopcodes_8h">lopcodes.h</link>&quot;</emphasis>
00027 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lparser_8h">lparser.h</link>&quot;</emphasis>
00028 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lstring_8h">lstring.h</link>&quot;</emphasis>
00029 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ltable_8h">ltable.h</link>&quot;</emphasis>
00030 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lvm_8h">lvm.h</link>&quot;</emphasis>
00031 
00032 
00033 <emphasis role="comment">/*&#32;Maximum&#32;number&#32;of&#32;registers&#32;in&#32;a&#32;Lua&#32;function&#32;(must&#32;fit&#32;in&#32;8&#32;bits)&#32;*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00034"/><link linkend="_lcode_8c_1ab6ff7e20147df29e6e4710cc162be79a">00034</link> <emphasis role="preprocessor">#define&#32;MAXREGS&#32;&#32;&#32;&#32;&#32;255</emphasis>
00035 
00036 
<anchor xml:id="_lcode_8c_source_1l00037"/><link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">00037</link> <emphasis role="preprocessor">#define&#32;hasjumps(e)&#32;((e)-&gt;t&#32;!=&#32;(e)-&gt;f)</emphasis>
00038 
00039 
00040 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1abafb16fe7dcc694c958e9dafeb2ad277">codesJ</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;o,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sj,&#32;<emphasis role="keywordtype">int</emphasis>&#32;k);
00041 
00042 
00043 
00044 <emphasis role="comment">/*&#32;semantic&#32;error&#32;*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00045"/><link linkend="_lcode_8h_1a4b2a264c8a0bde6952b7ff11a34b1492">00045</link> <link linkend="_llimits_8h_1a9f743fcc9a5278cb9ee10355f09f7302">l_noret</link>&#32;<link linkend="_lcode_8c_1abe3b325f24edb9acdca694951cbcb4d8">luaK_semerror</link>&#32;(<link linkend="_struct_lex_state">LexState</link>&#32;*ls,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg)&#32;{
00046 &#32;&#32;ls-&gt;<link linkend="_struct_lex_state_1a87971c677cea6a64536114c36f785b72">t</link>.<link linkend="_struct_token_1a8abb7e972adc09624edab301e021dc5f">token</link>&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;&quot;near&#32;&lt;token&gt;&quot;&#32;from&#32;final&#32;message&#32;*/</emphasis>
00047 &#32;&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(ls,&#32;msg);
00048 }
00049 
00050 
00051 <emphasis role="comment">/*</emphasis>
00052 <emphasis role="comment">**&#32;If&#32;expression&#32;is&#32;a&#32;numeric&#32;constant,&#32;fills&#32;&apos;v&apos;&#32;with&#32;its&#32;value</emphasis>
00053 <emphasis role="comment">**&#32;and&#32;returns&#32;1.&#32;Otherwise,&#32;returns&#32;0.</emphasis>
00054 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00055"/><link linkend="_lcode_8c_1afc00b6e7519fadb094edd29e9019eefc">00055</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1afc00b6e7519fadb094edd29e9019eefc">tonumeral</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<link linkend="_struct_t_value">TValue</link>&#32;*v)&#32;{
00056 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e))
00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;a&#32;numeral&#32;*/</emphasis>
00058 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{
00059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>:
00060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v)&#32;<link linkend="_lobject_8h_1af9dd109ba186841ab26efb2d62baf4f6">setivalue</link>(v,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>);
00061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>:
00063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v)&#32;<link linkend="_lobject_8h_1ae357382324a8220a3cf77607752de887">setfltvalue</link>(v,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a53608b3835872ab9ee76fc00cfa47b4f">nval</link>);
00064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00066 &#32;&#32;}
00067 }
00068 
00069 
00070 <emphasis role="comment">/*</emphasis>
00071 <emphasis role="comment">**&#32;Get&#32;the&#32;constant&#32;value&#32;from&#32;a&#32;constant&#32;expression</emphasis>
00072 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00073"/><link linkend="_lcode_8c_1a73505708162792e73d66a9a0307f2b48">00073</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_t_value">TValue</link>&#32;*<link linkend="_lcode_8c_1a73505708162792e73d66a9a0307f2b48">const2val</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00074 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea45b9027634b5e43ca50f4d6efbbe4220">VCONST</link>);
00075 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1a1f251dafff58aa7c4725aa4133ec064e">dyd</link>-&gt;<link linkend="_struct_dyndata_1a9624d57edd130955ed07e26f604df737">actvar</link>.<link linkend="_struct_dyndata_1a82904a5390f50cd14b6b2b52717f1c95">arr</link>[e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>].<link linkend="_union_vardesc_1a815e30589587125079e138dcb9088545">k</link>;
00076 }
00077 
00078 
00079 <emphasis role="comment">/*</emphasis>
00080 <emphasis role="comment">**&#32;If&#32;expression&#32;is&#32;a&#32;constant,&#32;fills&#32;&apos;v&apos;&#32;with&#32;its&#32;value</emphasis>
00081 <emphasis role="comment">**&#32;and&#32;returns&#32;1.&#32;Otherwise,&#32;returns&#32;0.</emphasis>
00082 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00083"/><link linkend="_lcode_8h_1a76fcfd2cbf5cf9decaefb29f24411455">00083</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1ae610aa01273d82b5603702ad3a3825a3">luaK_exp2const</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<link linkend="_struct_t_value">TValue</link>&#32;*v)&#32;{
00084 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e))
00085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;a&#32;constant&#32;*/</emphasis>
00086 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{
00087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa">VFALSE</link>:
00088 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1ad0259526a10884432dd2e7ea10b90e0f">setbfvalue</link>(v);
00089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea1228eca4fdc8e7643d18155507942482">VTRUE</link>:
00091 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1a1b86e0dccf6b92c4c89d47af26e3a8e3">setbtvalue</link>(v);
00092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea47eb055b6420db339de283cef27ad5d8">VNIL</link>:
00094 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1ad9034def7bbc1965ec3d714d84620b07">setnilvalue</link>(v);
00095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab06fcbc55fc36e7552634eef34375124">VKSTR</link>:&#32;{
00097 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1a251a2d3bada66aaed6249a89a0afe5f0">setsvalue</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;v,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a97fdec5618426b4684c2d66924e85713">strval</link>);
00098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00099 &#32;&#32;&#32;&#32;}
00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea45b9027634b5e43ca50f4d6efbbe4220">VCONST</link>:&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1acf2af15f3d5cceca8e8870f96634bc2d">setobj</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;v,&#32;<link linkend="_lcode_8c_1a73505708162792e73d66a9a0307f2b48">const2val</link>(fs,&#32;e));
00102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00103 &#32;&#32;&#32;&#32;}
00104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1afc00b6e7519fadb094edd29e9019eefc">tonumeral</link>(e,&#32;v);
00105 &#32;&#32;}
00106 }
00107 
00108 
00109 <emphasis role="comment">/*</emphasis>
00110 <emphasis role="comment">**&#32;Return&#32;the&#32;previous&#32;instruction&#32;of&#32;the&#32;current&#32;code.&#32;If&#32;there</emphasis>
00111 <emphasis role="comment">**&#32;may&#32;be&#32;a&#32;jump&#32;target&#32;between&#32;the&#32;current&#32;instruction&#32;and&#32;the</emphasis>
00112 <emphasis role="comment">**&#32;previous&#32;one,&#32;return&#32;an&#32;invalid&#32;instruction&#32;(to&#32;avoid&#32;wrong</emphasis>
00113 <emphasis role="comment">**&#32;optimizations).</emphasis>
00114 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00115"/><link linkend="_lcode_8c_1a2d946f6d31e46b2607bd69d89ca1a9ce">00115</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*<link linkend="_lcode_8c_1a2d946f6d31e46b2607bd69d89ca1a9ce">previousinstruction</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00116 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;invalidinstruction&#32;=&#32;~(<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>)0;
00117 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;&gt;&#32;fs-&gt;<link linkend="_struct_func_state_1a7c8e84a7a4eea3098db15621b30a6d41">lasttarget</link>)
00118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;-&#32;1];&#32;&#32;<emphasis role="comment">/*&#32;previous&#32;instruction&#32;*/</emphasis>
00119 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>*,&#32;&amp;invalidinstruction);
00121 }
00122 
00123 
00124 <emphasis role="comment">/*</emphasis>
00125 <emphasis role="comment">**&#32;Create&#32;a&#32;OP_LOADNIL&#32;instruction,&#32;but&#32;try&#32;to&#32;optimize:&#32;if&#32;the&#32;previous</emphasis>
00126 <emphasis role="comment">**&#32;instruction&#32;is&#32;also&#32;OP_LOADNIL&#32;and&#32;ranges&#32;are&#32;compatible,&#32;adjust</emphasis>
00127 <emphasis role="comment">**&#32;range&#32;of&#32;previous&#32;instruction&#32;instead&#32;of&#32;emitting&#32;a&#32;new&#32;one.&#32;(For</emphasis>
00128 <emphasis role="comment">**&#32;instance,&#32;&apos;local&#32;a;&#32;local&#32;b&apos;&#32;will&#32;generate&#32;a&#32;single&#32;opcode.)</emphasis>
00129 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00130"/><link linkend="_lcode_8h_1a0b4caf213c4d4697d63ad22fedda0d1f">00130</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a625d410137e33fbd9593426c6e74bcf1">luaK_nil</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;from,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
00131 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;l&#32;=&#32;from&#32;+&#32;n&#32;-&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;last&#32;register&#32;to&#32;set&#32;nil&#32;*/</emphasis>
00132 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*previous&#32;=&#32;<link linkend="_lcode_8c_1a2d946f6d31e46b2607bd69d89ca1a9ce">previousinstruction</link>(fs);
00133 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(*previous)&#32;==&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a5c399a98a26c923cdae3971b5e5b6432">OP_LOADNIL</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;previous&#32;is&#32;LOADNIL?&#32;*/</emphasis>
00134 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pfrom&#32;=&#32;<link linkend="_lopcodes_8h_1a1d504abc1e2246548f89977210dce0b9">GETARG_A</link>(*previous);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;previous&#32;range&#32;*/</emphasis>
00135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pl&#32;=&#32;pfrom&#32;+&#32;<link linkend="_lopcodes_8h_1a7a343159ef7669a438c2097b839b2b13">GETARG_B</link>(*previous);
00136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((pfrom&#32;&lt;=&#32;from&#32;&amp;&amp;&#32;from&#32;&lt;=&#32;pl&#32;+&#32;1)&#32;||
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(from&#32;&lt;=&#32;pfrom&#32;&amp;&amp;&#32;pfrom&#32;&lt;=&#32;l&#32;+&#32;1))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;can&#32;connect&#32;both?&#32;*/</emphasis>
00138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pfrom&#32;&lt;&#32;from)&#32;from&#32;=&#32;pfrom;&#32;&#32;<emphasis role="comment">/*&#32;from&#32;=&#32;min(from,&#32;pfrom)&#32;*/</emphasis>
00139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pl&#32;&gt;&#32;l)&#32;l&#32;=&#32;pl;&#32;&#32;<emphasis role="comment">/*&#32;l&#32;=&#32;max(l,&#32;pl)&#32;*/</emphasis>
00140 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a01900876b9281238c6dbb4d7bc59ca66">SETARG_A</link>(*previous,&#32;from);
00141 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a52ddcdcbd367c4557cc83c38e3e1723f">SETARG_B</link>(*previous,&#32;l&#32;-&#32;from);
00142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00143 &#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">/*&#32;else&#32;go&#32;through&#32;*/</emphasis>
00144 &#32;&#32;}
00145 &#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a5c399a98a26c923cdae3971b5e5b6432">OP_LOADNIL</link>,&#32;from,&#32;n&#32;-&#32;1,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;else&#32;no&#32;optimization&#32;*/</emphasis>
00146 }
00147 
00148 
00149 <emphasis role="comment">/*</emphasis>
00150 <emphasis role="comment">**&#32;Gets&#32;the&#32;destination&#32;address&#32;of&#32;a&#32;jump&#32;instruction.&#32;Used&#32;to&#32;traverse</emphasis>
00151 <emphasis role="comment">**&#32;a&#32;list&#32;of&#32;jumps.</emphasis>
00152 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00153"/><link linkend="_lcode_8c_1ac74dd95e53d610cf12e752f3075fe450">00153</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1ac74dd95e53d610cf12e752f3075fe450">getjump</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc)&#32;{
00154 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;<link linkend="_lopcodes_8h_1a1e69b8e862462ab13df4acd8de7ef54c">GETARG_sJ</link>(fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[pc]);
00155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(offset&#32;==&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>)&#32;&#32;<emphasis role="comment">/*&#32;point&#32;to&#32;itself&#32;represents&#32;end&#32;of&#32;list&#32;*/</emphasis>
00156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;&#32;&#32;<emphasis role="comment">/*&#32;end&#32;of&#32;list&#32;*/</emphasis>
00157 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(pc+1)+offset;&#32;&#32;<emphasis role="comment">/*&#32;turn&#32;offset&#32;into&#32;absolute&#32;position&#32;*/</emphasis>
00159 }
00160 
00161 
00162 <emphasis role="comment">/*</emphasis>
00163 <emphasis role="comment">**&#32;Fix&#32;jump&#32;instruction&#32;at&#32;position&#32;&apos;pc&apos;&#32;to&#32;jump&#32;to&#32;&apos;dest&apos;.</emphasis>
00164 <emphasis role="comment">**&#32;(Jump&#32;addresses&#32;are&#32;relative&#32;in&#32;Lua)</emphasis>
00165 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00166"/><link linkend="_lcode_8c_1a90b203d73d5f6e3ffb85079e746b028d">00166</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a90b203d73d5f6e3ffb85079e746b028d">fixjump</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc,&#32;<emphasis role="keywordtype">int</emphasis>&#32;dest)&#32;{
00167 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*jmp&#32;=&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[pc];
00168 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;dest&#32;-&#32;(pc&#32;+&#32;1);
00169 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(dest&#32;!=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>);
00170 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(-<link linkend="_lopcodes_8h_1a1618fbbbf634a1b231240cfd6f3a3e5f">OFFSET_sJ</link>&#32;&lt;=&#32;offset&#32;&amp;&amp;&#32;offset&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1a25010bef992b79abb26404ddde6b47ee">MAXARG_sJ</link>&#32;-&#32;<link linkend="_lopcodes_8h_1a1618fbbbf634a1b231240cfd6f3a3e5f">OFFSET_sJ</link>))
00171 &#32;&#32;&#32;&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>,&#32;<emphasis role="stringliteral">&quot;control&#32;structure&#32;too&#32;long&quot;</emphasis>);
00172 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(*jmp)&#32;==&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7afd679fab86e6a91d22c91734e287639b">OP_JMP</link>);
00173 &#32;&#32;<link linkend="_lopcodes_8h_1abfb44d9f7226140f97beb16afad6f6c3">SETARG_sJ</link>(*jmp,&#32;offset);
00174 }
00175 
00176 
00177 <emphasis role="comment">/*</emphasis>
00178 <emphasis role="comment">**&#32;Concatenate&#32;jump-list&#32;&apos;l2&apos;&#32;into&#32;jump-list&#32;&apos;l1&apos;</emphasis>
00179 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00180"/><link linkend="_lcode_8h_1a0abd5e7a52c17bcf3ffe02ebaa771ff2">00180</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a99718e3c19e193690f60b7595bee952e">luaK_concat</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*l1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;l2)&#32;{
00181 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l2&#32;==&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>)&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;nothing&#32;to&#32;concatenate?&#32;*/</emphasis>
00182 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*l1&#32;==&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>)&#32;&#32;<emphasis role="comment">/*&#32;no&#32;original&#32;list?&#32;*/</emphasis>
00183 &#32;&#32;&#32;&#32;*l1&#32;=&#32;l2;&#32;&#32;<emphasis role="comment">/*&#32;&apos;l1&apos;&#32;points&#32;to&#32;&apos;l2&apos;&#32;*/</emphasis>
00184 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00185 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;list&#32;=&#32;*l1;
00186 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_llex_8c_1a8ab976102fb046f9974c53caaf5a1995">next</link>;
00187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((<link linkend="_llex_8c_1a8ab976102fb046f9974c53caaf5a1995">next</link>&#32;=&#32;<link linkend="_lcode_8c_1ac74dd95e53d610cf12e752f3075fe450">getjump</link>(fs,&#32;list))&#32;!=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>)&#32;&#32;<emphasis role="comment">/*&#32;find&#32;last&#32;element&#32;*/</emphasis>
00188 &#32;&#32;&#32;&#32;&#32;&#32;list&#32;=&#32;<link linkend="_llex_8c_1a8ab976102fb046f9974c53caaf5a1995">next</link>;
00189 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a90b203d73d5f6e3ffb85079e746b028d">fixjump</link>(fs,&#32;list,&#32;l2);&#32;&#32;<emphasis role="comment">/*&#32;last&#32;element&#32;links&#32;to&#32;&apos;l2&apos;&#32;*/</emphasis>
00190 &#32;&#32;}
00191 }
00192 
00193 
00194 <emphasis role="comment">/*</emphasis>
00195 <emphasis role="comment">**&#32;Create&#32;a&#32;jump&#32;instruction&#32;and&#32;return&#32;its&#32;position,&#32;so&#32;its&#32;destination</emphasis>
00196 <emphasis role="comment">**&#32;can&#32;be&#32;fixed&#32;later&#32;(with&#32;&apos;fixjump&apos;).</emphasis>
00197 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00198"/><link linkend="_lcode_8h_1a67cd7ce15260791b3348dfe0af04a444">00198</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00199 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1abafb16fe7dcc694c958e9dafeb2ad277">codesJ</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7afd679fab86e6a91d22c91734e287639b">OP_JMP</link>,&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>,&#32;0);
00200 }
00201 
00202 
00203 <emphasis role="comment">/*</emphasis>
00204 <emphasis role="comment">**&#32;Code&#32;a&#32;&apos;return&apos;&#32;instruction</emphasis>
00205 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00206"/><link linkend="_lcode_8h_1aa7c34b815a59b7ed4b5d585825cad475">00206</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1af04e0d7f5a543cbdc60d5ad981333bcf">luaK_ret</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;first,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nret)&#32;{
00207 &#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op;
00208 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(nret)&#32;{
00209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;op&#32;=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ae3f8033d220b543563720de9ab788e82">OP_RETURN0</link>;&#32;<emphasis role="keywordflow">break</emphasis>;
00210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:&#32;op&#32;=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a85801949afc11b7d95553fd0ee912f38">OP_RETURN1</link>;&#32;<emphasis role="keywordflow">break</emphasis>;
00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;op&#32;=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ad436c18b194473f5ec64c28b774e41b3">OP_RETURN</link>;&#32;<emphasis role="keywordflow">break</emphasis>;
00212 &#32;&#32;}
00213 &#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;op,&#32;first,&#32;nret&#32;+&#32;1,&#32;0);
00214 }
00215 
00216 
00217 <emphasis role="comment">/*</emphasis>
00218 <emphasis role="comment">**&#32;Code&#32;a&#32;&quot;conditional&#32;jump&quot;,&#32;that&#32;is,&#32;a&#32;test&#32;or&#32;comparison&#32;opcode</emphasis>
00219 <emphasis role="comment">**&#32;followed&#32;by&#32;a&#32;jump.&#32;Return&#32;jump&#32;position.</emphasis>
00220 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00221"/><link linkend="_lcode_8c_1a5ca879c3a79630e5af194a82971f7ab2">00221</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a5ca879c3a79630e5af194a82971f7ab2">condjump</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op,&#32;<emphasis role="keywordtype">int</emphasis>&#32;A,&#32;<emphasis role="keywordtype">int</emphasis>&#32;B,&#32;<emphasis role="keywordtype">int</emphasis>&#32;C,&#32;<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
00222 &#32;&#32;<link linkend="_lcode_8c_1a7f8d052466e2665575f464a55f90a509">luaK_codeABCk</link>(fs,&#32;op,&#32;A,&#32;B,&#32;C,&#32;k);
00223 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>(fs);
00224 }
00225 
00226 
00227 <emphasis role="comment">/*</emphasis>
00228 <emphasis role="comment">**&#32;returns&#32;current&#32;&apos;pc&apos;&#32;and&#32;marks&#32;it&#32;as&#32;a&#32;jump&#32;target&#32;(to&#32;avoid&#32;wrong</emphasis>
00229 <emphasis role="comment">**&#32;optimizations&#32;with&#32;consecutive&#32;instructions&#32;not&#32;in&#32;the&#32;same&#32;basic&#32;block).</emphasis>
00230 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00231"/><link linkend="_lcode_8h_1aab3ec26384fa706960da17c9a3ed5057">00231</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1afd70025e040dde0ef167df148de201b0">luaK_getlabel</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00232 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a7c8e84a7a4eea3098db15621b30a6d41">lasttarget</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>;
00233 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>;
00234 }
00235 
00236 
00237 <emphasis role="comment">/*</emphasis>
00238 <emphasis role="comment">**&#32;Returns&#32;the&#32;position&#32;of&#32;the&#32;instruction&#32;&quot;controlling&quot;&#32;a&#32;given</emphasis>
00239 <emphasis role="comment">**&#32;jump&#32;(that&#32;is,&#32;its&#32;condition),&#32;or&#32;the&#32;jump&#32;itself&#32;if&#32;it&#32;is</emphasis>
00240 <emphasis role="comment">**&#32;unconditional.</emphasis>
00241 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00242"/><link linkend="_lcode_8c_1a755e9c104abc7fa7bb87437964b19628">00242</link> <emphasis role="keyword">static</emphasis>&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*<link linkend="_lcode_8c_1a755e9c104abc7fa7bb87437964b19628">getjumpcontrol</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc)&#32;{
00243 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*pi&#32;=&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[pc];
00244 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pc&#32;&gt;=&#32;1&#32;&amp;&amp;&#32;<link linkend="_lopcodes_8h_1a6750851f9d04ae7f9612146b07f88c97">testTMode</link>(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(*(pi-1))))
00245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pi-1;
00246 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pi;
00248 }
00249 
00250 
00251 <emphasis role="comment">/*</emphasis>
00252 <emphasis role="comment">**&#32;Patch&#32;destination&#32;register&#32;for&#32;a&#32;TESTSET&#32;instruction.</emphasis>
00253 <emphasis role="comment">**&#32;If&#32;instruction&#32;in&#32;position&#32;&apos;node&apos;&#32;is&#32;not&#32;a&#32;TESTSET,&#32;return&#32;0&#32;(&quot;fails&quot;).</emphasis>
00254 <emphasis role="comment">**&#32;Otherwise,&#32;if&#32;&apos;reg&apos;&#32;is&#32;not&#32;&apos;NO_REG&apos;,&#32;set&#32;it&#32;as&#32;the&#32;destination</emphasis>
00255 <emphasis role="comment">**&#32;register.&#32;Otherwise,&#32;change&#32;instruction&#32;to&#32;a&#32;simple&#32;&apos;TEST&apos;&#32;(produces</emphasis>
00256 <emphasis role="comment">**&#32;no&#32;register&#32;value)</emphasis>
00257 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00258"/><link linkend="_lcode_8c_1ac7ce05b875db5d3bdca16012f3bcad8e">00258</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1ac7ce05b875db5d3bdca16012f3bcad8e">patchtestreg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;node,&#32;<emphasis role="keywordtype">int</emphasis>&#32;reg)&#32;{
00259 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*i&#32;=&#32;<link linkend="_lcode_8c_1a755e9c104abc7fa7bb87437964b19628">getjumpcontrol</link>(fs,&#32;node);
00260 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(*i)&#32;!=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a39b4077a15fb8fffc166f5045dddacee">OP_TESTSET</link>)
00261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;cannot&#32;patch&#32;other&#32;instructions&#32;*/</emphasis>
00262 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reg&#32;!=&#32;<link linkend="_lopcodes_8h_1a6552ce4b3bba3b1a820dc0adaf85974a">NO_REG</link>&#32;&amp;&amp;&#32;reg&#32;!=&#32;<link linkend="_lopcodes_8h_1a7a343159ef7669a438c2097b839b2b13">GETARG_B</link>(*i))
00263 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a01900876b9281238c6dbb4d7bc59ca66">SETARG_A</link>(*i,&#32;reg);
00264 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00265 &#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;register&#32;to&#32;put&#32;value&#32;or&#32;register&#32;already&#32;has&#32;the&#32;value;</emphasis>
00266 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;change&#32;instruction&#32;to&#32;simple&#32;test&#32;*/</emphasis>
00267 &#32;&#32;&#32;&#32;*i&#32;=&#32;<link linkend="_lopcodes_8h_1a9cb59013204285f8d899c8f3d88d2707">CREATE_ABCk</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a8952e66300f2660060e38c67ccd21c9d">OP_TEST</link>,&#32;<link linkend="_lopcodes_8h_1a7a343159ef7669a438c2097b839b2b13">GETARG_B</link>(*i),&#32;0,&#32;0,&#32;<link linkend="_lopcodes_8h_1aa9ce1e6169ccc23a1e9c783f61af343f">GETARG_k</link>(*i));
00268 &#32;&#32;}
00269 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00270 }
00271 
00272 
00273 <emphasis role="comment">/*</emphasis>
00274 <emphasis role="comment">**&#32;Traverse&#32;a&#32;list&#32;of&#32;tests&#32;ensuring&#32;no&#32;one&#32;produces&#32;a&#32;value</emphasis>
00275 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00276"/><link linkend="_lcode_8c_1a76e8dc6a6f33ee6f3c88c22933bc5c29">00276</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a76e8dc6a6f33ee6f3c88c22933bc5c29">removevalues</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;list)&#32;{
00277 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;list&#32;!=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;&#32;list&#32;=&#32;<link linkend="_lcode_8c_1ac74dd95e53d610cf12e752f3075fe450">getjump</link>(fs,&#32;list))
00278 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ac7ce05b875db5d3bdca16012f3bcad8e">patchtestreg</link>(fs,&#32;list,&#32;<link linkend="_lopcodes_8h_1a6552ce4b3bba3b1a820dc0adaf85974a">NO_REG</link>);
00279 }
00280 
00281 
00282 <emphasis role="comment">/*</emphasis>
00283 <emphasis role="comment">**&#32;Traverse&#32;a&#32;list&#32;of&#32;tests,&#32;patching&#32;their&#32;destination&#32;address&#32;and</emphasis>
00284 <emphasis role="comment">**&#32;registers:&#32;tests&#32;producing&#32;values&#32;jump&#32;to&#32;&apos;vtarget&apos;&#32;(and&#32;put&#32;their</emphasis>
00285 <emphasis role="comment">**&#32;values&#32;in&#32;&apos;reg&apos;),&#32;other&#32;tests&#32;jump&#32;to&#32;&apos;dtarget&apos;.</emphasis>
00286 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00287"/><link linkend="_lcode_8c_1a83e8d2f1641cfd3ed1c465f07f383c5e">00287</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a83e8d2f1641cfd3ed1c465f07f383c5e">patchlistaux</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;vtarget,&#32;<emphasis role="keywordtype">int</emphasis>&#32;reg,
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;dtarget)&#32;{
00289 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(list&#32;!=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>)&#32;{
00290 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_llex_8c_1a8ab976102fb046f9974c53caaf5a1995">next</link>&#32;=&#32;<link linkend="_lcode_8c_1ac74dd95e53d610cf12e752f3075fe450">getjump</link>(fs,&#32;list);
00291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1ac7ce05b875db5d3bdca16012f3bcad8e">patchtestreg</link>(fs,&#32;list,&#32;reg))
00292 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a90b203d73d5f6e3ffb85079e746b028d">fixjump</link>(fs,&#32;list,&#32;vtarget);
00293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00294 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a90b203d73d5f6e3ffb85079e746b028d">fixjump</link>(fs,&#32;list,&#32;dtarget);&#32;&#32;<emphasis role="comment">/*&#32;jump&#32;to&#32;default&#32;target&#32;*/</emphasis>
00295 &#32;&#32;&#32;&#32;list&#32;=&#32;<link linkend="_llex_8c_1a8ab976102fb046f9974c53caaf5a1995">next</link>;
00296 &#32;&#32;}
00297 }
00298 
00299 
00300 <emphasis role="comment">/*</emphasis>
00301 <emphasis role="comment">**&#32;Path&#32;all&#32;jumps&#32;in&#32;&apos;list&apos;&#32;to&#32;jump&#32;to&#32;&apos;target&apos;.</emphasis>
00302 <emphasis role="comment">**&#32;(The&#32;assert&#32;means&#32;that&#32;we&#32;cannot&#32;fix&#32;a&#32;jump&#32;to&#32;a&#32;forward&#32;address</emphasis>
00303 <emphasis role="comment">**&#32;because&#32;we&#32;only&#32;know&#32;addresses&#32;once&#32;code&#32;is&#32;generated.)</emphasis>
00304 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00305"/><link linkend="_lcode_8h_1a8efbcf17cf978cc2bac3e08f755677bd">00305</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a4db596b358989fa68a43b6f697fc9a09">luaK_patchlist</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;list,&#32;<emphasis role="keywordtype">int</emphasis>&#32;target)&#32;{
00306 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(target&#32;&lt;=&#32;fs-&gt;pc);
00307 &#32;&#32;<link linkend="_lcode_8c_1a83e8d2f1641cfd3ed1c465f07f383c5e">patchlistaux</link>(fs,&#32;list,&#32;target,&#32;<link linkend="_lopcodes_8h_1a6552ce4b3bba3b1a820dc0adaf85974a">NO_REG</link>,&#32;target);
00308 }
00309 
00310 
<anchor xml:id="_lcode_8c_source_1l00311"/><link linkend="_lcode_8h_1a46bd7bbdf259cca73b0b0b833880df51">00311</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a5748ad3c940c7916a2586fab6181a197">luaK_patchtohere</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;list)&#32;{
00312 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;hr&#32;=&#32;<link linkend="_lcode_8c_1afd70025e040dde0ef167df148de201b0">luaK_getlabel</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;mark&#32;&quot;here&quot;&#32;as&#32;a&#32;jump&#32;target&#32;*/</emphasis>
00313 &#32;&#32;<link linkend="_lcode_8c_1a4db596b358989fa68a43b6f697fc9a09">luaK_patchlist</link>(fs,&#32;list,&#32;hr);
00314 }
00315 
00316 
00317 <emphasis role="comment">/*</emphasis>
00318 <emphasis role="comment">**&#32;MAXimum&#32;number&#32;of&#32;successive&#32;Instructions&#32;WiTHout&#32;ABSolute&#32;line</emphasis>
00319 <emphasis role="comment">**&#32;information.</emphasis>
00320 <emphasis role="comment">*/</emphasis>
00321 <emphasis role="preprocessor">#if&#32;!defined(MAXIWTHABS)</emphasis>
<anchor xml:id="_lcode_8c_source_1l00322"/><link linkend="_lcode_8c_1ad5413b8b64cce6bf8cab6fa1e54d2464">00322</link> <emphasis role="preprocessor">#define&#32;MAXIWTHABS&#32;&#32;120</emphasis>
00323 <emphasis role="preprocessor">#endif</emphasis>
00324 
00325 
00326 <emphasis role="comment">/*&#32;limit&#32;for&#32;difference&#32;between&#32;lines&#32;in&#32;relative&#32;line&#32;info.&#32;*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00327"/><link linkend="_lcode_8c_1a8b6f0f419e73b43c908762a1f1f9ac3d">00327</link> <emphasis role="preprocessor">#define&#32;LIMLINEDIFF&#32;0x80</emphasis>
00328 
00329 
00330 <emphasis role="comment">/*</emphasis>
00331 <emphasis role="comment">**&#32;Save&#32;line&#32;info&#32;for&#32;a&#32;new&#32;instruction.&#32;If&#32;difference&#32;from&#32;last&#32;line</emphasis>
00332 <emphasis role="comment">**&#32;does&#32;not&#32;fit&#32;in&#32;a&#32;byte,&#32;of&#32;after&#32;that&#32;many&#32;instructions,&#32;save&#32;a&#32;new</emphasis>
00333 <emphasis role="comment">**&#32;absolute&#32;line&#32;info;&#32;(in&#32;that&#32;case,&#32;the&#32;special&#32;value&#32;&apos;ABSLINEINFO&apos;</emphasis>
00334 <emphasis role="comment">**&#32;in&#32;&apos;lineinfo&apos;&#32;signals&#32;the&#32;existence&#32;of&#32;this&#32;absolute&#32;information.)</emphasis>
00335 <emphasis role="comment">**&#32;Otherwise,&#32;store&#32;the&#32;difference&#32;from&#32;last&#32;line&#32;in&#32;&apos;lineinfo&apos;.</emphasis>
00336 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00337"/><link linkend="_lcode_8c_1acd1138478ae0364e0d3eaace189d2614">00337</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1acd1138478ae0364e0d3eaace189d2614">savelineinfo</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_proto">Proto</link>&#32;*f,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
00338 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;linedif&#32;=&#32;line&#32;-&#32;fs-&gt;<link linkend="_struct_func_state_1a36e09444501db4b4ae62a42d12052902">previousline</link>;
00339 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;-&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;last&#32;instruction&#32;coded&#32;*/</emphasis>
00340 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(abs(linedif)&#32;&gt;=&#32;<link linkend="_lcode_8c_1a8b6f0f419e73b43c908762a1f1f9ac3d">LIMLINEDIFF</link>&#32;||&#32;fs-&gt;<link linkend="_struct_func_state_1ab3a3c240b79a1ec22f1797373c3c31b7">iwthabs</link>++&#32;&gt;&#32;<link linkend="_lcode_8c_1ad5413b8b64cce6bf8cab6fa1e54d2464">MAXIWTHABS</link>)&#32;{
00341 &#32;&#32;&#32;&#32;<link linkend="_lmem_8h_1a38823c4cdf0d53b73e1e3015affb06f9">luaM_growvector</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;f-&gt;<link linkend="_struct_proto_1a731ed18a38cc12a903582b927104c883">abslineinfo</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1a62f82c703d737f9c15f2d95338c822e7">nabslineinfo</link>,
00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f-&gt;<link linkend="_struct_proto_1ab443243fa7dd09b9c08117626c3f8a61">sizeabslineinfo</link>,&#32;<link linkend="_struct_abs_line_info">AbsLineInfo</link>,&#32;<link linkend="_llimits_8h_1aaa1ac5caef84256eaeb39594e58e096f">MAX_INT</link>,&#32;<emphasis role="stringliteral">&quot;lines&quot;</emphasis>);
00343 &#32;&#32;&#32;&#32;f-&gt;<link linkend="_struct_proto_1a731ed18a38cc12a903582b927104c883">abslineinfo</link>[fs-&gt;<link linkend="_struct_func_state_1a62f82c703d737f9c15f2d95338c822e7">nabslineinfo</link>].<link linkend="_struct_abs_line_info_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;=&#32;pc;
00344 &#32;&#32;&#32;&#32;f-&gt;<link linkend="_struct_proto_1a731ed18a38cc12a903582b927104c883">abslineinfo</link>[fs-&gt;<link linkend="_struct_func_state_1a62f82c703d737f9c15f2d95338c822e7">nabslineinfo</link>++].<link linkend="_struct_abs_line_info_1a41ebd28ef1d7c6ade45642cb6acc1039">line</link>&#32;=&#32;line;
00345 &#32;&#32;&#32;&#32;linedif&#32;=&#32;<link linkend="_ldebug_8h_1a62320b24b15c9fc1185526504649633f">ABSLINEINFO</link>;&#32;&#32;<emphasis role="comment">/*&#32;signal&#32;that&#32;there&#32;is&#32;absolute&#32;information&#32;*/</emphasis>
00346 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1ab3a3c240b79a1ec22f1797373c3c31b7">iwthabs</link>&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;restart&#32;counter&#32;*/</emphasis>
00347 &#32;&#32;}
00348 &#32;&#32;<link linkend="_lmem_8h_1a38823c4cdf0d53b73e1e3015affb06f9">luaM_growvector</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;f-&gt;<link linkend="_struct_proto_1a0d5af822069e8cdb2bd7f17f3cdcf575">lineinfo</link>,&#32;pc,&#32;f-&gt;<link linkend="_struct_proto_1a53f346647cd2060380dad39c9d5caebe">sizelineinfo</link>,&#32;<link linkend="_llimits_8h_1aab58a246c9e0a85c4c2ed0fd8d6724bb">ls_byte</link>,
00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aaa1ac5caef84256eaeb39594e58e096f">MAX_INT</link>,&#32;<emphasis role="stringliteral">&quot;opcodes&quot;</emphasis>);
00350 &#32;&#32;f-&gt;<link linkend="_struct_proto_1a0d5af822069e8cdb2bd7f17f3cdcf575">lineinfo</link>[pc]&#32;=&#32;linedif;
00351 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a36e09444501db4b4ae62a42d12052902">previousline</link>&#32;=&#32;line;&#32;&#32;<emphasis role="comment">/*&#32;last&#32;line&#32;saved&#32;*/</emphasis>
00352 }
00353 
00354 
00355 <emphasis role="comment">/*</emphasis>
00356 <emphasis role="comment">**&#32;Remove&#32;line&#32;information&#32;from&#32;the&#32;last&#32;instruction.</emphasis>
00357 <emphasis role="comment">**&#32;If&#32;line&#32;information&#32;for&#32;that&#32;instruction&#32;is&#32;absolute,&#32;set&#32;&apos;iwthabs&apos;</emphasis>
00358 <emphasis role="comment">**&#32;above&#32;its&#32;max&#32;to&#32;force&#32;the&#32;new&#32;(replacing)&#32;instruction&#32;to&#32;have</emphasis>
00359 <emphasis role="comment">**&#32;absolute&#32;line&#32;info,&#32;too.</emphasis>
00360 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00361"/><link linkend="_lcode_8c_1a2d0840aab23ac3d53ba8821ad4eb1b8f">00361</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a2d0840aab23ac3d53ba8821ad4eb1b8f">removelastlineinfo</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00362 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*f&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;
00363 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;-&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;last&#32;instruction&#32;coded&#32;*/</emphasis>
00364 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(f-&gt;<link linkend="_struct_proto_1a0d5af822069e8cdb2bd7f17f3cdcf575">lineinfo</link>[pc]&#32;!=&#32;<link linkend="_ldebug_8h_1a62320b24b15c9fc1185526504649633f">ABSLINEINFO</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;relative&#32;line&#32;info?&#32;*/</emphasis>
00365 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a36e09444501db4b4ae62a42d12052902">previousline</link>&#32;-=&#32;f-&gt;<link linkend="_struct_proto_1a0d5af822069e8cdb2bd7f17f3cdcf575">lineinfo</link>[pc];&#32;&#32;<emphasis role="comment">/*&#32;correct&#32;last&#32;line&#32;saved&#32;*/</emphasis>
00366 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1ab3a3c240b79a1ec22f1797373c3c31b7">iwthabs</link>--;&#32;&#32;<emphasis role="comment">/*&#32;undo&#32;previous&#32;increment&#32;*/</emphasis>
00367 &#32;&#32;}
00368 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;absolute&#32;line&#32;information&#32;*/</emphasis>
00369 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(f-&gt;<link linkend="_struct_proto_1a731ed18a38cc12a903582b927104c883">abslineinfo</link>[fs-&gt;<link linkend="_struct_func_state_1a62f82c703d737f9c15f2d95338c822e7">nabslineinfo</link>&#32;-&#32;1].<link linkend="_struct_abs_line_info_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;==&#32;pc);
00370 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a62f82c703d737f9c15f2d95338c822e7">nabslineinfo</link>--;&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;it&#32;*/</emphasis>
00371 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1ab3a3c240b79a1ec22f1797373c3c31b7">iwthabs</link>&#32;=&#32;<link linkend="_lcode_8c_1ad5413b8b64cce6bf8cab6fa1e54d2464">MAXIWTHABS</link>&#32;+&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;force&#32;next&#32;line&#32;info&#32;to&#32;be&#32;absolute&#32;*/</emphasis>
00372 &#32;&#32;}
00373 }
00374 
00375 
00376 <emphasis role="comment">/*</emphasis>
00377 <emphasis role="comment">**&#32;Remove&#32;the&#32;last&#32;instruction&#32;created,&#32;correcting&#32;line&#32;information</emphasis>
00378 <emphasis role="comment">**&#32;accordingly.</emphasis>
00379 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00380"/><link linkend="_lcode_8c_1af8da5ca36e18a59d8881a56b982ebae6">00380</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1af8da5ca36e18a59d8881a56b982ebae6">removelastinstruction</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00381 &#32;&#32;<link linkend="_lcode_8c_1a2d0840aab23ac3d53ba8821ad4eb1b8f">removelastlineinfo</link>(fs);
00382 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>--;
00383 }
00384 
00385 
00386 <emphasis role="comment">/*</emphasis>
00387 <emphasis role="comment">**&#32;Emit&#32;instruction&#32;&apos;i&apos;,&#32;checking&#32;for&#32;array&#32;sizes&#32;and&#32;saving&#32;also&#32;its</emphasis>
00388 <emphasis role="comment">**&#32;line&#32;information.&#32;Return&#32;&apos;i&apos;&#32;position.</emphasis>
00389 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00390"/><link linkend="_lcode_8h_1a96c5e0e67ce8d9bb5d7b32ce5dd587b2">00390</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a7250af995defa0d720b40e35695775da">luaK_code</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;i)&#32;{
00391 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*f&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;
00392 &#32;&#32;<emphasis role="comment">/*&#32;put&#32;new&#32;instruction&#32;in&#32;code&#32;array&#32;*/</emphasis>
00393 &#32;&#32;<link linkend="_lmem_8h_1a38823c4cdf0d53b73e1e3015affb06f9">luaM_growvector</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;f-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>,&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>,&#32;f-&gt;<link linkend="_struct_proto_1aa3cefdf204c272e3a1a3aa8bc12f4e3e">sizecode</link>,&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>,
00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aaa1ac5caef84256eaeb39594e58e096f">MAX_INT</link>,&#32;<emphasis role="stringliteral">&quot;opcodes&quot;</emphasis>);
00395 &#32;&#32;f-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>++]&#32;=&#32;i;
00396 &#32;&#32;<link linkend="_lcode_8c_1acd1138478ae0364e0d3eaace189d2614">savelineinfo</link>(fs,&#32;f,&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1a43f6f8a28e02774b94cceaaad727a035">lastline</link>);
00397 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;-&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;index&#32;of&#32;new&#32;instruction&#32;*/</emphasis>
00398 }
00399 
00400 
00401 <emphasis role="comment">/*</emphasis>
00402 <emphasis role="comment">**&#32;Format&#32;and&#32;emit&#32;an&#32;&apos;iABC&apos;&#32;instruction.&#32;(Assertions&#32;check&#32;consistency</emphasis>
00403 <emphasis role="comment">**&#32;of&#32;parameters&#32;versus&#32;opcode.)</emphasis>
00404 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00405"/><link linkend="_lcode_8h_1ace0ce2d50b1423a5b4b2234ca90f4794">00405</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a7f8d052466e2665575f464a55f90a509">luaK_codeABCk</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;o,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;b,&#32;<emphasis role="keywordtype">int</emphasis>&#32;c,&#32;<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
00406 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lopcodes_8h_1afb3fdd221fb95fdd1c254f7ab479739e">getOpMode</link>(o)&#32;==&#32;<link linkend="_lopcodes_8h_1a56752d1aeb4bd4940e632396072d68afa5032b5bab05a3312f6236ad8a6053cf3">iABC</link>);
00407 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(a&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1ab3c4feecc8cd0add12e881e26bbb3b15">MAXARG_A</link>&#32;&amp;&amp;&#32;b&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1ae5132046fa2196de46214613a36235b2">MAXARG_B</link>&#32;&amp;&amp;
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1a15a7daf14e4640990519e4e7f627900f">MAXARG_C</link>&#32;&amp;&amp;&#32;(k&#32;&amp;&#32;~1)&#32;==&#32;0);
00409 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a7250af995defa0d720b40e35695775da">luaK_code</link>(fs,&#32;<link linkend="_lopcodes_8h_1a9cb59013204285f8d899c8f3d88d2707">CREATE_ABCk</link>(o,&#32;a,&#32;b,&#32;c,&#32;k));
00410 }
00411 
00412 
00413 <emphasis role="comment">/*</emphasis>
00414 <emphasis role="comment">**&#32;Format&#32;and&#32;emit&#32;an&#32;&apos;iABx&apos;&#32;instruction.</emphasis>
00415 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00416"/><link linkend="_lcode_8h_1a0fd979cf2c00469768bb12f5440e5c0f">00416</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a3fb5006a069fadbcb2ec7dde4740ad10">luaK_codeABx</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;o,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bc)&#32;{
00417 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lopcodes_8h_1afb3fdd221fb95fdd1c254f7ab479739e">getOpMode</link>(o)&#32;==&#32;<link linkend="_lopcodes_8h_1a56752d1aeb4bd4940e632396072d68afae162f330f7a1e7581cdbbb4af60dc8ea">iABx</link>);
00418 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(a&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1ab3c4feecc8cd0add12e881e26bbb3b15">MAXARG_A</link>&#32;&amp;&amp;&#32;bc&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1aebbf650de6e9cbec539bfabcb9ae50c6">MAXARG_Bx</link>);
00419 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a7250af995defa0d720b40e35695775da">luaK_code</link>(fs,&#32;<link linkend="_lopcodes_8h_1a46bb00b89420c78407eb45a3bc98b50d">CREATE_ABx</link>(o,&#32;a,&#32;bc));
00420 }
00421 
00422 
00423 <emphasis role="comment">/*</emphasis>
00424 <emphasis role="comment">**&#32;Format&#32;and&#32;emit&#32;an&#32;&apos;iAsBx&apos;&#32;instruction.</emphasis>
00425 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00426"/><link linkend="_lcode_8h_1aa270f86aeb20cc9b4954f9a43d43b071">00426</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a0cebf3e6a7318f6f9b8ebd96b1d1ed70">luaK_codeAsBx</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;o,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bc)&#32;{
00427 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;b&#32;=&#32;bc&#32;+&#32;<link linkend="_lopcodes_8h_1afda4d6a4b816b12ffd722e04b20f0884">OFFSET_sBx</link>;
00428 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lopcodes_8h_1afb3fdd221fb95fdd1c254f7ab479739e">getOpMode</link>(o)&#32;==&#32;<link linkend="_lopcodes_8h_1a56752d1aeb4bd4940e632396072d68afa5db94456d16691b254a6b2fc7b473e55">iAsBx</link>);
00429 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(a&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1ab3c4feecc8cd0add12e881e26bbb3b15">MAXARG_A</link>&#32;&amp;&amp;&#32;b&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1aebbf650de6e9cbec539bfabcb9ae50c6">MAXARG_Bx</link>);
00430 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a7250af995defa0d720b40e35695775da">luaK_code</link>(fs,&#32;<link linkend="_lopcodes_8h_1a46bb00b89420c78407eb45a3bc98b50d">CREATE_ABx</link>(o,&#32;a,&#32;b));
00431 }
00432 
00433 
00434 <emphasis role="comment">/*</emphasis>
00435 <emphasis role="comment">**&#32;Format&#32;and&#32;emit&#32;an&#32;&apos;isJ&apos;&#32;instruction.</emphasis>
00436 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00437"/><link linkend="_lcode_8c_1abafb16fe7dcc694c958e9dafeb2ad277">00437</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1abafb16fe7dcc694c958e9dafeb2ad277">codesJ</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;o,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sj,&#32;<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
00438 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;sj&#32;+&#32;<link linkend="_lopcodes_8h_1a1618fbbbf634a1b231240cfd6f3a3e5f">OFFSET_sJ</link>;
00439 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lopcodes_8h_1afb3fdd221fb95fdd1c254f7ab479739e">getOpMode</link>(o)&#32;==&#32;<link linkend="_lopcodes_8h_1a56752d1aeb4bd4940e632396072d68afa8c4168189c62aed69b9160daeb20f20e">isJ</link>);
00440 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(j&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1a25010bef992b79abb26404ddde6b47ee">MAXARG_sJ</link>&#32;&amp;&amp;&#32;(k&#32;&amp;&#32;~1)&#32;==&#32;0);
00441 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a7250af995defa0d720b40e35695775da">luaK_code</link>(fs,&#32;<link linkend="_lopcodes_8h_1a38d90774993bc1ec075f5705889f9982">CREATE_sJ</link>(o,&#32;j,&#32;k));
00442 }
00443 
00444 
00445 <emphasis role="comment">/*</emphasis>
00446 <emphasis role="comment">**&#32;Emit&#32;an&#32;&quot;extra&#32;argument&quot;&#32;instruction&#32;(format&#32;&apos;iAx&apos;)</emphasis>
00447 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00448"/><link linkend="_lcode_8c_1ab4119f5c8d10ac76a119cf70bb25c5b9">00448</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1ab4119f5c8d10ac76a119cf70bb25c5b9">codeextraarg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a)&#32;{
00449 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(a&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1a742a1bed832225c3800b3f73eb8b20ec">MAXARG_Ax</link>);
00450 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a7250af995defa0d720b40e35695775da">luaK_code</link>(fs,&#32;<link linkend="_lopcodes_8h_1ae08e838d4e7f9c8ed9b23a6a52d1b819">CREATE_Ax</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ae7a29a9b5e1490453da04cba95b39bea">OP_EXTRAARG</link>,&#32;a));
00451 }
00452 
00453 
00454 <emphasis role="comment">/*</emphasis>
00455 <emphasis role="comment">**&#32;Emit&#32;a&#32;&quot;load&#32;constant&quot;&#32;instruction,&#32;using&#32;either&#32;&apos;OP_LOADK&apos;</emphasis>
00456 <emphasis role="comment">**&#32;(if&#32;constant&#32;index&#32;&apos;k&apos;&#32;fits&#32;in&#32;18&#32;bits)&#32;or&#32;an&#32;&apos;OP_LOADKX&apos;</emphasis>
00457 <emphasis role="comment">**&#32;instruction&#32;with&#32;&quot;extra&#32;argument&quot;.</emphasis>
00458 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00459"/><link linkend="_lcode_8c_1a946579be848f1f4a532e57533f0a9919">00459</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a946579be848f1f4a532e57533f0a9919">luaK_codek</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;reg,&#32;<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
00460 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1aebbf650de6e9cbec539bfabcb9ae50c6">MAXARG_Bx</link>)
00461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a3fb5006a069fadbcb2ec7dde4740ad10">luaK_codeABx</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ab34a8eaf6d32d3c41810653d9eb99c1a">OP_LOADK</link>,&#32;reg,&#32;k);
00462 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00463 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;p&#32;=&#32;<link linkend="_lcode_8c_1a3fb5006a069fadbcb2ec7dde4740ad10">luaK_codeABx</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ae95580de7b3877b66fdf87366b8e5887">OP_LOADKX</link>,&#32;reg,&#32;0);
00464 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ab4119f5c8d10ac76a119cf70bb25c5b9">codeextraarg</link>(fs,&#32;k);
00465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
00466 &#32;&#32;}
00467 }
00468 
00469 
00470 <emphasis role="comment">/*</emphasis>
00471 <emphasis role="comment">**&#32;Check&#32;register-stack&#32;level,&#32;keeping&#32;track&#32;of&#32;its&#32;maximum&#32;size</emphasis>
00472 <emphasis role="comment">**&#32;in&#32;field&#32;&apos;maxstacksize&apos;</emphasis>
00473 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00474"/><link linkend="_lcode_8h_1ade83373047ab7254868bfd06bb8089b5">00474</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1afd941e61245bcb4d05bd3ba5b4ffec3b">luaK_checkstack</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
00475 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newstack&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;+&#32;n;
00476 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newstack&#32;&gt;&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1ad11e004e7f14af7e281b6da69d08ad7a">maxstacksize</link>)&#32;{
00477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newstack&#32;&gt;=&#32;<link linkend="_lcode_8c_1ab6ff7e20147df29e6e4710cc162be79a">MAXREGS</link>)
00478 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llex_8c_1aa5303ae41cbf1a2d9ef2f422751f85be">luaX_syntaxerror</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>,
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;function&#32;or&#32;expression&#32;needs&#32;too&#32;many&#32;registers&quot;</emphasis>);
00480 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1ad11e004e7f14af7e281b6da69d08ad7a">maxstacksize</link>&#32;=&#32;<link linkend="_llimits_8h_1a596f5b6e992f53a5a4e5732083448dd4">cast_byte</link>(newstack);
00481 &#32;&#32;}
00482 }
00483 
00484 
00485 <emphasis role="comment">/*</emphasis>
00486 <emphasis role="comment">**&#32;Reserve&#32;&apos;n&apos;&#32;registers&#32;in&#32;register&#32;stack</emphasis>
00487 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00488"/><link linkend="_lcode_8h_1abd5365c0b65143b55552bff3a9e6d681">00488</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
00489 &#32;&#32;<link linkend="_lcode_8c_1afd941e61245bcb4d05bd3ba5b4ffec3b">luaK_checkstack</link>(fs,&#32;n);
00490 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;+=&#32;n;
00491 }
00492 
00493 
00494 <emphasis role="comment">/*</emphasis>
00495 <emphasis role="comment">**&#32;Free&#32;register&#32;&apos;reg&apos;,&#32;if&#32;it&#32;is&#32;neither&#32;a&#32;constant&#32;index&#32;nor</emphasis>
00496 <emphasis role="comment">**&#32;a&#32;local&#32;variable.</emphasis>
00497 <emphasis role="comment">)</emphasis>
00498 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00499"/><link linkend="_lcode_8c_1a3331999888f54df141bd050408863d72">00499</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a3331999888f54df141bd050408863d72">freereg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;reg)&#32;{
00500 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reg&#32;&gt;=&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(fs))&#32;{
00501 &#32;&#32;&#32;&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>--;
00502 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(reg&#32;==&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>);
00503 &#32;&#32;}
00504 }
00505 
00506 
00507 <emphasis role="comment">/*</emphasis>
00508 <emphasis role="comment">**&#32;Free&#32;two&#32;registers&#32;in&#32;proper&#32;order</emphasis>
00509 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00510"/><link linkend="_lcode_8c_1ae1246635c52f314e973ba1dc527f565a">00510</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1ae1246635c52f314e973ba1dc527f565a">freeregs</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;r1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;r2)&#32;{
00511 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r1&#32;&gt;&#32;r2)&#32;{
00512 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a3331999888f54df141bd050408863d72">freereg</link>(fs,&#32;r1);
00513 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a3331999888f54df141bd050408863d72">freereg</link>(fs,&#32;r2);
00514 &#32;&#32;}
00515 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00516 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a3331999888f54df141bd050408863d72">freereg</link>(fs,&#32;r2);
00517 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a3331999888f54df141bd050408863d72">freereg</link>(fs,&#32;r1);
00518 &#32;&#32;}
00519 }
00520 
00521 
00522 <emphasis role="comment">/*</emphasis>
00523 <emphasis role="comment">**&#32;Free&#32;register&#32;used&#32;by&#32;expression&#32;&apos;e&apos;&#32;(if&#32;any)</emphasis>
00524 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00525"/><link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">00525</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00526 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>)
00527 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a3331999888f54df141bd050408863d72">freereg</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>);
00528 }
00529 
00530 
00531 <emphasis role="comment">/*</emphasis>
00532 <emphasis role="comment">**&#32;Free&#32;registers&#32;used&#32;by&#32;expressions&#32;&apos;e1&apos;&#32;and&#32;&apos;e2&apos;&#32;(if&#32;any)&#32;in&#32;proper</emphasis>
00533 <emphasis role="comment">**&#32;order.</emphasis>
00534 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00535"/><link linkend="_lcode_8c_1a2afdd34342361dc25c3b44f45c87558d">00535</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a2afdd34342361dc25c3b44f45c87558d">freeexps</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2)&#32;{
00536 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r1&#32;=&#32;(e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>)&#32;?&#32;e1-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;:&#32;-1;
00537 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r2&#32;=&#32;(e2-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>)&#32;?&#32;e2-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;:&#32;-1;
00538 &#32;&#32;<link linkend="_lcode_8c_1ae1246635c52f314e973ba1dc527f565a">freeregs</link>(fs,&#32;r1,&#32;r2);
00539 }
00540 
00541 
00542 <emphasis role="comment">/*</emphasis>
00543 <emphasis role="comment">**&#32;Add&#32;constant&#32;&apos;v&apos;&#32;to&#32;prototype&apos;s&#32;list&#32;of&#32;constants&#32;(field&#32;&apos;k&apos;).</emphasis>
00544 <emphasis role="comment">**&#32;Use&#32;scanner&apos;s&#32;table&#32;to&#32;cache&#32;position&#32;of&#32;constants&#32;in&#32;constant&#32;list</emphasis>
00545 <emphasis role="comment">**&#32;and&#32;try&#32;to&#32;reuse&#32;constants.&#32;Because&#32;some&#32;values&#32;should&#32;not&#32;be&#32;used</emphasis>
00546 <emphasis role="comment">**&#32;as&#32;keys&#32;(nil&#32;cannot&#32;be&#32;a&#32;key,&#32;integer&#32;keys&#32;can&#32;collapse&#32;with&#32;float</emphasis>
00547 <emphasis role="comment">**&#32;keys),&#32;the&#32;caller&#32;must&#32;provide&#32;a&#32;useful&#32;&apos;key&apos;&#32;for&#32;indexing&#32;the&#32;cache.</emphasis>
00548 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00549"/><link linkend="_lcode_8c_1ada05641e97457834344a5b3d2187bd45">00549</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1ada05641e97457834344a5b3d2187bd45">addk</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_t_value">TValue</link>&#32;*key,&#32;<link linkend="_struct_t_value">TValue</link>&#32;*v)&#32;{
00550 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>;
00551 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*f&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;
00552 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;*idx&#32;=&#32;<link linkend="_ltable_8c_1ab6b8518d8099b17f3ef58df047237fba">luaH_set</link>(L,&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1ae8d2bc73408dae7cb98274d0da3fe172">h</link>,&#32;key);&#32;&#32;<emphasis role="comment">/*&#32;index&#32;scanner&#32;table&#32;*/</emphasis>
00553 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k,&#32;oldsize;
00554 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lobject_8h_1abade243295a9140f7b86838fbb049054">ttisinteger</link>(idx))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;is&#32;there&#32;an&#32;index&#32;there?&#32;*/</emphasis>
00555 &#32;&#32;&#32;&#32;k&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(<link linkend="_lobject_8h_1af1a59636db050b842a791cd19086d925">ivalue</link>(idx));
00556 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;correct&#32;value?&#32;(warning:&#32;must&#32;distinguish&#32;floats&#32;from&#32;integers!)&#32;*/</emphasis>
00557 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;&lt;&#32;fs-&gt;nk&#32;&amp;&amp;&#32;<link linkend="_lobject_8h_1a01db083f8bc8b2eb51a45c0ba9967043">ttypetag</link>(&amp;f-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>[k])&#32;==&#32;<link linkend="_lobject_8h_1a01db083f8bc8b2eb51a45c0ba9967043">ttypetag</link>(v)&#32;&amp;&amp;
00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lvm_8h_1aedbcec0d2a0e951710844d11dfa59a07">luaV_rawequalobj</link>(&amp;f-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>[k],&#32;v))
00559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;k;&#32;&#32;<emphasis role="comment">/*&#32;reuse&#32;index&#32;*/</emphasis>
00560 &#32;&#32;}
00561 &#32;&#32;<emphasis role="comment">/*&#32;constant&#32;not&#32;found;&#32;create&#32;a&#32;new&#32;entry&#32;*/</emphasis>
00562 &#32;&#32;oldsize&#32;=&#32;f-&gt;<link linkend="_struct_proto_1a207b8b69ed4d393dd3c20925febd29e4">sizek</link>;
00563 &#32;&#32;k&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a7ce3fd35f4658d95e117a56ea98d5cba">nk</link>;
00564 &#32;&#32;<emphasis role="comment">/*&#32;numerical&#32;value&#32;does&#32;not&#32;need&#32;GC&#32;barrier;</emphasis>
00565 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;table&#32;has&#32;no&#32;metatable,&#32;so&#32;it&#32;does&#32;not&#32;need&#32;to&#32;invalidate&#32;cache&#32;*/</emphasis>
00566 &#32;&#32;<link linkend="_lobject_8h_1af9dd109ba186841ab26efb2d62baf4f6">setivalue</link>(idx,&#32;k);
00567 &#32;&#32;<link linkend="_lmem_8h_1a38823c4cdf0d53b73e1e3015affb06f9">luaM_growvector</link>(L,&#32;f-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>,&#32;k,&#32;f-&gt;<link linkend="_struct_proto_1a207b8b69ed4d393dd3c20925febd29e4">sizek</link>,&#32;<link linkend="_struct_t_value">TValue</link>,&#32;<link linkend="_lopcodes_8h_1a742a1bed832225c3800b3f73eb8b20ec">MAXARG_Ax</link>,&#32;<emphasis role="stringliteral">&quot;constants&quot;</emphasis>);
00568 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(oldsize&#32;&lt;&#32;f-&gt;sizek)&#32;<link linkend="_lobject_8h_1ad9034def7bbc1965ec3d714d84620b07">setnilvalue</link>(&amp;f-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>[oldsize++]);
00569 &#32;&#32;<link linkend="_lobject_8h_1acf2af15f3d5cceca8e8870f96634bc2d">setobj</link>(L,&#32;&amp;f-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>[k],&#32;v);
00570 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1a7ce3fd35f4658d95e117a56ea98d5cba">nk</link>++;
00571 &#32;&#32;<link linkend="_lgc_8h_1a21660a316c42bc1aad10f115e2261bca">luaC_barrier</link>(L,&#32;f,&#32;v);
00572 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;k;
00573 }
00574 
00575 
00576 <emphasis role="comment">/*</emphasis>
00577 <emphasis role="comment">**&#32;Add&#32;a&#32;string&#32;to&#32;list&#32;of&#32;constants&#32;and&#32;return&#32;its&#32;index.</emphasis>
00578 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00579"/><link linkend="_lcode_8c_1a7dfe719b62474bd7657147866e202e9a">00579</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a7dfe719b62474bd7657147866e202e9a">stringK</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_struct_t_string">TString</link>&#32;*s)&#32;{
00580 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;o;
00581 &#32;&#32;<link linkend="_lobject_8h_1a251a2d3bada66aaed6249a89a0afe5f0">setsvalue</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;&amp;o,&#32;s);
00582 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1ada05641e97457834344a5b3d2187bd45">addk</link>(fs,&#32;&amp;o,&#32;&amp;o);&#32;&#32;<emphasis role="comment">/*&#32;use&#32;string&#32;itself&#32;as&#32;key&#32;*/</emphasis>
00583 }
00584 
00585 
00586 <emphasis role="comment">/*</emphasis>
00587 <emphasis role="comment">**&#32;Add&#32;an&#32;integer&#32;to&#32;list&#32;of&#32;constants&#32;and&#32;return&#32;its&#32;index.</emphasis>
00588 <emphasis role="comment">**&#32;Integers&#32;use&#32;userdata&#32;as&#32;keys&#32;to&#32;avoid&#32;collision&#32;with&#32;floats&#32;with</emphasis>
00589 <emphasis role="comment">**&#32;same&#32;value;&#32;conversion&#32;to&#32;&apos;void*&apos;&#32;is&#32;used&#32;only&#32;for&#32;hashing,&#32;so&#32;there</emphasis>
00590 <emphasis role="comment">**&#32;are&#32;no&#32;&quot;precision&quot;&#32;problems.</emphasis>
00591 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00592"/><link linkend="_lcode_8c_1a6154c1594ec12080f2393950eb2b98e3">00592</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a6154c1594ec12080f2393950eb2b98e3">luaK_intK</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;n)&#32;{
00593 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;k,&#32;o;
00594 &#32;&#32;<link linkend="_lobject_8h_1a0784c90d154ccf7c643b56a00c62412a">setpvalue</link>(&amp;k,&#32;<link linkend="_llimits_8h_1a672c0fddf71f33d86ed8aa62ad914d52">cast_voidp</link>(<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>(n)));
00595 &#32;&#32;<link linkend="_lobject_8h_1af9dd109ba186841ab26efb2d62baf4f6">setivalue</link>(&amp;o,&#32;n);
00596 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1ada05641e97457834344a5b3d2187bd45">addk</link>(fs,&#32;&amp;k,&#32;&amp;o);
00597 }
00598 
00599 <emphasis role="comment">/*</emphasis>
00600 <emphasis role="comment">**&#32;Add&#32;a&#32;float&#32;to&#32;list&#32;of&#32;constants&#32;and&#32;return&#32;its&#32;index.</emphasis>
00601 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00602"/><link linkend="_lcode_8c_1aa55d8b442bf4ee8c1c4838e4deec9a56">00602</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1aa55d8b442bf4ee8c1c4838e4deec9a56">luaK_numberK</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;r)&#32;{
00603 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;o;
00604 &#32;&#32;<link linkend="_lobject_8h_1ae357382324a8220a3cf77607752de887">setfltvalue</link>(&amp;o,&#32;r);
00605 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1ada05641e97457834344a5b3d2187bd45">addk</link>(fs,&#32;&amp;o,&#32;&amp;o);&#32;&#32;<emphasis role="comment">/*&#32;use&#32;number&#32;itself&#32;as&#32;key&#32;*/</emphasis>
00606 }
00607 
00608 
00609 <emphasis role="comment">/*</emphasis>
00610 <emphasis role="comment">**&#32;Add&#32;a&#32;false&#32;to&#32;list&#32;of&#32;constants&#32;and&#32;return&#32;its&#32;index.</emphasis>
00611 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00612"/><link linkend="_lcode_8c_1a6265a2a98b8fd0c973f82dd6aa11c814">00612</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a6265a2a98b8fd0c973f82dd6aa11c814">boolF</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00613 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;o;
00614 &#32;&#32;<link linkend="_lobject_8h_1ad0259526a10884432dd2e7ea10b90e0f">setbfvalue</link>(&amp;o);
00615 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1ada05641e97457834344a5b3d2187bd45">addk</link>(fs,&#32;&amp;o,&#32;&amp;o);&#32;&#32;<emphasis role="comment">/*&#32;use&#32;boolean&#32;itself&#32;as&#32;key&#32;*/</emphasis>
00616 }
00617 
00618 
00619 <emphasis role="comment">/*</emphasis>
00620 <emphasis role="comment">**&#32;Add&#32;a&#32;true&#32;to&#32;list&#32;of&#32;constants&#32;and&#32;return&#32;its&#32;index.</emphasis>
00621 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00622"/><link linkend="_lcode_8c_1a34c4676c9334bf58d12b1d0223897e31">00622</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a34c4676c9334bf58d12b1d0223897e31">boolT</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00623 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;o;
00624 &#32;&#32;<link linkend="_lobject_8h_1a1b86e0dccf6b92c4c89d47af26e3a8e3">setbtvalue</link>(&amp;o);
00625 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1ada05641e97457834344a5b3d2187bd45">addk</link>(fs,&#32;&amp;o,&#32;&amp;o);&#32;&#32;<emphasis role="comment">/*&#32;use&#32;boolean&#32;itself&#32;as&#32;key&#32;*/</emphasis>
00626 }
00627 
00628 
00629 <emphasis role="comment">/*</emphasis>
00630 <emphasis role="comment">**&#32;Add&#32;nil&#32;to&#32;list&#32;of&#32;constants&#32;and&#32;return&#32;its&#32;index.</emphasis>
00631 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00632"/><link linkend="_lcode_8c_1a96b95ed8f53ee7aba7c6e81a27df6d63">00632</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a96b95ed8f53ee7aba7c6e81a27df6d63">nilK</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
00633 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;k,&#32;v;
00634 &#32;&#32;<link linkend="_lobject_8h_1ad9034def7bbc1965ec3d714d84620b07">setnilvalue</link>(&amp;v);
00635 &#32;&#32;<emphasis role="comment">/*&#32;cannot&#32;use&#32;nil&#32;as&#32;key;&#32;instead&#32;use&#32;table&#32;itself&#32;to&#32;represent&#32;nil&#32;*/</emphasis>
00636 &#32;&#32;<link linkend="_lobject_8h_1ab9379699ac579d54410e3542f061bbad">sethvalue</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;&amp;k,&#32;fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1ae8d2bc73408dae7cb98274d0da3fe172">h</link>);
00637 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1ada05641e97457834344a5b3d2187bd45">addk</link>(fs,&#32;&amp;k,&#32;&amp;v);
00638 }
00639 
00640 
00641 <emphasis role="comment">/*</emphasis>
00642 <emphasis role="comment">**&#32;Check&#32;whether&#32;&apos;i&apos;&#32;can&#32;be&#32;stored&#32;in&#32;an&#32;&apos;sC&apos;&#32;operand.&#32;Equivalent&#32;to</emphasis>
00643 <emphasis role="comment">**&#32;(0&#32;&lt;=&#32;int2sC(i)&#32;&amp;&amp;&#32;int2sC(i)&#32;&lt;=&#32;MAXARG_C)&#32;but&#32;without&#32;risk&#32;of</emphasis>
00644 <emphasis role="comment">**&#32;overflows&#32;in&#32;the&#32;hidden&#32;addition&#32;inside&#32;&apos;int2sC&apos;.</emphasis>
00645 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00646"/><link linkend="_lcode_8c_1a3447d4fe8de721e03288feb166a7ede0">00646</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a3447d4fe8de721e03288feb166a7ede0">fitsC</link>&#32;(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;i)&#32;{
00647 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_llimits_8h_1a5871309e671ba9f938fcb1e0d3bcbeca">l_castS2U</link>(i)&#32;+&#32;<link linkend="_lopcodes_8h_1aa857ab7e20a7c4cb44ec3b6d3d2ec2bd">OFFSET_sC</link>&#32;&lt;=&#32;<link linkend="_llimits_8h_1a6ce2ddc5b419ed6f302573db3cc03e56">cast_uint</link>(<link linkend="_lopcodes_8h_1a15a7daf14e4640990519e4e7f627900f">MAXARG_C</link>));
00648 }
00649 
00650 
00651 <emphasis role="comment">/*</emphasis>
00652 <emphasis role="comment">**&#32;Check&#32;whether&#32;&apos;i&apos;&#32;can&#32;be&#32;stored&#32;in&#32;an&#32;&apos;sBx&apos;&#32;operand.</emphasis>
00653 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00654"/><link linkend="_lcode_8c_1a04beeab4c7c24c3b850206137e7f61f3">00654</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a04beeab4c7c24c3b850206137e7f61f3">fitsBx</link>&#32;(<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;i)&#32;{
00655 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(-<link linkend="_lopcodes_8h_1afda4d6a4b816b12ffd722e04b20f0884">OFFSET_sBx</link>&#32;&lt;=&#32;i&#32;&amp;&amp;&#32;i&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1aebbf650de6e9cbec539bfabcb9ae50c6">MAXARG_Bx</link>&#32;-&#32;<link linkend="_lopcodes_8h_1afda4d6a4b816b12ffd722e04b20f0884">OFFSET_sBx</link>);
00656 }
00657 
00658 
<anchor xml:id="_lcode_8c_source_1l00659"/><link linkend="_lcode_8h_1a511cc8052e9f5ffc7a9ac616825efa0d">00659</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a2fff5f96536d86c8d5df7bdf2ea4d317">luaK_int</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;reg,&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;i)&#32;{
00660 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a04beeab4c7c24c3b850206137e7f61f3">fitsBx</link>(i))
00661 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a0cebf3e6a7318f6f9b8ebd96b1d1ed70">luaK_codeAsBx</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a60de4d2d9c05216369b32f22325ac26c">OP_LOADI</link>,&#32;reg,&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(i));
00662 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00663 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a946579be848f1f4a532e57533f0a9919">luaK_codek</link>(fs,&#32;reg,&#32;<link linkend="_lcode_8c_1a6154c1594ec12080f2393950eb2b98e3">luaK_intK</link>(fs,&#32;i));
00664 }
00665 
00666 
<anchor xml:id="_lcode_8c_source_1l00667"/><link linkend="_lcode_8c_1a463a7c61f87515bd9ce739e51ffdac53">00667</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a463a7c61f87515bd9ce739e51ffdac53">luaK_float</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;reg,&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;f)&#32;{
00668 &#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;fi;
00669 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lvm_8c_1a3a9a9378ccdbd0ea4cba6555673dccf9">luaV_flttointeger</link>(f,&#32;&amp;fi,&#32;<link linkend="_lvm_8h_1a1639065f78212a54317141b2703061c0a7eaebd7cdc41b6f7c4ae319a813f3995">F2Ieq</link>)&#32;&amp;&amp;&#32;<link linkend="_lcode_8c_1a04beeab4c7c24c3b850206137e7f61f3">fitsBx</link>(fi))
00670 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a0cebf3e6a7318f6f9b8ebd96b1d1ed70">luaK_codeAsBx</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a82da04477198d0562981ddd7d3adda8b">OP_LOADF</link>,&#32;reg,&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(fi));
00671 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00672 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a946579be848f1f4a532e57533f0a9919">luaK_codek</link>(fs,&#32;reg,&#32;<link linkend="_lcode_8c_1aa55d8b442bf4ee8c1c4838e4deec9a56">luaK_numberK</link>(fs,&#32;f));
00673 }
00674 
00675 
00676 <emphasis role="comment">/*</emphasis>
00677 <emphasis role="comment">**&#32;Convert&#32;a&#32;constant&#32;in&#32;&apos;v&apos;&#32;into&#32;an&#32;expression&#32;description&#32;&apos;e&apos;</emphasis>
00678 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00679"/><link linkend="_lcode_8c_1ad595e6cb1e482df9d3e8cb0ba97316b1">00679</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1ad595e6cb1e482df9d3e8cb0ba97316b1">const2exp</link>&#32;(<link linkend="_struct_t_value">TValue</link>&#32;*v,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00680 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_lobject_8h_1a01db083f8bc8b2eb51a45c0ba9967043">ttypetag</link>(v))&#32;{
00681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a69aa5cae89d634d458e0da4957257745">LUA_VNUMINT</link>:
00682 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>&#32;=&#32;<link linkend="_lobject_8h_1af1a59636db050b842a791cd19086d925">ivalue</link>(v);
00683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a19aaaf978586be9032b63b7a8807631a">LUA_VNUMFLT</link>:
00685 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a53608b3835872ab9ee76fc00cfa47b4f">nval</link>&#32;=&#32;<link linkend="_lobject_8h_1a7d7d6b08f40350c9e7364e9cb984d744">fltvalue</link>(v);
00686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00687 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a95236d400066ed64a37c72d3dada7e9d">LUA_VFALSE</link>:
00688 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa">VFALSE</link>;
00689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00690 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1aed66cd95aa3f518c947b5bd9e17bab47">LUA_VTRUE</link>:
00691 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea1228eca4fdc8e7643d18155507942482">VTRUE</link>;
00692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00693 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1aac7a0aeb62c96ba16c7638e707bfaac0">LUA_VNIL</link>:
00694 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea47eb055b6420db339de283cef27ad5d8">VNIL</link>;
00695 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00696 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a794410ffd7267ef873eb05ac695b1ba6">LUA_VSHRSTR</link>:&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a6869fcb0a0178b6d70d431eae1683199">LUA_VLNGSTR</link>:
00697 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab06fcbc55fc36e7552634eef34375124">VKSTR</link>;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a97fdec5618426b4684c2d66924e85713">strval</link>&#32;=&#32;<link linkend="_lobject_8h_1a8661397faed512ccc9c70a4661f1a83d">tsvalue</link>(v);
00698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(0);
00700 &#32;&#32;}
00701 }
00702 
00703 
00704 <emphasis role="comment">/*</emphasis>
00705 <emphasis role="comment">**&#32;Fix&#32;an&#32;expression&#32;to&#32;return&#32;the&#32;number&#32;of&#32;results&#32;&apos;nresults&apos;.</emphasis>
00706 <emphasis role="comment">**&#32;&apos;e&apos;&#32;must&#32;be&#32;a&#32;multi-ret&#32;expression&#32;(function&#32;call&#32;or&#32;vararg).</emphasis>
00707 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00708"/><link linkend="_lcode_8h_1acae0354c40f684d990fd3aa73bbcd770">00708</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1aa088b6c0fff724b3d4c76830416da244">luaK_setreturns</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nresults)&#32;{
00709 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*pc&#32;=&#32;&amp;<link linkend="_lcode_8h_1ae32808dba4795004b96e16024b1f9b2c">getinstruction</link>(fs,&#32;e);
00710 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae61a8c04cfeabd756694cd13774e47b7">VCALL</link>)&#32;&#32;<emphasis role="comment">/*&#32;expression&#32;is&#32;an&#32;open&#32;function&#32;call?&#32;*/</emphasis>
00711 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a085f9af93bc2386ddb0b9fb53d5ff0b8">SETARG_C</link>(*pc,&#32;nresults&#32;+&#32;1);
00712 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00713 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea3f5f58de0fa9e69449d4e2362ddbfaa1">VVARARG</link>);
00714 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a085f9af93bc2386ddb0b9fb53d5ff0b8">SETARG_C</link>(*pc,&#32;nresults&#32;+&#32;1);
00715 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a01900876b9281238c6dbb4d7bc59ca66">SETARG_A</link>(*pc,&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>);
00716 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;1);
00717 &#32;&#32;}
00718 }
00719 
00720 
00721 <emphasis role="comment">/*</emphasis>
00722 <emphasis role="comment">**&#32;Convert&#32;a&#32;VKSTR&#32;to&#32;a&#32;VK</emphasis>
00723 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00724"/><link linkend="_lcode_8c_1ad8d97d1b9538e4e8412654930d56e5ed">00724</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1ad8d97d1b9538e4e8412654930d56e5ed">str2K</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00725 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab06fcbc55fc36e7552634eef34375124">VKSTR</link>);
00726 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8c_1a7dfe719b62474bd7657147866e202e9a">stringK</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a97fdec5618426b4684c2d66924e85713">strval</link>);
00727 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaf926040fb3c22e9456f27b78e4ad19d2">VK</link>;
00728 }
00729 
00730 
00731 <emphasis role="comment">/*</emphasis>
00732 <emphasis role="comment">**&#32;Fix&#32;an&#32;expression&#32;to&#32;return&#32;one&#32;result.</emphasis>
00733 <emphasis role="comment">**&#32;If&#32;expression&#32;is&#32;not&#32;a&#32;multi-ret&#32;expression&#32;(function&#32;call&#32;or</emphasis>
00734 <emphasis role="comment">**&#32;vararg),&#32;it&#32;already&#32;returns&#32;one&#32;result,&#32;so&#32;nothing&#32;needs&#32;to&#32;be&#32;done.</emphasis>
00735 <emphasis role="comment">**&#32;Function&#32;calls&#32;become&#32;VNONRELOC&#32;expressions&#32;(as&#32;its&#32;result&#32;comes</emphasis>
00736 <emphasis role="comment">**&#32;fixed&#32;in&#32;the&#32;base&#32;register&#32;of&#32;the&#32;call),&#32;while&#32;vararg&#32;expressions</emphasis>
00737 <emphasis role="comment">**&#32;become&#32;VRELOC&#32;(as&#32;OP_VARARG&#32;puts&#32;its&#32;results&#32;where&#32;it&#32;wants).</emphasis>
00738 <emphasis role="comment">**&#32;(Calls&#32;are&#32;created&#32;returning&#32;one&#32;result,&#32;so&#32;that&#32;does&#32;not&#32;need</emphasis>
00739 <emphasis role="comment">**&#32;to&#32;be&#32;fixed.)</emphasis>
00740 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00741"/><link linkend="_lcode_8h_1a890dbdb46581586862dbcf56b077f97f">00741</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a80466f0e006b20a0c0c04f6bcc5b656d">luaK_setoneret</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00742 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae61a8c04cfeabd756694cd13774e47b7">VCALL</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;expression&#32;is&#32;an&#32;open&#32;function&#32;call?&#32;*/</emphasis>
00743 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;already&#32;returns&#32;1&#32;value&#32;*/</emphasis>
00744 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lopcodes_8h_1af96cb84f2685fda7f36d3d099dba6a44">GETARG_C</link>(<link linkend="_lcode_8h_1ae32808dba4795004b96e16024b1f9b2c">getinstruction</link>(fs,&#32;e))&#32;==&#32;2);
00745 &#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>;&#32;&#32;<emphasis role="comment">/*&#32;result&#32;has&#32;fixed&#32;position&#32;*/</emphasis>
00746 &#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lopcodes_8h_1a1d504abc1e2246548f89977210dce0b9">GETARG_A</link>(<link linkend="_lcode_8h_1ae32808dba4795004b96e16024b1f9b2c">getinstruction</link>(fs,&#32;e));
00747 &#32;&#32;}
00748 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea3f5f58de0fa9e69449d4e2362ddbfaa1">VVARARG</link>)&#32;{
00749 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a085f9af93bc2386ddb0b9fb53d5ff0b8">SETARG_C</link>(<link linkend="_lcode_8h_1ae32808dba4795004b96e16024b1f9b2c">getinstruction</link>(fs,&#32;e),&#32;2);
00750 &#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>;&#32;&#32;<emphasis role="comment">/*&#32;can&#32;relocate&#32;its&#32;simple&#32;result&#32;*/</emphasis>
00751 &#32;&#32;}
00752 }
00753 
00754 
00755 <emphasis role="comment">/*</emphasis>
00756 <emphasis role="comment">**&#32;Ensure&#32;that&#32;expression&#32;&apos;e&apos;&#32;is&#32;not&#32;a&#32;variable&#32;(nor&#32;a&#32;constant).</emphasis>
00757 <emphasis role="comment">**&#32;(Expression&#32;still&#32;may&#32;have&#32;jump&#32;lists.)</emphasis>
00758 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00759"/><link linkend="_lcode_8h_1a4722275409ea90ad0cfc56723b8f21bb">00759</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00760 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{
00761 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea45b9027634b5e43ca50f4d6efbbe4220">VCONST</link>:&#32;{
00762 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad595e6cb1e482df9d3e8cb0ba97316b1">const2exp</link>(<link linkend="_lcode_8c_1a73505708162792e73d66a9a0307f2b48">const2val</link>(fs,&#32;e),&#32;e);
00763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00764 &#32;&#32;&#32;&#32;}
00765 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;already&#32;in&#32;a&#32;register&#32;*/</emphasis>
00766 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.sidx;
00767 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>;&#32;&#32;<emphasis role="comment">/*&#32;becomes&#32;a&#32;non-relocatable&#32;value&#32;*/</emphasis>
00768 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00769 &#32;&#32;&#32;&#32;}
00770 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;move&#32;value&#32;to&#32;some&#32;(pending)&#32;register&#32;*/</emphasis>
00771 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ab48573533495922f053a7d1c9b0d00b4">OP_GETUPVAL</link>,&#32;0,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;0);
00772 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>;
00773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00774 &#32;&#32;&#32;&#32;}
00775 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea83132d11273ccae411b61430023e4be0">VINDEXUP</link>:&#32;{
00776 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7acba90301f3ac979a3edd23f74182367b">OP_GETTABUP</link>,&#32;0,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx);
00777 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>;
00778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00779 &#32;&#32;&#32;&#32;}
00780 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8007ab33287e6ed71b323366234b532a">VINDEXI</link>:&#32;{
00781 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a3331999888f54df141bd050408863d72">freereg</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t);
00782 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a965a4251f6730e9c8e5ca9e4ba4d8568">OP_GETI</link>,&#32;0,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx);
00783 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>;
00784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00785 &#32;&#32;&#32;&#32;}
00786 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea16545cc6f945dda467b1418b80a35876">VINDEXSTR</link>:&#32;{
00787 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a3331999888f54df141bd050408863d72">freereg</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t);
00788 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ab8cb85274c0cd7f8d8525953bd844207">OP_GETFIELD</link>,&#32;0,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx);
00789 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>;
00790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00791 &#32;&#32;&#32;&#32;}
00792 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab1cb541b6c8f3a5f03b17184a2facc85">VINDEXED</link>:&#32;{
00793 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ae1246635c52f314e973ba1dc527f565a">freeregs</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx);
00794 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ab1ec2a36c59db7612249cc31e382fdd9">OP_GETTABLE</link>,&#32;0,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx);
00795 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>;
00796 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00797 &#32;&#32;&#32;&#32;}
00798 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea3f5f58de0fa9e69449d4e2362ddbfaa1">VVARARG</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eae61a8c04cfeabd756694cd13774e47b7">VCALL</link>:&#32;{
00799 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a80466f0e006b20a0c0c04f6bcc5b656d">luaK_setoneret</link>(fs,&#32;e);
00800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00801 &#32;&#32;&#32;&#32;}
00802 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;there&#32;is&#32;one&#32;value&#32;available&#32;(somewhere)&#32;*/</emphasis>
00803 &#32;&#32;}
00804 }
00805 
00806 
00807 <emphasis role="comment">/*</emphasis>
00808 <emphasis role="comment">**&#32;Ensures&#32;expression&#32;value&#32;is&#32;in&#32;register&#32;&apos;reg&apos;&#32;(and&#32;therefore</emphasis>
00809 <emphasis role="comment">**&#32;&apos;e&apos;&#32;will&#32;become&#32;a&#32;non-relocatable&#32;expression).</emphasis>
00810 <emphasis role="comment">**&#32;(Expression&#32;still&#32;may&#32;have&#32;jump&#32;lists.)</emphasis>
00811 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00812"/><link linkend="_lcode_8c_1a961993a449bc9612ac966652646ffad6">00812</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a961993a449bc9612ac966652646ffad6">discharge2reg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;reg)&#32;{
00813 &#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(fs,&#32;e);
00814 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{
00815 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea47eb055b6420db339de283cef27ad5d8">VNIL</link>:&#32;{
00816 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a625d410137e33fbd9593426c6e74bcf1">luaK_nil</link>(fs,&#32;reg,&#32;1);
00817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00818 &#32;&#32;&#32;&#32;}
00819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa">VFALSE</link>:&#32;{
00820 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a8653663e33ebaa8572c7e76c86c6539d">OP_LOADFALSE</link>,&#32;reg,&#32;0,&#32;0);
00821 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00822 &#32;&#32;&#32;&#32;}
00823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea1228eca4fdc8e7643d18155507942482">VTRUE</link>:&#32;{
00824 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ac1fc81b1c2650990762cf656ac42540d">OP_LOADTRUE</link>,&#32;reg,&#32;0,&#32;0);
00825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00826 &#32;&#32;&#32;&#32;}
00827 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab06fcbc55fc36e7552634eef34375124">VKSTR</link>:&#32;{
00828 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad8d97d1b9538e4e8412654930d56e5ed">str2K</link>(fs,&#32;e);
00829 &#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">/*&#32;FALLTHROUGH&#32;*/</emphasis>
00830 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaf926040fb3c22e9456f27b78e4ad19d2">VK</link>:&#32;{
00831 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a946579be848f1f4a532e57533f0a9919">luaK_codek</link>(fs,&#32;reg,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>);
00832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00833 &#32;&#32;&#32;&#32;}
00834 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>:&#32;{
00835 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a463a7c61f87515bd9ce739e51ffdac53">luaK_float</link>(fs,&#32;reg,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a53608b3835872ab9ee76fc00cfa47b4f">nval</link>);
00836 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00837 &#32;&#32;&#32;&#32;}
00838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>:&#32;{
00839 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a2fff5f96536d86c8d5df7bdf2ea4d317">luaK_int</link>(fs,&#32;reg,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>);
00840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00841 &#32;&#32;&#32;&#32;}
00842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>:&#32;{
00843 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*pc&#32;=&#32;&amp;<link linkend="_lcode_8h_1ae32808dba4795004b96e16024b1f9b2c">getinstruction</link>(fs,&#32;e);
00844 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a01900876b9281238c6dbb4d7bc59ca66">SETARG_A</link>(*pc,&#32;reg);&#32;&#32;<emphasis role="comment">/*&#32;instruction&#32;will&#32;put&#32;result&#32;in&#32;&apos;reg&apos;&#32;*/</emphasis>
00845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00846 &#32;&#32;&#32;&#32;}
00847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>:&#32;{
00848 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reg&#32;!=&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>)
00849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7addf83bbc02b6a88d325135c880d12184">OP_MOVE</link>,&#32;reg,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;0);
00850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00851 &#32;&#32;&#32;&#32;}
00852 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{
00853 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead1066918edd602fb0577c9f58ced173c">VJMP</link>);
00854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;nothing&#32;to&#32;do...&#32;*/</emphasis>
00855 &#32;&#32;&#32;&#32;}
00856 &#32;&#32;}
00857 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;reg;
00858 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>;
00859 }
00860 
00861 
00862 <emphasis role="comment">/*</emphasis>
00863 <emphasis role="comment">**&#32;Ensures&#32;expression&#32;value&#32;is&#32;in&#32;any&#32;register.</emphasis>
00864 <emphasis role="comment">**&#32;(Expression&#32;still&#32;may&#32;have&#32;jump&#32;lists.)</emphasis>
00865 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00866"/><link linkend="_lcode_8c_1a42950f3fd3e5bf08697d861e865119a1">00866</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a42950f3fd3e5bf08697d861e865119a1">discharge2anyreg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00867 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;!=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;no&#32;fixed&#32;register&#32;yet?&#32;*/</emphasis>
00868 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;a&#32;register&#32;*/</emphasis>
00869 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a961993a449bc9612ac966652646ffad6">discharge2reg</link>(fs,&#32;e,&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>-1);&#32;&#32;<emphasis role="comment">/*&#32;put&#32;value&#32;there&#32;*/</emphasis>
00870 &#32;&#32;}
00871 }
00872 
00873 
<anchor xml:id="_lcode_8c_source_1l00874"/><link linkend="_lcode_8c_1ab947c67ef18474ab26abc6f1a81c3dfd">00874</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1ab947c67ef18474ab26abc6f1a81c3dfd">code_loadbool</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;A,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op)&#32;{
00875 &#32;&#32;<link linkend="_lcode_8c_1afd70025e040dde0ef167df148de201b0">luaK_getlabel</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;those&#32;instructions&#32;may&#32;be&#32;jump&#32;targets&#32;*/</emphasis>
00876 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;op,&#32;A,&#32;0,&#32;0);
00877 }
00878 
00879 
00880 <emphasis role="comment">/*</emphasis>
00881 <emphasis role="comment">**&#32;check&#32;whether&#32;list&#32;has&#32;any&#32;jump&#32;that&#32;do&#32;not&#32;produce&#32;a&#32;value</emphasis>
00882 <emphasis role="comment">**&#32;or&#32;produce&#32;an&#32;inverted&#32;value</emphasis>
00883 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00884"/><link linkend="_lcode_8c_1af4b1d063270645304b0642c1f1d79cb3">00884</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1af4b1d063270645304b0642c1f1d79cb3">need_value</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;list)&#32;{
00885 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;list&#32;!=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;&#32;list&#32;=&#32;<link linkend="_lcode_8c_1ac74dd95e53d610cf12e752f3075fe450">getjump</link>(fs,&#32;list))&#32;{
00886 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;i&#32;=&#32;*<link linkend="_lcode_8c_1a755e9c104abc7fa7bb87437964b19628">getjumpcontrol</link>(fs,&#32;list);
00887 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(i)&#32;!=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a39b4077a15fb8fffc166f5045dddacee">OP_TESTSET</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00888 &#32;&#32;}
00889 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;found&#32;*/</emphasis>
00890 }
00891 
00892 
00893 <emphasis role="comment">/*</emphasis>
00894 <emphasis role="comment">**&#32;Ensures&#32;final&#32;expression&#32;result&#32;(which&#32;includes&#32;results&#32;from&#32;its</emphasis>
00895 <emphasis role="comment">**&#32;jump&#32;lists)&#32;is&#32;in&#32;register&#32;&apos;reg&apos;.</emphasis>
00896 <emphasis role="comment">**&#32;If&#32;expression&#32;has&#32;jumps,&#32;need&#32;to&#32;patch&#32;these&#32;jumps&#32;either&#32;to</emphasis>
00897 <emphasis role="comment">**&#32;its&#32;final&#32;position&#32;or&#32;to&#32;&quot;load&quot;&#32;instructions&#32;(for&#32;those&#32;tests</emphasis>
00898 <emphasis role="comment">**&#32;that&#32;do&#32;not&#32;produce&#32;values).</emphasis>
00899 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00900"/><link linkend="_lcode_8c_1aa89e7af4e4f692877eab94959920c493">00900</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1aa89e7af4e4f692877eab94959920c493">exp2reg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;reg)&#32;{
00901 &#32;&#32;<link linkend="_lcode_8c_1a961993a449bc9612ac966652646ffad6">discharge2reg</link>(fs,&#32;e,&#32;reg);
00902 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead1066918edd602fb0577c9f58ced173c">VJMP</link>)&#32;&#32;<emphasis role="comment">/*&#32;expression&#32;itself&#32;is&#32;a&#32;test?&#32;*/</emphasis>
00903 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a99718e3c19e193690f60b7595bee952e">luaK_concat</link>(fs,&#32;&amp;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>);&#32;&#32;<emphasis role="comment">/*&#32;put&#32;this&#32;jump&#32;in&#32;&apos;t&apos;&#32;list&#32;*/</emphasis>
00904 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e))&#32;{
00905 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keyword">final</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;position&#32;after&#32;whole&#32;expression&#32;*/</emphasis>
00906 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;p_f&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;&#32;&#32;<emphasis role="comment">/*&#32;position&#32;of&#32;an&#32;eventual&#32;LOAD&#32;false&#32;*/</emphasis>
00907 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;p_t&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;&#32;&#32;<emphasis role="comment">/*&#32;position&#32;of&#32;an&#32;eventual&#32;LOAD&#32;true&#32;*/</emphasis>
00908 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1af4b1d063270645304b0642c1f1d79cb3">need_value</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>)&#32;||&#32;<link linkend="_lcode_8c_1af4b1d063270645304b0642c1f1d79cb3">need_value</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>))&#32;{
00909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fj&#32;=&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead1066918edd602fb0577c9f58ced173c">VJMP</link>)&#32;?&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>&#32;:&#32;<link linkend="_lcode_8c_1a01cb8acfbbf9911a63956cbe3fe1bdb6">luaK_jump</link>(fs);
00910 &#32;&#32;&#32;&#32;&#32;&#32;p_f&#32;=&#32;<link linkend="_lcode_8c_1ab947c67ef18474ab26abc6f1a81c3dfd">code_loadbool</link>(fs,&#32;reg,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a1163876c1d6575f1f220aca5be6751b8">OP_LFALSESKIP</link>);&#32;&#32;<emphasis role="comment">/*&#32;skip&#32;next&#32;inst.&#32;*/</emphasis>
00911 &#32;&#32;&#32;&#32;&#32;&#32;p_t&#32;=&#32;<link linkend="_lcode_8c_1ab947c67ef18474ab26abc6f1a81c3dfd">code_loadbool</link>(fs,&#32;reg,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ac1fc81b1c2650990762cf656ac42540d">OP_LOADTRUE</link>);
00912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;jump&#32;around&#32;these&#32;booleans&#32;if&#32;&apos;e&apos;&#32;is&#32;not&#32;a&#32;test&#32;*/</emphasis>
00913 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a5748ad3c940c7916a2586fab6181a197">luaK_patchtohere</link>(fs,&#32;fj);
00914 &#32;&#32;&#32;&#32;}
00915 &#32;&#32;&#32;&#32;<emphasis role="keyword">final</emphasis>&#32;=&#32;<link linkend="_lcode_8c_1afd70025e040dde0ef167df148de201b0">luaK_getlabel</link>(fs);
00916 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a83e8d2f1641cfd3ed1c465f07f383c5e">patchlistaux</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>,&#32;<emphasis role="keyword">final</emphasis>,&#32;reg,&#32;p_f);
00917 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a83e8d2f1641cfd3ed1c465f07f383c5e">patchlistaux</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>,&#32;<emphasis role="keyword">final</emphasis>,&#32;reg,&#32;p_t);
00918 &#32;&#32;}
00919 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;
00920 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;reg;
00921 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>;
00922 }
00923 
00924 
00925 <emphasis role="comment">/*</emphasis>
00926 <emphasis role="comment">**&#32;Ensures&#32;final&#32;expression&#32;result&#32;is&#32;in&#32;next&#32;available&#32;register.</emphasis>
00927 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00928"/><link linkend="_lcode_8h_1a61926f09ebafc501840e6cac1bebb16d">00928</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00929 &#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(fs,&#32;e);
00930 &#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;e);
00931 &#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;1);
00932 &#32;&#32;<link linkend="_lcode_8c_1aa89e7af4e4f692877eab94959920c493">exp2reg</link>(fs,&#32;e,&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;-&#32;1);
00933 }
00934 
00935 
00936 <emphasis role="comment">/*</emphasis>
00937 <emphasis role="comment">**&#32;Ensures&#32;final&#32;expression&#32;result&#32;is&#32;in&#32;some&#32;(any)&#32;register</emphasis>
00938 <emphasis role="comment">**&#32;and&#32;return&#32;that&#32;register.</emphasis>
00939 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00940"/><link linkend="_lcode_8h_1a219ca12ddb52437285a46bddfc4feeb8">00940</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00941 &#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(fs,&#32;e);
00942 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;expression&#32;already&#32;has&#32;a&#32;register?&#32;*/</emphasis>
00943 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e))&#32;&#32;<emphasis role="comment">/*&#32;no&#32;jumps?&#32;*/</emphasis>
00944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;result&#32;is&#32;already&#32;in&#32;a&#32;register&#32;*/</emphasis>
00945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;&gt;=&#32;<link linkend="_lparser_8c_1a03d8535460edd67f5c2d495c2a08bdd2">luaY_nvarstack</link>(fs))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;reg.&#32;is&#32;not&#32;a&#32;local?&#32;*/</emphasis>
00946 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1aa89e7af4e4f692877eab94959920c493">exp2reg</link>(fs,&#32;e,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>);&#32;&#32;<emphasis role="comment">/*&#32;put&#32;final&#32;result&#32;in&#32;it&#32;*/</emphasis>
00947 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;
00948 &#32;&#32;&#32;&#32;}
00949 &#32;&#32;}
00950 &#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;e);&#32;&#32;<emphasis role="comment">/*&#32;otherwise,&#32;use&#32;next&#32;available&#32;register&#32;*/</emphasis>
00951 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;
00952 }
00953 
00954 
00955 <emphasis role="comment">/*</emphasis>
00956 <emphasis role="comment">**&#32;Ensures&#32;final&#32;expression&#32;result&#32;is&#32;either&#32;in&#32;a&#32;register</emphasis>
00957 <emphasis role="comment">**&#32;or&#32;in&#32;an&#32;upvalue.</emphasis>
00958 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00959"/><link linkend="_lcode_8h_1a2d79e7835a757a0bace8b3f01eba161b">00959</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1ad975c434bb45ed1baff91522069c4f11">luaK_exp2anyregup</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00960 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;!=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>&#32;||&#32;<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e))
00961 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e);
00962 }
00963 
00964 
00965 <emphasis role="comment">/*</emphasis>
00966 <emphasis role="comment">**&#32;Ensures&#32;final&#32;expression&#32;result&#32;is&#32;either&#32;in&#32;a&#32;register</emphasis>
00967 <emphasis role="comment">**&#32;or&#32;it&#32;is&#32;a&#32;constant.</emphasis>
00968 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00969"/><link linkend="_lcode_8h_1abbb8eb20146165d70bbda57068685f1e">00969</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a214015f257d752c11c44ba82460a603a">luaK_exp2val</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00970 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e))
00971 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e);
00972 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00973 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(fs,&#32;e);
00974 }
00975 
00976 
00977 <emphasis role="comment">/*</emphasis>
00978 <emphasis role="comment">**&#32;Try&#32;to&#32;make&#32;&apos;e&apos;&#32;a&#32;K&#32;expression&#32;with&#32;an&#32;index&#32;in&#32;the&#32;range&#32;of&#32;R/K</emphasis>
00979 <emphasis role="comment">**&#32;indices.&#32;Return&#32;true&#32;iff&#32;succeeded.</emphasis>
00980 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l00981"/><link linkend="_lcode_8c_1a0d67ef87afbe99966e5679b596c6a466">00981</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a0d67ef87afbe99966e5679b596c6a466">luaK_exp2K</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
00982 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e))&#32;{
00983 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;info;
00984 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;move&#32;constants&#32;to&#32;&apos;k&apos;&#32;*/</emphasis>
00985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea1228eca4fdc8e7643d18155507942482">VTRUE</link>:&#32;info&#32;=&#32;<link linkend="_lcode_8c_1a34c4676c9334bf58d12b1d0223897e31">boolT</link>(fs);&#32;<emphasis role="keywordflow">break</emphasis>;
00986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa">VFALSE</link>:&#32;info&#32;=&#32;<link linkend="_lcode_8c_1a6265a2a98b8fd0c973f82dd6aa11c814">boolF</link>(fs);&#32;<emphasis role="keywordflow">break</emphasis>;
00987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea47eb055b6420db339de283cef27ad5d8">VNIL</link>:&#32;info&#32;=&#32;<link linkend="_lcode_8c_1a96b95ed8f53ee7aba7c6e81a27df6d63">nilK</link>(fs);&#32;<emphasis role="keywordflow">break</emphasis>;
00988 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>:&#32;info&#32;=&#32;<link linkend="_lcode_8c_1a6154c1594ec12080f2393950eb2b98e3">luaK_intK</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>);&#32;<emphasis role="keywordflow">break</emphasis>;
00989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>:&#32;info&#32;=&#32;<link linkend="_lcode_8c_1aa55d8b442bf4ee8c1c4838e4deec9a56">luaK_numberK</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a53608b3835872ab9ee76fc00cfa47b4f">nval</link>);&#32;<emphasis role="keywordflow">break</emphasis>;
00990 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab06fcbc55fc36e7552634eef34375124">VKSTR</link>:&#32;info&#32;=&#32;<link linkend="_lcode_8c_1a7dfe719b62474bd7657147866e202e9a">stringK</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a97fdec5618426b4684c2d66924e85713">strval</link>);&#32;<emphasis role="keywordflow">break</emphasis>;
00991 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaf926040fb3c22e9456f27b78e4ad19d2">VK</link>:&#32;info&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;<emphasis role="keywordflow">break</emphasis>;
00992 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;a&#32;constant&#32;*/</emphasis>
00993 &#32;&#32;&#32;&#32;}
00994 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(info&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1a37cd6e85943ea87c9b99ef1ea6bcdb3e">MAXINDEXRK</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;does&#32;constant&#32;fit&#32;in&#32;&apos;argC&apos;?&#32;*/</emphasis>
00995 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaf926040fb3c22e9456f27b78e4ad19d2">VK</link>;&#32;&#32;<emphasis role="comment">/*&#32;make&#32;expression&#32;a&#32;&apos;K&apos;&#32;expression&#32;*/</emphasis>
00996 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;info;
00997 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00998 &#32;&#32;&#32;&#32;}
00999 &#32;&#32;}
01000 &#32;&#32;<emphasis role="comment">/*&#32;else,&#32;expression&#32;doesn&apos;t&#32;fit;&#32;leave&#32;it&#32;unchanged&#32;*/</emphasis>
01001 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01002 }
01003 
01004 
01005 <emphasis role="comment">/*</emphasis>
01006 <emphasis role="comment">**&#32;Ensures&#32;final&#32;expression&#32;result&#32;is&#32;in&#32;a&#32;valid&#32;R/K&#32;index</emphasis>
01007 <emphasis role="comment">**&#32;(that&#32;is,&#32;it&#32;is&#32;either&#32;in&#32;a&#32;register&#32;or&#32;in&#32;&apos;k&apos;&#32;with&#32;an&#32;index</emphasis>
01008 <emphasis role="comment">**&#32;in&#32;the&#32;range&#32;of&#32;R/K&#32;indices).</emphasis>
01009 <emphasis role="comment">**&#32;Returns&#32;1&#32;iff&#32;expression&#32;is&#32;K.</emphasis>
01010 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01011"/><link linkend="_lcode_8h_1a28ef529fcd27c07fb222181894abdf7e">01011</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a8a1a4f8416bf829386d17267ba2636b6">luaK_exp2RK</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
01012 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a0d67ef87afbe99966e5679b596c6a466">luaK_exp2K</link>(fs,&#32;e))
01013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01014 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;not&#32;a&#32;constant&#32;in&#32;the&#32;right&#32;range:&#32;put&#32;it&#32;in&#32;a&#32;register&#32;*/</emphasis>
01015 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e);
01016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01017 &#32;&#32;}
01018 }
01019 
01020 
<anchor xml:id="_lcode_8c_source_1l01021"/><link linkend="_lcode_8c_1a84976cfe36717c59f9cb63b39beba091">01021</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a84976cfe36717c59f9cb63b39beba091">codeABRK</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;o,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;b,
01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*ec)&#32;{
01023 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;<link linkend="_lcode_8c_1a8a1a4f8416bf829386d17267ba2636b6">luaK_exp2RK</link>(fs,&#32;ec);
01024 &#32;&#32;<link linkend="_lcode_8c_1a7f8d052466e2665575f464a55f90a509">luaK_codeABCk</link>(fs,&#32;o,&#32;a,&#32;b,&#32;ec-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;k);
01025 }
01026 
01027 
01028 <emphasis role="comment">/*</emphasis>
01029 <emphasis role="comment">**&#32;Generate&#32;code&#32;to&#32;store&#32;result&#32;of&#32;expression&#32;&apos;ex&apos;&#32;into&#32;variable&#32;&apos;var&apos;.</emphasis>
01030 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01031"/><link linkend="_lcode_8h_1a84aa56cf92c9d61e65101d54c6300b96">01031</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a31c85ce631d5ee0a691cb58a1bd360be">luaK_storevar</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*var,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*ex)&#32;{
01032 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(var-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{
01033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>:&#32;{
01034 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;ex);
01035 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1aa89e7af4e4f692877eab94959920c493">exp2reg</link>(fs,&#32;ex,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.sidx);&#32;&#32;<emphasis role="comment">/*&#32;compute&#32;&apos;ex&apos;&#32;into&#32;proper&#32;place&#32;*/</emphasis>
01036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01037 &#32;&#32;&#32;&#32;}
01038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>:&#32;{
01039 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;e&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;ex);
01040 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a47df60373847890b47b447c870aea678">OP_SETUPVAL</link>,&#32;e,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;0);
01041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01042 &#32;&#32;&#32;&#32;}
01043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea83132d11273ccae411b61430023e4be0">VINDEXUP</link>:&#32;{
01044 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a84976cfe36717c59f9cb63b39beba091">codeABRK</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ac486cd83792b58a638e37cb249d54a7e">OP_SETTABUP</link>,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx,&#32;ex);
01045 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01046 &#32;&#32;&#32;&#32;}
01047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8007ab33287e6ed71b323366234b532a">VINDEXI</link>:&#32;{
01048 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a84976cfe36717c59f9cb63b39beba091">codeABRK</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a51eb594f07db275f5c6a77621b2de777">OP_SETI</link>,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx,&#32;ex);
01049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01050 &#32;&#32;&#32;&#32;}
01051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea16545cc6f945dda467b1418b80a35876">VINDEXSTR</link>:&#32;{
01052 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a84976cfe36717c59f9cb63b39beba091">codeABRK</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a342ca5ec1477419948043acb24ef3032">OP_SETFIELD</link>,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx,&#32;ex);
01053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01054 &#32;&#32;&#32;&#32;}
01055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab1cb541b6c8f3a5f03b17184a2facc85">VINDEXED</link>:&#32;{
01056 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a84976cfe36717c59f9cb63b39beba091">codeABRK</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a34315d7408f31b006bf41c9e9c2d736e">OP_SETTABLE</link>,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t,&#32;var-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx,&#32;ex);
01057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01058 &#32;&#32;&#32;&#32;}
01059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(0);&#32;&#32;<emphasis role="comment">/*&#32;invalid&#32;var&#32;kind&#32;to&#32;store&#32;*/</emphasis>
01060 &#32;&#32;}
01061 &#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;ex);
01062 }
01063 
01064 
01065 <emphasis role="comment">/*</emphasis>
01066 <emphasis role="comment">**&#32;Emit&#32;SELF&#32;instruction&#32;(convert&#32;expression&#32;&apos;e&apos;&#32;into&#32;&apos;e:key(e,&apos;).</emphasis>
01067 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01068"/><link linkend="_lcode_8h_1aeaf22c625b86a7b63ec83cf8b6036815">01068</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a38f9aab7679b62f5902d9adf5c502ea1">luaK_self</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*key)&#32;{
01069 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ereg;
01070 &#32;&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e);
01071 &#32;&#32;ereg&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;register&#32;where&#32;&apos;e&apos;&#32;was&#32;placed&#32;*/</emphasis>
01072 &#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;e);
01073 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>;&#32;&#32;<emphasis role="comment">/*&#32;base&#32;register&#32;for&#32;op_self&#32;*/</emphasis>
01074 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>;&#32;&#32;<emphasis role="comment">/*&#32;self&#32;expression&#32;has&#32;a&#32;fixed&#32;register&#32;*/</emphasis>
01075 &#32;&#32;<link linkend="_lcode_8c_1af1190942fb7a557b056ac8bbaa0024a1">luaK_reserveregs</link>(fs,&#32;2);&#32;&#32;<emphasis role="comment">/*&#32;function&#32;and&#32;&apos;self&apos;&#32;produced&#32;by&#32;op_self&#32;*/</emphasis>
01076 &#32;&#32;<link linkend="_lcode_8c_1a84976cfe36717c59f9cb63b39beba091">codeABRK</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a64bea18253f9e73c4c5fcfa6b0d5abd2">OP_SELF</link>,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;ereg,&#32;key);
01077 &#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;key);
01078 }
01079 
01080 
01081 <emphasis role="comment">/*</emphasis>
01082 <emphasis role="comment">**&#32;Negate&#32;condition&#32;&apos;e&apos;&#32;(where&#32;&apos;e&apos;&#32;is&#32;a&#32;comparison).</emphasis>
01083 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01084"/><link linkend="_lcode_8c_1a70d4b286b84e3322bb81af111b5c3a77">01084</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a70d4b286b84e3322bb81af111b5c3a77">negatecondition</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
01085 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*pc&#32;=&#32;<link linkend="_lcode_8c_1a755e9c104abc7fa7bb87437964b19628">getjumpcontrol</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>);
01086 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lopcodes_8h_1a6750851f9d04ae7f9612146b07f88c97">testTMode</link>(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(*pc))&#32;&amp;&amp;&#32;<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(*pc)&#32;!=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a39b4077a15fb8fffc166f5045dddacee">OP_TESTSET</link>&#32;&amp;&amp;
01087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(*pc)&#32;!=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a8952e66300f2660060e38c67ccd21c9d">OP_TEST</link>);
01088 &#32;&#32;<link linkend="_lopcodes_8h_1ac3ce38dc1556d678ef023b240c97fde8">SETARG_k</link>(*pc,&#32;(<link linkend="_lopcodes_8h_1aa9ce1e6169ccc23a1e9c783f61af343f">GETARG_k</link>(*pc)&#32;^&#32;1));
01089 }
01090 
01091 
01092 <emphasis role="comment">/*</emphasis>
01093 <emphasis role="comment">**&#32;Emit&#32;instruction&#32;to&#32;jump&#32;if&#32;&apos;e&apos;&#32;is&#32;&apos;cond&apos;&#32;(that&#32;is,&#32;if&#32;&apos;cond&apos;</emphasis>
01094 <emphasis role="comment">**&#32;is&#32;true,&#32;code&#32;will&#32;jump&#32;if&#32;&apos;e&apos;&#32;is&#32;true.)&#32;Return&#32;jump&#32;position.</emphasis>
01095 <emphasis role="comment">**&#32;Optimize&#32;when&#32;&apos;e&apos;&#32;is&#32;&apos;not&apos;&#32;something,&#32;inverting&#32;the&#32;condition</emphasis>
01096 <emphasis role="comment">**&#32;and&#32;removing&#32;the&#32;&apos;not&apos;.</emphasis>
01097 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01098"/><link linkend="_lcode_8c_1a15ef9c2dfe9851aaea34aae8e849b43e">01098</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a15ef9c2dfe9851aaea34aae8e849b43e">jumponcond</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a24002c50a108445d916457eb3c21d5e1">cond</link>)&#32;{
01099 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>)&#32;{
01100 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;ie&#32;=&#32;<link linkend="_lcode_8h_1ae32808dba4795004b96e16024b1f9b2c">getinstruction</link>(fs,&#32;e);
01101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(ie)&#32;==&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a36a6b73cc4823f54891a013e2cc760d1">OP_NOT</link>)&#32;{
01102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af8da5ca36e18a59d8881a56b982ebae6">removelastinstruction</link>(fs);&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;previous&#32;OP_NOT&#32;*/</emphasis>
01103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a5ca879c3a79630e5af194a82971f7ab2">condjump</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a8952e66300f2660060e38c67ccd21c9d">OP_TEST</link>,&#32;<link linkend="_lopcodes_8h_1a7a343159ef7669a438c2097b839b2b13">GETARG_B</link>(ie),&#32;0,&#32;0,&#32;!<link linkend="_lparser_8c_1a24002c50a108445d916457eb3c21d5e1">cond</link>);
01104 &#32;&#32;&#32;&#32;}
01105 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;else&#32;go&#32;through&#32;*/</emphasis>
01106 &#32;&#32;}
01107 &#32;&#32;<link linkend="_lcode_8c_1a42950f3fd3e5bf08697d861e865119a1">discharge2anyreg</link>(fs,&#32;e);
01108 &#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;e);
01109 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a5ca879c3a79630e5af194a82971f7ab2">condjump</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a39b4077a15fb8fffc166f5045dddacee">OP_TESTSET</link>,&#32;<link linkend="_lopcodes_8h_1a6552ce4b3bba3b1a820dc0adaf85974a">NO_REG</link>,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;0,&#32;<link linkend="_lparser_8c_1a24002c50a108445d916457eb3c21d5e1">cond</link>);
01110 }
01111 
01112 
01113 <emphasis role="comment">/*</emphasis>
01114 <emphasis role="comment">**&#32;Emit&#32;code&#32;to&#32;go&#32;through&#32;if&#32;&apos;e&apos;&#32;is&#32;true,&#32;jump&#32;otherwise.</emphasis>
01115 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01116"/><link linkend="_lcode_8h_1afff58a79c5fb3e56811bcf9a4315bfda">01116</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a7d4ea6b61d0c157feca2afa59a9f877e">luaK_goiftrue</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
01117 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc;&#32;&#32;<emphasis role="comment">/*&#32;pc&#32;of&#32;new&#32;jump&#32;*/</emphasis>
01118 &#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(fs,&#32;e);
01119 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{
01120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead1066918edd602fb0577c9f58ced173c">VJMP</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;condition?&#32;*/</emphasis>
01121 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a70d4b286b84e3322bb81af111b5c3a77">negatecondition</link>(fs,&#32;e);&#32;&#32;<emphasis role="comment">/*&#32;jump&#32;when&#32;it&#32;is&#32;false&#32;*/</emphasis>
01122 &#32;&#32;&#32;&#32;&#32;&#32;pc&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;save&#32;jump&#32;position&#32;*/</emphasis>
01123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01124 &#32;&#32;&#32;&#32;}
01125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaf926040fb3c22e9456f27b78e4ad19d2">VK</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab06fcbc55fc36e7552634eef34375124">VKSTR</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea1228eca4fdc8e7643d18155507942482">VTRUE</link>:&#32;{
01126 &#32;&#32;&#32;&#32;&#32;&#32;pc&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;&#32;&#32;<emphasis role="comment">/*&#32;always&#32;true;&#32;do&#32;nothing&#32;*/</emphasis>
01127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01128 &#32;&#32;&#32;&#32;}
01129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{
01130 &#32;&#32;&#32;&#32;&#32;&#32;pc&#32;=&#32;<link linkend="_lcode_8c_1a15ef9c2dfe9851aaea34aae8e849b43e">jumponcond</link>(fs,&#32;e,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;jump&#32;when&#32;false&#32;*/</emphasis>
01131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01132 &#32;&#32;&#32;&#32;}
01133 &#32;&#32;}
01134 &#32;&#32;<link linkend="_lcode_8c_1a99718e3c19e193690f60b7595bee952e">luaK_concat</link>(fs,&#32;&amp;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>,&#32;pc);&#32;&#32;<emphasis role="comment">/*&#32;insert&#32;new&#32;jump&#32;in&#32;false&#32;list&#32;*/</emphasis>
01135 &#32;&#32;<link linkend="_lcode_8c_1a5748ad3c940c7916a2586fab6181a197">luaK_patchtohere</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>);&#32;&#32;<emphasis role="comment">/*&#32;true&#32;list&#32;jumps&#32;to&#32;here&#32;(to&#32;go&#32;through)&#32;*/</emphasis>
01136 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;
01137 }
01138 
01139 
01140 <emphasis role="comment">/*</emphasis>
01141 <emphasis role="comment">**&#32;Emit&#32;code&#32;to&#32;go&#32;through&#32;if&#32;&apos;e&apos;&#32;is&#32;false,&#32;jump&#32;otherwise.</emphasis>
01142 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01143"/><link linkend="_lcode_8h_1a8f1abd44cd0ec08b43ad809b9db04840">01143</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a61d509689d21bb8b1fe8681a03ccbe58">luaK_goiffalse</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
01144 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc;&#32;&#32;<emphasis role="comment">/*&#32;pc&#32;of&#32;new&#32;jump&#32;*/</emphasis>
01145 &#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(fs,&#32;e);
01146 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{
01147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead1066918edd602fb0577c9f58ced173c">VJMP</link>:&#32;{
01148 &#32;&#32;&#32;&#32;&#32;&#32;pc&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;already&#32;jump&#32;if&#32;true&#32;*/</emphasis>
01149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01150 &#32;&#32;&#32;&#32;}
01151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea47eb055b6420db339de283cef27ad5d8">VNIL</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa">VFALSE</link>:&#32;{
01152 &#32;&#32;&#32;&#32;&#32;&#32;pc&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;&#32;&#32;<emphasis role="comment">/*&#32;always&#32;false;&#32;do&#32;nothing&#32;*/</emphasis>
01153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01154 &#32;&#32;&#32;&#32;}
01155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;{
01156 &#32;&#32;&#32;&#32;&#32;&#32;pc&#32;=&#32;<link linkend="_lcode_8c_1a15ef9c2dfe9851aaea34aae8e849b43e">jumponcond</link>(fs,&#32;e,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;jump&#32;if&#32;true&#32;*/</emphasis>
01157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01158 &#32;&#32;&#32;&#32;}
01159 &#32;&#32;}
01160 &#32;&#32;<link linkend="_lcode_8c_1a99718e3c19e193690f60b7595bee952e">luaK_concat</link>(fs,&#32;&amp;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>,&#32;pc);&#32;&#32;<emphasis role="comment">/*&#32;insert&#32;new&#32;jump&#32;in&#32;&apos;t&apos;&#32;list&#32;*/</emphasis>
01161 &#32;&#32;<link linkend="_lcode_8c_1a5748ad3c940c7916a2586fab6181a197">luaK_patchtohere</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>);&#32;&#32;<emphasis role="comment">/*&#32;false&#32;list&#32;jumps&#32;to&#32;here&#32;(to&#32;go&#32;through)&#32;*/</emphasis>
01162 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>&#32;=&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>;
01163 }
01164 
01165 
01166 <emphasis role="comment">/*</emphasis>
01167 <emphasis role="comment">**&#32;Code&#32;&apos;not&#32;e&apos;,&#32;doing&#32;constant&#32;folding.</emphasis>
01168 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01169"/><link linkend="_lcode_8c_1adf2b3a04b610027f57d8ebd6a9ec2a12">01169</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1adf2b3a04b610027f57d8ebd6a9ec2a12">codenot</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
01170 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>)&#32;{
01171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea47eb055b6420db339de283cef27ad5d8">VNIL</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa">VFALSE</link>:&#32;{
01172 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea1228eca4fdc8e7643d18155507942482">VTRUE</link>;&#32;&#32;<emphasis role="comment">/*&#32;true&#32;==&#32;not&#32;nil&#32;==&#32;not&#32;false&#32;*/</emphasis>
01173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01174 &#32;&#32;&#32;&#32;}
01175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaf926040fb3c22e9456f27b78e4ad19d2">VK</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab06fcbc55fc36e7552634eef34375124">VKSTR</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea1228eca4fdc8e7643d18155507942482">VTRUE</link>:&#32;{
01176 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa">VFALSE</link>;&#32;&#32;<emphasis role="comment">/*&#32;false&#32;==&#32;not&#32;&quot;x&quot;&#32;==&#32;not&#32;0.5&#32;==&#32;not&#32;1&#32;==&#32;not&#32;true&#32;*/</emphasis>
01177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01178 &#32;&#32;&#32;&#32;}
01179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead1066918edd602fb0577c9f58ced173c">VJMP</link>:&#32;{
01180 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a70d4b286b84e3322bb81af111b5c3a77">negatecondition</link>(fs,&#32;e);
01181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01182 &#32;&#32;&#32;&#32;}
01183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>:
01184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>:&#32;{
01185 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a42950f3fd3e5bf08697d861e865119a1">discharge2anyreg</link>(fs,&#32;e);
01186 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;e);
01187 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a36a6b73cc4823f54891a013e2cc760d1">OP_NOT</link>,&#32;0,&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;0);
01188 &#32;&#32;&#32;&#32;&#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>;
01189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01190 &#32;&#32;&#32;&#32;}
01191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(0);&#32;&#32;<emphasis role="comment">/*&#32;cannot&#32;happen&#32;*/</emphasis>
01192 &#32;&#32;}
01193 &#32;&#32;<emphasis role="comment">/*&#32;interchange&#32;true&#32;and&#32;false&#32;lists&#32;*/</emphasis>
01194 &#32;&#32;{&#32;<emphasis role="keywordtype">int</emphasis>&#32;temp&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>;&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>;&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>&#32;=&#32;temp;&#32;}
01195 &#32;&#32;<link linkend="_lcode_8c_1a76e8dc6a6f33ee6f3c88c22933bc5c29">removevalues</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>);&#32;&#32;<emphasis role="comment">/*&#32;values&#32;are&#32;useless&#32;when&#32;negated&#32;*/</emphasis>
01196 &#32;&#32;<link linkend="_lcode_8c_1a76e8dc6a6f33ee6f3c88c22933bc5c29">removevalues</link>(fs,&#32;e-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>);
01197 }
01198 
01199 
01200 <emphasis role="comment">/*</emphasis>
01201 <emphasis role="comment">**&#32;Check&#32;whether&#32;expression&#32;&apos;e&apos;&#32;is&#32;a&#32;small&#32;literal&#32;string</emphasis>
01202 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01203"/><link linkend="_lcode_8c_1a41e037c7df7ee9df97d2731772061c3f">01203</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a41e037c7df7ee9df97d2731772061c3f">isKstr</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
01204 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaf926040fb3c22e9456f27b78e4ad19d2">VK</link>&#32;&amp;&amp;&#32;!<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e)&#32;&amp;&amp;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1ae5132046fa2196de46214613a36235b2">MAXARG_B</link>&#32;&amp;&amp;
01205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1a6513e161c7e8cc7276a9677d50a99b76">ttisshrstring</link>(&amp;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>[e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>]));
01206 }
01207 
01208 <emphasis role="comment">/*</emphasis>
01209 <emphasis role="comment">**&#32;Check&#32;whether&#32;expression&#32;&apos;e&apos;&#32;is&#32;a&#32;literal&#32;integer.</emphasis>
01210 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01211"/><link linkend="_lcode_8h_1a8f51bfb20fee5d6fe787b409ab73debb">01211</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a3eb85bb37542cd67b33cbf85fec9bf48">luaK_isKint</link>&#32;(<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
01212 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>&#32;&amp;&amp;&#32;!<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e));
01213 }
01214 
01215 
01216 <emphasis role="comment">/*</emphasis>
01217 <emphasis role="comment">**&#32;Check&#32;whether&#32;expression&#32;&apos;e&apos;&#32;is&#32;a&#32;literal&#32;integer&#32;in</emphasis>
01218 <emphasis role="comment">**&#32;proper&#32;range&#32;to&#32;fit&#32;in&#32;register&#32;C</emphasis>
01219 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01220"/><link linkend="_lcode_8c_1abccebacd6d7d253aa6f7f1063f340a1d">01220</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1abccebacd6d7d253aa6f7f1063f340a1d">isCint</link>&#32;(<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
01221 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a3eb85bb37542cd67b33cbf85fec9bf48">luaK_isKint</link>(e)&#32;&amp;&amp;&#32;(<link linkend="_llimits_8h_1a5871309e671ba9f938fcb1e0d3bcbeca">l_castS2U</link>(e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>)&#32;&lt;=&#32;<link linkend="_llimits_8h_1a5871309e671ba9f938fcb1e0d3bcbeca">l_castS2U</link>(<link linkend="_lopcodes_8h_1a15a7daf14e4640990519e4e7f627900f">MAXARG_C</link>));
01222 }
01223 
01224 
01225 <emphasis role="comment">/*</emphasis>
01226 <emphasis role="comment">**&#32;Check&#32;whether&#32;expression&#32;&apos;e&apos;&#32;is&#32;a&#32;literal&#32;integer&#32;in</emphasis>
01227 <emphasis role="comment">**&#32;proper&#32;range&#32;to&#32;fit&#32;in&#32;register&#32;sC</emphasis>
01228 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01229"/><link linkend="_lcode_8c_1a3cf85f67771eb8781afdc02625d389c1">01229</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a3cf85f67771eb8781afdc02625d389c1">isSCint</link>&#32;(<link linkend="_structexpdesc">expdesc</link>&#32;*e)&#32;{
01230 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lcode_8c_1a3eb85bb37542cd67b33cbf85fec9bf48">luaK_isKint</link>(e)&#32;&amp;&amp;&#32;<link linkend="_lcode_8c_1a3447d4fe8de721e03288feb166a7ede0">fitsC</link>(e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>);
01231 }
01232 
01233 
01234 <emphasis role="comment">/*</emphasis>
01235 <emphasis role="comment">**&#32;Check&#32;whether&#32;expression&#32;&apos;e&apos;&#32;is&#32;a&#32;literal&#32;integer&#32;or&#32;float&#32;in</emphasis>
01236 <emphasis role="comment">**&#32;proper&#32;range&#32;to&#32;fit&#32;in&#32;a&#32;register&#32;(sB&#32;or&#32;sC).</emphasis>
01237 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01238"/><link linkend="_lcode_8c_1af0849f886c6299a2556da1228e2f9b18">01238</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1af0849f886c6299a2556da1228e2f9b18">isSCnumber</link>&#32;(<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*pi,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*isfloat)&#32;{
01239 &#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;i;
01240 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>)
01241 &#32;&#32;&#32;&#32;i&#32;=&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>;
01242 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>&#32;&amp;&amp;&#32;<link linkend="_lvm_8c_1a3a9a9378ccdbd0ea4cba6555673dccf9">luaV_flttointeger</link>(e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a53608b3835872ab9ee76fc00cfa47b4f">nval</link>,&#32;&amp;i,&#32;<link linkend="_lvm_8h_1a1639065f78212a54317141b2703061c0a7eaebd7cdc41b6f7c4ae319a813f3995">F2Ieq</link>))
01243 &#32;&#32;&#32;&#32;*isfloat&#32;=&#32;1;
01244 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
01245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;a&#32;number&#32;*/</emphasis>
01246 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(e)&#32;&amp;&amp;&#32;<link linkend="_lcode_8c_1a3447d4fe8de721e03288feb166a7ede0">fitsC</link>(i))&#32;{
01247 &#32;&#32;&#32;&#32;*pi&#32;=&#32;<link linkend="_lopcodes_8h_1a1918af9b0bd50d9a0e6b3a4e243bbaad">int2sC</link>(<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(i));
01248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01249 &#32;&#32;}
01250 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
01251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01252 }
01253 
01254 
01255 <emphasis role="comment">/*</emphasis>
01256 <emphasis role="comment">**&#32;Create&#32;expression&#32;&apos;t[k]&apos;.&#32;&apos;t&apos;&#32;must&#32;have&#32;its&#32;final&#32;result&#32;already&#32;in&#32;a</emphasis>
01257 <emphasis role="comment">**&#32;register&#32;or&#32;upvalue.&#32;Upvalues&#32;can&#32;only&#32;be&#32;indexed&#32;by&#32;literal&#32;strings.</emphasis>
01258 <emphasis role="comment">**&#32;Keys&#32;can&#32;be&#32;literal&#32;strings&#32;in&#32;the&#32;constant&#32;table&#32;or&#32;arbitrary</emphasis>
01259 <emphasis role="comment">**&#32;values&#32;in&#32;registers.</emphasis>
01260 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01261"/><link linkend="_lcode_8h_1aef9f69dd75331c1ad4ad55329fe5a1d9">01261</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1af9e8e4c1ab85deb3fe8fdbc39d25c6d9">luaK_indexed</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*t,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*k)&#32;{
01262 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab06fcbc55fc36e7552634eef34375124">VKSTR</link>)
01263 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad8d97d1b9538e4e8412654930d56e5ed">str2K</link>(fs,&#32;k);
01264 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lcode_8c_1a6e8fdabe5b5f88f7a3e018459b83d10e">hasjumps</link>(t)&#32;&amp;&amp;
01265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>&#32;||&#32;t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>&#32;||&#32;t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>));
01266 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>&#32;&amp;&amp;&#32;!<link linkend="_lcode_8c_1a41e037c7df7ee9df97d2731772061c3f">isKstr</link>(fs,&#32;k))&#32;&#32;<emphasis role="comment">/*&#32;upvalue&#32;indexed&#32;by&#32;non&#32;&apos;Kstr&apos;?&#32;*/</emphasis>
01267 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;t);&#32;&#32;<emphasis role="comment">/*&#32;put&#32;it&#32;in&#32;a&#32;register&#32;*/</emphasis>
01268 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f">VUPVAL</link>)&#32;{
01269 &#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t&#32;=&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;upvalue&#32;index&#32;*/</emphasis>
01270 &#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx&#32;=&#32;k-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;literal&#32;string&#32;*/</emphasis>
01271 &#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea83132d11273ccae411b61430023e4be0">VINDEXUP</link>;
01272 &#32;&#32;}
01273 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01274 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;register&#32;index&#32;of&#32;the&#32;table&#32;*/</emphasis>
01275 &#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.t&#32;=&#32;(t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567">VLOCAL</link>)&#32;?&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a589aeaa50a9d24c491f947105681259e">var</link>.sidx:&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;
01276 &#32;&#32;&#32;&#32;if&#32;(<link linkend="_lcode_8c_1a41e037c7df7ee9df97d2731772061c3f">isKstr</link>(fs,&#32;k))&#32;{
01277 &#32;&#32;&#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx&#32;=&#32;k-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;literal&#32;string&#32;*/</emphasis>
01278 &#32;&#32;&#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea16545cc6f945dda467b1418b80a35876">VINDEXSTR</link>;
01279 &#32;&#32;&#32;&#32;}
01280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1abccebacd6d7d253aa6f7f1063f340a1d">isCint</link>(k))&#32;{
01281 &#32;&#32;&#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(k-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>);&#32;&#32;<emphasis role="comment">/*&#32;int.&#32;constant&#32;in&#32;proper&#32;range&#32;*/</emphasis>
01282 &#32;&#32;&#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea8007ab33287e6ed71b323366234b532a">VINDEXI</link>;
01283 &#32;&#32;&#32;&#32;}
01284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01285 &#32;&#32;&#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a93b12b379cd3fa0f8cc78ed4d6a87a76">ind</link>.idx&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;k);&#32;&#32;<emphasis role="comment">/*&#32;register&#32;*/</emphasis>
01286 &#32;&#32;&#32;&#32;&#32;&#32;t-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eab1cb541b6c8f3a5f03b17184a2facc85">VINDEXED</link>;
01287 &#32;&#32;&#32;&#32;}
01288 &#32;&#32;}
01289 }
01290 
01291 
01292 <emphasis role="comment">/*</emphasis>
01293 <emphasis role="comment">**&#32;Return&#32;false&#32;if&#32;folding&#32;can&#32;raise&#32;an&#32;error.</emphasis>
01294 <emphasis role="comment">**&#32;Bitwise&#32;operations&#32;need&#32;operands&#32;convertible&#32;to&#32;integers;&#32;division</emphasis>
01295 <emphasis role="comment">**&#32;operations&#32;cannot&#32;have&#32;0&#32;as&#32;divisor.</emphasis>
01296 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01297"/><link linkend="_lcode_8c_1acff3899ba144ce35344d2c781d4a04cc">01297</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1acff3899ba144ce35344d2c781d4a04cc">validop</link>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;op,&#32;<link linkend="_struct_t_value">TValue</link>&#32;*v1,&#32;<link linkend="_struct_t_value">TValue</link>&#32;*v2)&#32;{
01298 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(op)&#32;{
01299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a77e346c2c567a526f648076bebe49784">LUA_OPBAND</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a1209ad5d9fd73655cb81d30a9e10762e">LUA_OPBOR</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a0891e610cda9a66b8e914ff8646da47b">LUA_OPBXOR</link>:
01300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a08b0a2e07d6449b3424453f32283319c">LUA_OPSHL</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a2544bce8f2417ba242131c8dc466f454">LUA_OPSHR</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a57e9cb582d0a570cd482936771be1ead">LUA_OPBNOT</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;conversion&#32;errors&#32;*/</emphasis>
01301 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;i;
01302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_lvm_8h_1a0b3a6eff12747eacea6551dbc2d42707">tointegerns</link>(v1,&#32;&amp;i)&#32;&amp;&amp;&#32;<link linkend="_lvm_8h_1a0b3a6eff12747eacea6551dbc2d42707">tointegerns</link>(v2,&#32;&amp;i));
01303 &#32;&#32;&#32;&#32;}
01304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1aec6bf4df427174d6e5f1eb67fa2a39b5">LUA_OPDIV</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1af47e0652301e786beec5c429ae6ac5ea">LUA_OPIDIV</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a92ae2587e93cb450c82ce23682e4a222">LUA_OPMOD</link>:&#32;&#32;<emphasis role="comment">/*&#32;division&#32;by&#32;0&#32;*/</emphasis>
01305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_lobject_8h_1a690ab618235691bb5a82610f07dd8684">nvalue</link>(v2)&#32;!=&#32;0);
01306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;everything&#32;else&#32;is&#32;valid&#32;*/</emphasis>
01307 &#32;&#32;}
01308 }
01309 
01310 
01311 <emphasis role="comment">/*</emphasis>
01312 <emphasis role="comment">**&#32;Try&#32;to&#32;&quot;constant-fold&quot;&#32;an&#32;operation;&#32;return&#32;1&#32;iff&#32;successful.</emphasis>
01313 <emphasis role="comment">**&#32;(In&#32;this&#32;case,&#32;&apos;e1&apos;&#32;has&#32;the&#32;final&#32;result.)</emphasis>
01314 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01315"/><link linkend="_lcode_8c_1a690b5c3cf2d262aaef28188ecc62d1b2">01315</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a690b5c3cf2d262aaef28188ecc62d1b2">constfolding</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;op,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,
01316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2)&#32;{
01317 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;v1,&#32;v2,&#32;res;
01318 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lcode_8c_1afc00b6e7519fadb094edd29e9019eefc">tonumeral</link>(e1,&#32;&amp;v1)&#32;||&#32;!<link linkend="_lcode_8c_1afc00b6e7519fadb094edd29e9019eefc">tonumeral</link>(e2,&#32;&amp;v2)&#32;||&#32;!<link linkend="_lcode_8c_1acff3899ba144ce35344d2c781d4a04cc">validop</link>(op,&#32;&amp;v1,&#32;&amp;v2))
01319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;non-numeric&#32;operands&#32;or&#32;not&#32;safe&#32;to&#32;fold&#32;*/</emphasis>
01320 &#32;&#32;<link linkend="_lobject_8c_1aae42f4eba2d45e27d6f217f4497d106d">luaO_rawarith</link>(fs-&gt;<link linkend="_struct_func_state_1acde7034107e496ede4314b1d988c49fd">ls</link>-&gt;<link linkend="_struct_lex_state_1aa5d917ce132777857314b50118bc2105">L</link>,&#32;op,&#32;&amp;v1,&#32;&amp;v2,&#32;&amp;res);&#32;&#32;<emphasis role="comment">/*&#32;does&#32;operation&#32;*/</emphasis>
01321 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lobject_8h_1abade243295a9140f7b86838fbb049054">ttisinteger</link>(&amp;res))&#32;{
01322 &#32;&#32;&#32;&#32;e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>;
01323 &#32;&#32;&#32;&#32;e1-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>&#32;=&#32;<link linkend="_lobject_8h_1af1a59636db050b842a791cd19086d925">ivalue</link>(&amp;res);
01324 &#32;&#32;}
01325 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;folds&#32;neither&#32;NaN&#32;nor&#32;0.0&#32;(to&#32;avoid&#32;problems&#32;with&#32;-0.0)&#32;*/</emphasis>
01326 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>&#32;n&#32;=&#32;<link linkend="_lobject_8h_1a7d7d6b08f40350c9e7364e9cb984d744">fltvalue</link>(&amp;res);
01327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_llimits_8h_1a5ec99a344dba64c30c3ddc6eed8e2e51">luai_numisnan</link>(n)&#32;||&#32;n&#32;==&#32;0)
01328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01329 &#32;&#32;&#32;&#32;e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>;
01330 &#32;&#32;&#32;&#32;e1-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a53608b3835872ab9ee76fc00cfa47b4f">nval</link>&#32;=&#32;n;
01331 &#32;&#32;}
01332 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01333 }
01334 
01335 
01336 <emphasis role="comment">/*</emphasis>
01337 <emphasis role="comment">**&#32;Emit&#32;code&#32;for&#32;unary&#32;expressions&#32;that&#32;&quot;produce&#32;values&quot;</emphasis>
01338 <emphasis role="comment">**&#32;(everything&#32;but&#32;&apos;not&apos;).</emphasis>
01339 <emphasis role="comment">**&#32;Expression&#32;to&#32;produce&#32;final&#32;result&#32;will&#32;be&#32;encoded&#32;in&#32;&apos;e&apos;.</emphasis>
01340 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01341"/><link linkend="_lcode_8c_1aeb34b4c711a24f0c833d265a67ca9383">01341</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1aeb34b4c711a24f0c833d265a67ca9383">codeunexpval</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01342 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e);&#32;&#32;<emphasis role="comment">/*&#32;opcodes&#32;operate&#32;only&#32;on&#32;registers&#32;*/</emphasis>
01343 &#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;e);
01344 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;op,&#32;0,&#32;r,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;generate&#32;opcode&#32;*/</emphasis>
01345 &#32;&#32;e-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>;&#32;&#32;<emphasis role="comment">/*&#32;all&#32;those&#32;operations&#32;are&#32;relocatable&#32;*/</emphasis>
01346 &#32;&#32;<link linkend="_lcode_8c_1ab17c57ffa1dc5c51f0d67a4ae8a5f073">luaK_fixline</link>(fs,&#32;line);
01347 }
01348 
01349 
01350 <emphasis role="comment">/*</emphasis>
01351 <emphasis role="comment">**&#32;Emit&#32;code&#32;for&#32;binary&#32;expressions&#32;that&#32;&quot;produce&#32;values&quot;</emphasis>
01352 <emphasis role="comment">**&#32;(everything&#32;but&#32;logical&#32;operators&#32;&apos;and&apos;/&apos;or&apos;&#32;and&#32;comparison</emphasis>
01353 <emphasis role="comment">**&#32;operators).</emphasis>
01354 <emphasis role="comment">**&#32;Expression&#32;to&#32;produce&#32;final&#32;result&#32;will&#32;be&#32;encoded&#32;in&#32;&apos;e1&apos;.</emphasis>
01355 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01356"/><link linkend="_lcode_8c_1a01a145e647812f1f883b3f3807e47e86">01356</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a01a145e647812f1f883b3f3807e47e86">finishbinexpval</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2,
01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op,&#32;<emphasis role="keywordtype">int</emphasis>&#32;v2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;flip,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;mmop,&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1">TMS</link>&#32;event)&#32;{
01359 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;v1&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e1);
01360 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc&#32;=&#32;<link linkend="_lcode_8c_1a7f8d052466e2665575f464a55f90a509">luaK_codeABCk</link>(fs,&#32;op,&#32;0,&#32;v1,&#32;v2,&#32;0);
01361 &#32;&#32;<link linkend="_lcode_8c_1a2afdd34342361dc25c3b44f45c87558d">freeexps</link>(fs,&#32;e1,&#32;e2);
01362 &#32;&#32;e1-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;pc;
01363 &#32;&#32;e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea50c55cd86f50851c8861fb827cff6073">VRELOC</link>;&#32;&#32;<emphasis role="comment">/*&#32;all&#32;those&#32;operations&#32;are&#32;relocatable&#32;*/</emphasis>
01364 &#32;&#32;<link linkend="_lcode_8c_1ab17c57ffa1dc5c51f0d67a4ae8a5f073">luaK_fixline</link>(fs,&#32;line);
01365 &#32;&#32;<link linkend="_lcode_8c_1a7f8d052466e2665575f464a55f90a509">luaK_codeABCk</link>(fs,&#32;mmop,&#32;v1,&#32;v2,&#32;event,&#32;flip);&#32;&#32;<emphasis role="comment">/*&#32;to&#32;call&#32;metamethod&#32;*/</emphasis>
01366 &#32;&#32;<link linkend="_lcode_8c_1ab17c57ffa1dc5c51f0d67a4ae8a5f073">luaK_fixline</link>(fs,&#32;line);
01367 }
01368 
01369 
01370 <emphasis role="comment">/*</emphasis>
01371 <emphasis role="comment">**&#32;Emit&#32;code&#32;for&#32;binary&#32;expressions&#32;that&#32;&quot;produce&#32;values&quot;&#32;over</emphasis>
01372 <emphasis role="comment">**&#32;two&#32;registers.</emphasis>
01373 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01374"/><link linkend="_lcode_8c_1af18af1f6b975aea02c8c7be45a80d0c7">01374</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1af18af1f6b975aea02c8c7be45a80d0c7">codebinexpval</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op,
01375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01376 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;v2&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e2);&#32;&#32;<emphasis role="comment">/*&#32;both&#32;operands&#32;are&#32;in&#32;registers&#32;*/</emphasis>
01377 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a96186829480e5b34b1373288e956b1c8">OP_ADD</link>&#32;&lt;=&#32;op&#32;&amp;&amp;&#32;op&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a789f5e2846cb039c0273aff134011fd4">OP_SHR</link>);
01378 &#32;&#32;<link linkend="_lcode_8c_1a01a145e647812f1f883b3f3807e47e86">finishbinexpval</link>(fs,&#32;e1,&#32;e2,&#32;op,&#32;v2,&#32;0,&#32;line,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a25acd5dff5083adb067889345ae100d6">OP_MMBIN</link>,
01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1">TMS</link>,&#32;(op&#32;-&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a96186829480e5b34b1373288e956b1c8">OP_ADD</link>)&#32;+&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1ab9351e0ba5143d069dfb4dea793676b5">TM_ADD</link>));
01380 }
01381 
01382 
01383 <emphasis role="comment">/*</emphasis>
01384 <emphasis role="comment">**&#32;Code&#32;binary&#32;operators&#32;with&#32;immediate&#32;operands.</emphasis>
01385 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01386"/><link linkend="_lcode_8c_1a94ae37fabbb4863d4d782b58a7335106">01386</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a94ae37fabbb4863d4d782b58a7335106">codebini</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op,
01387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;flip,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
01388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1">TMS</link>&#32;event)&#32;{
01389 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;v2&#32;=&#32;<link linkend="_lopcodes_8h_1a1918af9b0bd50d9a0e6b3a4e243bbaad">int2sC</link>(<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(e2-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>));&#32;&#32;<emphasis role="comment">/*&#32;immediate&#32;operand&#32;*/</emphasis>
01390 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e2-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>);
01391 &#32;&#32;<link linkend="_lcode_8c_1a01a145e647812f1f883b3f3807e47e86">finishbinexpval</link>(fs,&#32;e1,&#32;e2,&#32;op,&#32;v2,&#32;flip,&#32;line,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a2068a8603e2904d2abd826877ab9e516">OP_MMBINI</link>,&#32;event);
01392 }
01393 
01394 
01395 <emphasis role="comment">/*&#32;Try&#32;to&#32;code&#32;a&#32;binary&#32;operator&#32;negating&#32;its&#32;second&#32;operand.</emphasis>
01396 <emphasis role="comment">**&#32;For&#32;the&#32;metamethod,&#32;2nd&#32;operand&#32;must&#32;keep&#32;its&#32;original&#32;value.</emphasis>
01397 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01398"/><link linkend="_lcode_8c_1a143564608b873128e8af05828f8c3e36">01398</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1a143564608b873128e8af05828f8c3e36">finishbinexpneg</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2,
01399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1">TMS</link>&#32;event)&#32;{
01400 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lcode_8c_1a3eb85bb37542cd67b33cbf85fec9bf48">luaK_isKint</link>(e2))
01401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;an&#32;integer&#32;constant&#32;*/</emphasis>
01402 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01403 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;i2&#32;=&#32;e2-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1afb2d1d96e31b2193d286d12558620f73">ival</link>;
01404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="_lcode_8c_1a3447d4fe8de721e03288feb166a7ede0">fitsC</link>(i2)&#32;&amp;&amp;&#32;<link linkend="_lcode_8c_1a3447d4fe8de721e03288feb166a7ede0">fitsC</link>(-i2)))
01405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;in&#32;the&#32;proper&#32;range&#32;*/</emphasis>
01406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;operating&#32;a&#32;small&#32;integer&#32;constant&#32;*/</emphasis>
01407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;v2&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(i2);
01408 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a01a145e647812f1f883b3f3807e47e86">finishbinexpval</link>(fs,&#32;e1,&#32;e2,&#32;op,&#32;<link linkend="_lopcodes_8h_1a1918af9b0bd50d9a0e6b3a4e243bbaad">int2sC</link>(-v2),&#32;0,&#32;line,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a2068a8603e2904d2abd826877ab9e516">OP_MMBINI</link>,&#32;event);
01409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;correct&#32;metamethod&#32;argument&#32;*/</emphasis>
01410 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a52ddcdcbd367c4557cc83c38e3e1723f">SETARG_B</link>(fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>&#32;-&#32;1],&#32;<link linkend="_lopcodes_8h_1a1918af9b0bd50d9a0e6b3a4e243bbaad">int2sC</link>(v2));
01411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;successfully&#32;coded&#32;*/</emphasis>
01412 &#32;&#32;&#32;&#32;}
01413 &#32;&#32;}
01414 }
01415 
01416 
<anchor xml:id="_lcode_8c_source_1l01417"/><link linkend="_lcode_8c_1a5cb5734345361c95cee8e08306f36821">01417</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a5cb5734345361c95cee8e08306f36821">swapexps</link>&#32;(<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2)&#32;{
01418 &#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;temp&#32;=&#32;*e1;&#32;*e1&#32;=&#32;*e2;&#32;*e2&#32;=&#32;temp;&#32;&#32;<emphasis role="comment">/*&#32;swap&#32;&apos;e1&apos;&#32;and&#32;&apos;e2&apos;&#32;*/</emphasis>
01419 }
01420 
01421 
01422 <emphasis role="comment">/*</emphasis>
01423 <emphasis role="comment">**&#32;Code&#32;arithmetic&#32;operators&#32;(&apos;+&apos;,&#32;&apos;-&apos;,&#32;...).&#32;If&#32;second&#32;operand&#32;is&#32;a</emphasis>
01424 <emphasis role="comment">**&#32;constant&#32;in&#32;the&#32;proper&#32;range,&#32;use&#32;variant&#32;opcodes&#32;with&#32;K&#32;operands.</emphasis>
01425 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01426"/><link linkend="_lcode_8c_1ab10806c569e8a861c7efcf845b36c8bc">01426</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1ab10806c569e8a861c7efcf845b36c8bc">codearith</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;opr,
01427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;flip,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01428 &#32;&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1">TMS</link>&#32;<emphasis role="keyword">event</emphasis>&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1">TMS</link>,&#32;opr&#32;+&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1ab9351e0ba5143d069dfb4dea793676b5">TM_ADD</link>);
01429 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1afc00b6e7519fadb094edd29e9019eefc">tonumeral</link>(e2,&#32;NULL)&#32;&amp;&amp;&#32;<link linkend="_lcode_8c_1a0d67ef87afbe99966e5679b596c6a466">luaK_exp2K</link>(fs,&#32;e2))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;K&#32;operand?&#32;*/</emphasis>
01430 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;v2&#32;=&#32;e2-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;K&#32;index&#32;*/</emphasis>
01431 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>,&#32;opr&#32;+&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7aabeaee235c2d819809ba4179c9ad7c40">OP_ADDK</link>);
01432 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a01a145e647812f1f883b3f3807e47e86">finishbinexpval</link>(fs,&#32;e1,&#32;e2,&#32;op,&#32;v2,&#32;flip,&#32;line,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a023d51bef94e0b9450cce3b76788a229">OP_MMBINK</link>,&#32;event);
01433 &#32;&#32;}
01434 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;&apos;e2&apos;&#32;is&#32;neither&#32;an&#32;immediate&#32;nor&#32;a&#32;K&#32;operand&#32;*/</emphasis>
01435 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>,&#32;opr&#32;+&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a96186829480e5b34b1373288e956b1c8">OP_ADD</link>);
01436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flip)
01437 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a5cb5734345361c95cee8e08306f36821">swapexps</link>(e1,&#32;e2);&#32;&#32;<emphasis role="comment">/*&#32;back&#32;to&#32;original&#32;order&#32;*/</emphasis>
01438 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af18af1f6b975aea02c8c7be45a80d0c7">codebinexpval</link>(fs,&#32;op,&#32;e1,&#32;e2,&#32;line);&#32;&#32;<emphasis role="comment">/*&#32;use&#32;standard&#32;operators&#32;*/</emphasis>
01439 &#32;&#32;}
01440 }
01441 
01442 
01443 <emphasis role="comment">/*</emphasis>
01444 <emphasis role="comment">**&#32;Code&#32;commutative&#32;operators&#32;(&apos;+&apos;,&#32;&apos;*&apos;).&#32;If&#32;first&#32;operand&#32;is&#32;a</emphasis>
01445 <emphasis role="comment">**&#32;numeric&#32;constant,&#32;change&#32;order&#32;of&#32;operands&#32;to&#32;try&#32;to&#32;use&#32;an</emphasis>
01446 <emphasis role="comment">**&#32;immediate&#32;or&#32;K&#32;operator.</emphasis>
01447 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01448"/><link linkend="_lcode_8c_1a0639238e21aa55ffe24f15b16d220372">01448</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a0639238e21aa55ffe24f15b16d220372">codecommutative</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;op,
01449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01450 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;flip&#32;=&#32;0;
01451 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1afc00b6e7519fadb094edd29e9019eefc">tonumeral</link>(e1,&#32;NULL))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;is&#32;first&#32;operand&#32;a&#32;numeric&#32;constant?&#32;*/</emphasis>
01452 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a5cb5734345361c95cee8e08306f36821">swapexps</link>(e1,&#32;e2);&#32;&#32;<emphasis role="comment">/*&#32;change&#32;order&#32;*/</emphasis>
01453 &#32;&#32;&#32;&#32;flip&#32;=&#32;1;
01454 &#32;&#32;}
01455 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(op&#32;==&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a6a040b1b3b8cc217942b40bdcfd89a12">OPR_ADD</link>&#32;&amp;&amp;&#32;<link linkend="_lcode_8c_1a3cf85f67771eb8781afdc02625d389c1">isSCint</link>(e2))&#32;&#32;<emphasis role="comment">/*&#32;immediate&#32;operand?&#32;*/</emphasis>
01456 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a94ae37fabbb4863d4d782b58a7335106">codebini</link>(fs,&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ae59b0459d271ccd33e3b5e525d8d82ec">OP_ADDI</link>),&#32;e1,&#32;e2,&#32;flip,&#32;line,&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1ab9351e0ba5143d069dfb4dea793676b5">TM_ADD</link>);
01457 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
01458 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ab10806c569e8a861c7efcf845b36c8bc">codearith</link>(fs,&#32;op,&#32;e1,&#32;e2,&#32;flip,&#32;line);
01459 }
01460 
01461 
01462 <emphasis role="comment">/*</emphasis>
01463 <emphasis role="comment">**&#32;Code&#32;bitwise&#32;operations;&#32;they&#32;are&#32;all&#32;associative,&#32;so&#32;the&#32;function</emphasis>
01464 <emphasis role="comment">**&#32;tries&#32;to&#32;put&#32;an&#32;integer&#32;constant&#32;as&#32;the&#32;2nd&#32;operand&#32;(a&#32;K&#32;operand).</emphasis>
01465 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01466"/><link linkend="_lcode_8c_1ad84321345dde4a0ee416c6e77aa9f79a">01466</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1ad84321345dde4a0ee416c6e77aa9f79a">codebitwise</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;opr,
01467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01468 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;flip&#32;=&#32;0;
01469 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;v2;
01470 &#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op;
01471 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>&#32;&amp;&amp;&#32;<link linkend="_lcode_8c_1a8a1a4f8416bf829386d17267ba2636b6">luaK_exp2RK</link>(fs,&#32;e1))&#32;{
01472 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a5cb5734345361c95cee8e08306f36821">swapexps</link>(e1,&#32;e2);&#32;&#32;<emphasis role="comment">/*&#32;&apos;e2&apos;&#32;will&#32;be&#32;the&#32;constant&#32;operand&#32;*/</emphasis>
01473 &#32;&#32;&#32;&#32;flip&#32;=&#32;1;
01474 &#32;&#32;}
01475 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(e2-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>&#32;&amp;&amp;&#32;<link linkend="_lcode_8c_1a8a1a4f8416bf829386d17267ba2636b6">luaK_exp2RK</link>(fs,&#32;e2)))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;no&#32;constants?&#32;*/</emphasis>
01476 &#32;&#32;&#32;&#32;op&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>,&#32;opr&#32;+&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a96186829480e5b34b1373288e956b1c8">OP_ADD</link>);
01477 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af18af1f6b975aea02c8c7be45a80d0c7">codebinexpval</link>(fs,&#32;op,&#32;e1,&#32;e2,&#32;line);&#32;&#32;<emphasis role="comment">/*&#32;all-register&#32;opcodes&#32;*/</emphasis>
01478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01479 &#32;&#32;}
01480 &#32;&#32;v2&#32;=&#32;e2-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;index&#32;in&#32;K&#32;array&#32;*/</emphasis>
01481 &#32;&#32;op&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>,&#32;opr&#32;+&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7aabeaee235c2d819809ba4179c9ad7c40">OP_ADDK</link>);
01482 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lobject_8h_1abade243295a9140f7b86838fbb049054">ttisinteger</link>(&amp;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>[v2]));
01483 &#32;&#32;<link linkend="_lcode_8c_1a01a145e647812f1f883b3f3807e47e86">finishbinexpval</link>(fs,&#32;e1,&#32;e2,&#32;op,&#32;v2,&#32;flip,&#32;line,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a023d51bef94e0b9450cce3b76788a229">OP_MMBINK</link>,
01484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1">TMS</link>,&#32;opr&#32;+&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1ab9351e0ba5143d069dfb4dea793676b5">TM_ADD</link>));
01485 }
01486 
01487 
01488 <emphasis role="comment">/*</emphasis>
01489 <emphasis role="comment">**&#32;Emit&#32;code&#32;for&#32;order&#32;comparisons.&#32;When&#32;using&#32;an&#32;immediate&#32;operand,</emphasis>
01490 <emphasis role="comment">**&#32;&apos;isfloat&apos;&#32;tells&#32;whether&#32;the&#32;original&#32;value&#32;was&#32;a&#32;float.</emphasis>
01491 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01492"/><link linkend="_lcode_8c_1add743403f3f3e4f3478075841a65db0d">01492</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1add743403f3f3e4f3478075841a65db0d">codeorder</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2)&#32;{
01493 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r1,&#32;r2;
01494 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;im;
01495 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;isfloat&#32;=&#32;0;
01496 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1af0849f886c6299a2556da1228e2f9b18">isSCnumber</link>(e2,&#32;&amp;im,&#32;&amp;isfloat))&#32;{
01497 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;use&#32;immediate&#32;operand&#32;*/</emphasis>
01498 &#32;&#32;&#32;&#32;r1&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e1);
01499 &#32;&#32;&#32;&#32;r2&#32;=&#32;im;
01500 &#32;&#32;&#32;&#32;op&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>,&#32;(op&#32;-&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a7d5ed006824d331041dad8486e52df50">OP_LT</link>)&#32;+&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a7355d162e8b15877fe33c54e3b755746">OP_LTI</link>);
01501 &#32;&#32;}
01502 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1af0849f886c6299a2556da1228e2f9b18">isSCnumber</link>(e1,&#32;&amp;im,&#32;&amp;isfloat))&#32;{
01503 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;transform&#32;(A&#32;&lt;&#32;B)&#32;to&#32;(B&#32;&gt;&#32;A)&#32;and&#32;(A&#32;&lt;=&#32;B)&#32;to&#32;(B&#32;&gt;=&#32;A)&#32;*/</emphasis>
01504 &#32;&#32;&#32;&#32;r1&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e2);
01505 &#32;&#32;&#32;&#32;r2&#32;=&#32;im;
01506 &#32;&#32;&#32;&#32;op&#32;=&#32;(op&#32;==&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a7d5ed006824d331041dad8486e52df50">OP_LT</link>)&#32;?&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a4c9ef8190def252dc1e0deb1bf7e787e">OP_GTI</link>&#32;:&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ade0bd78cc2f7ec9c1bf6c161759221fa">OP_GEI</link>;
01507 &#32;&#32;}
01508 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;regular&#32;case,&#32;compare&#32;two&#32;registers&#32;*/</emphasis>
01509 &#32;&#32;&#32;&#32;r1&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e1);
01510 &#32;&#32;&#32;&#32;r2&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e2);
01511 &#32;&#32;}
01512 &#32;&#32;<link linkend="_lcode_8c_1a2afdd34342361dc25c3b44f45c87558d">freeexps</link>(fs,&#32;e1,&#32;e2);
01513 &#32;&#32;e1-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8c_1a5ca879c3a79630e5af194a82971f7ab2">condjump</link>(fs,&#32;op,&#32;r1,&#32;r2,&#32;isfloat,&#32;1);
01514 &#32;&#32;e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead1066918edd602fb0577c9f58ced173c">VJMP</link>;
01515 }
01516 
01517 
01518 <emphasis role="comment">/*</emphasis>
01519 <emphasis role="comment">**&#32;Emit&#32;code&#32;for&#32;equality&#32;comparisons&#32;(&apos;==&apos;,&#32;&apos;~=&apos;).</emphasis>
01520 <emphasis role="comment">**&#32;&apos;e1&apos;&#32;was&#32;already&#32;put&#32;as&#32;RK&#32;by&#32;&apos;luaK_infix&apos;.</emphasis>
01521 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01522"/><link linkend="_lcode_8c_1ae4fe1997f80682df6f176c52bd3d3898">01522</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1ae4fe1997f80682df6f176c52bd3d3898">codeeq</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;opr,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2)&#32;{
01523 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r1,&#32;r2;
01524 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;im;
01525 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;isfloat&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;not&#32;needed&#32;here,&#32;but&#32;kept&#32;for&#32;symmetry&#32;*/</emphasis>
01526 &#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op;
01527 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;!=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be">VNONRELOC</link>)&#32;{
01528 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4eaf926040fb3c22e9456f27b78e4ad19d2">VK</link>&#32;||&#32;e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>&#32;||&#32;e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;==&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967">VKFLT</link>);
01529 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a5cb5734345361c95cee8e08306f36821">swapexps</link>(e1,&#32;e2);
01530 &#32;&#32;}
01531 &#32;&#32;r1&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e1);&#32;&#32;<emphasis role="comment">/*&#32;1st&#32;expression&#32;must&#32;be&#32;in&#32;register&#32;*/</emphasis>
01532 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1af0849f886c6299a2556da1228e2f9b18">isSCnumber</link>(e2,&#32;&amp;im,&#32;&amp;isfloat))&#32;{
01533 &#32;&#32;&#32;&#32;op&#32;=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a073492f9f138556d12ee1020f01afa9d">OP_EQI</link>;
01534 &#32;&#32;&#32;&#32;r2&#32;=&#32;im;&#32;&#32;<emphasis role="comment">/*&#32;immediate&#32;operand&#32;*/</emphasis>
01535 &#32;&#32;}
01536 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a8a1a4f8416bf829386d17267ba2636b6">luaK_exp2RK</link>(fs,&#32;e2))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;1st&#32;expression&#32;is&#32;constant?&#32;*/</emphasis>
01537 &#32;&#32;&#32;&#32;op&#32;=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ac474caab30c580d7a336de092e3e8754">OP_EQK</link>;
01538 &#32;&#32;&#32;&#32;r2&#32;=&#32;e2-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>;&#32;&#32;<emphasis role="comment">/*&#32;constant&#32;index&#32;*/</emphasis>
01539 &#32;&#32;}
01540 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01541 &#32;&#32;&#32;&#32;op&#32;=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a1634898deb6e4d1bcb15416034c641c5">OP_EQ</link>;&#32;&#32;<emphasis role="comment">/*&#32;will&#32;compare&#32;two&#32;registers&#32;*/</emphasis>
01542 &#32;&#32;&#32;&#32;r2&#32;=&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;e2);
01543 &#32;&#32;}
01544 &#32;&#32;<link linkend="_lcode_8c_1a2afdd34342361dc25c3b44f45c87558d">freeexps</link>(fs,&#32;e1,&#32;e2);
01545 &#32;&#32;e1-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;=&#32;<link linkend="_lcode_8c_1a5ca879c3a79630e5af194a82971f7ab2">condjump</link>(fs,&#32;op,&#32;r1,&#32;r2,&#32;isfloat,&#32;(opr&#32;==&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1c53aacbc69d7058b240be92b134a7eb">OPR_EQ</link>));
01546 &#32;&#32;e1-&gt;<link linkend="_structexpdesc_1a89230bd802e040e766d327f212d6e8cc">k</link>&#32;=&#32;<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ead1066918edd602fb0577c9f58ced173c">VJMP</link>;
01547 }
01548 
01549 
01550 <emphasis role="comment">/*</emphasis>
01551 <emphasis role="comment">**&#32;Apply&#32;prefix&#32;operation&#32;&apos;op&apos;&#32;to&#32;expression&#32;&apos;e&apos;.</emphasis>
01552 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01553"/><link linkend="_lcode_8h_1a108f48cde9af08a87347aa6380a4a015">01553</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a3fc6858944504885353a652022d15a4b">luaK_prefix</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534">UnOpr</link>&#32;op,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01554 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structexpdesc">expdesc</link>&#32;ef&#32;=&#32;{<link linkend="_lparser_8h_1aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f">VKINT</link>,&#32;{0},&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>,&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>};
01555 &#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(fs,&#32;e);
01556 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(op)&#32;{
01557 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534ad7aef0de1fbf580a7d03635a3e4058f3">OPR_MINUS</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534a692243c52fe8a114bce557d05a198c68">OPR_BNOT</link>:&#32;&#32;<emphasis role="comment">/*&#32;use&#32;&apos;ef&apos;&#32;as&#32;fake&#32;2nd&#32;operand&#32;*/</emphasis>
01558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a690b5c3cf2d262aaef28188ecc62d1b2">constfolding</link>(fs,&#32;op&#32;+&#32;<link linkend="_lua_8h_1ae976b4a61ff4d4b3bb8cd85cdcceda10">LUA_OPUNM</link>,&#32;e,&#32;&amp;ef))
01559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;else&#32;*/</emphasis>&#32;<emphasis role="comment">/*&#32;FALLTHROUGH&#32;*/</emphasis>
01561 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534a09eeed48a27b90460bab6d8ba33e620e">OPR_LEN</link>:
01562 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1aeb34b4c711a24f0c833d265a67ca9383">codeunexpval</link>(fs,&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>,&#32;op&#32;+&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ae3fd0932f8be8e5e810d731fd60ab8ef">OP_UNM</link>),&#32;e,&#32;line);
01563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1a36fd1054d39d6fc3373303522a7ef534a238495588717191ca92bb9f8a5c80b59">OPR_NOT</link>:&#32;<link linkend="_lcode_8c_1adf2b3a04b610027f57d8ebd6a9ec2a12">codenot</link>(fs,&#32;e);&#32;<emphasis role="keywordflow">break</emphasis>;
01565 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(0);
01566 &#32;&#32;}
01567 }
01568 
01569 
01570 <emphasis role="comment">/*</emphasis>
01571 <emphasis role="comment">**&#32;Process&#32;1st&#32;operand&#32;&apos;v&apos;&#32;of&#32;binary&#32;operation&#32;&apos;op&apos;&#32;before&#32;reading</emphasis>
01572 <emphasis role="comment">**&#32;2nd&#32;operand.</emphasis>
01573 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01574"/><link linkend="_lcode_8h_1ad66fe8cd73e03e0d604d8c9572011ee7">01574</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a07039dc526d35d6db3f1a29c7304fe89">luaK_infix</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;op,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*v)&#32;{
01575 &#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(fs,&#32;v);
01576 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(op)&#32;{
01577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a3dbbb7b8ec103877916a8a4c4671a3ef">OPR_AND</link>:&#32;{
01578 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a7d4ea6b61d0c157feca2afa59a9f877e">luaK_goiftrue</link>(fs,&#32;v);&#32;&#32;<emphasis role="comment">/*&#32;go&#32;ahead&#32;only&#32;if&#32;&apos;v&apos;&#32;is&#32;true&#32;*/</emphasis>
01579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01580 &#32;&#32;&#32;&#32;}
01581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83ae104a7612eb80ee5d9ff5715a938a2c1">OPR_OR</link>:&#32;{
01582 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a61d509689d21bb8b1fe8681a03ccbe58">luaK_goiffalse</link>(fs,&#32;v);&#32;&#32;<emphasis role="comment">/*&#32;go&#32;ahead&#32;only&#32;if&#32;&apos;v&apos;&#32;is&#32;false&#32;*/</emphasis>
01583 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01584 &#32;&#32;&#32;&#32;}
01585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a5f601beb91f937ddb7a1835f93016fdc">OPR_CONCAT</link>:&#32;{
01586 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;v);&#32;&#32;<emphasis role="comment">/*&#32;operand&#32;must&#32;be&#32;on&#32;the&#32;stack&#32;*/</emphasis>
01587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01588 &#32;&#32;&#32;&#32;}
01589 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a6a040b1b3b8cc217942b40bdcfd89a12">OPR_ADD</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a9af57e8c20b32a5bae4e7d5b94015a0d">OPR_SUB</link>:
01590 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a3b374e6db04a6e4645e113fc82c873e2">OPR_MUL</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aa0b20b22c1a53d0fb294bd15993fd4d8">OPR_DIV</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83ac91ab547f0844521654b0e8924085d1e">OPR_IDIV</link>:
01591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83abc6e1524cbf3d8a2b2a6689d5c40bc57">OPR_MOD</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83af06a2e29452e38eb8ed02812a1aa1083">OPR_POW</link>:
01592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a83d1f111c407b2a4ce3ecdf5fc588e4d">OPR_BAND</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aee42d0b535e2a8f6686dde348f113210">OPR_BOR</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aba9d6ec8db62deeab8b731a973023156">OPR_BXOR</link>:
01593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aea58586b669bfc9483fa17069e7f3602">OPR_SHL</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a53468a69eae492aec03a799f02754411">OPR_SHR</link>:&#32;{
01594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lcode_8c_1afc00b6e7519fadb094edd29e9019eefc">tonumeral</link>(v,&#32;NULL))
01595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;v);
01596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;else&#32;keep&#32;numeral,&#32;which&#32;may&#32;be&#32;folded&#32;with&#32;2nd&#32;operand&#32;*/</emphasis>
01597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01598 &#32;&#32;&#32;&#32;}
01599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1c53aacbc69d7058b240be92b134a7eb">OPR_EQ</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1f56f30f2368c0f93c9aeeea7e72ac55">OPR_NE</link>:&#32;{
01600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lcode_8c_1afc00b6e7519fadb094edd29e9019eefc">tonumeral</link>(v,&#32;NULL))
01601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a8a1a4f8416bf829386d17267ba2636b6">luaK_exp2RK</link>(fs,&#32;v);
01602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;else&#32;keep&#32;numeral,&#32;which&#32;may&#32;be&#32;an&#32;immediate&#32;operand&#32;*/</emphasis>
01603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01604 &#32;&#32;&#32;&#32;}
01605 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a15e3bd67027d90471048ea39abfd32fa">OPR_LT</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a96f2a6272233d80a19b4f4482cf121a5">OPR_LE</link>:
01606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a3c68b5b6ad04299cc50ef1c4611441b0">OPR_GT</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a5a35f1c08acd1e14156d32e04d8b9806">OPR_GE</link>:&#32;{
01607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lstrlib_8c_1a7c1d654b7b6114d7a0abc8d351dd1bcd">dummy</link>,&#32;dummy2;
01608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lcode_8c_1af0849f886c6299a2556da1228e2f9b18">isSCnumber</link>(v,&#32;&amp;<link linkend="_lstrlib_8c_1a7c1d654b7b6114d7a0abc8d351dd1bcd">dummy</link>,&#32;&amp;dummy2))
01609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad2850d253ee1400e3e00e5a0d26d596d">luaK_exp2anyreg</link>(fs,&#32;v);
01610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;else&#32;keep&#32;numeral,&#32;which&#32;may&#32;be&#32;an&#32;immediate&#32;operand&#32;*/</emphasis>
01611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01612 &#32;&#32;&#32;&#32;}
01613 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(0);
01614 &#32;&#32;}
01615 }
01616 
01617 <emphasis role="comment">/*</emphasis>
01618 <emphasis role="comment">**&#32;Create&#32;code&#32;for&#32;&apos;(e1&#32;..&#32;e2)&apos;.</emphasis>
01619 <emphasis role="comment">**&#32;For&#32;&apos;(e1&#32;..&#32;e2.1&#32;..&#32;e2.2)&apos;&#32;(which&#32;is&#32;&apos;(e1&#32;..&#32;(e2.1&#32;..&#32;e2.2))&apos;,</emphasis>
01620 <emphasis role="comment">**&#32;because&#32;concatenation&#32;is&#32;right&#32;associative),&#32;merge&#32;both&#32;CONCATs.</emphasis>
01621 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01622"/><link linkend="_lcode_8c_1a57739bb8f355074018a62ee86f8f5c36">01622</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a57739bb8f355074018a62ee86f8f5c36">codeconcat</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01623 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*ie2&#32;=&#32;<link linkend="_lcode_8c_1a2d946f6d31e46b2607bd69d89ca1a9ce">previousinstruction</link>(fs);
01624 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(*ie2)&#32;==&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a28a7da14b1413b441cf2a5d433b43a51">OP_CONCAT</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;is&#32;&apos;e2&apos;&#32;a&#32;concatenation?&#32;*/</emphasis>
01625 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;<link linkend="_lopcodes_8h_1a7a343159ef7669a438c2097b839b2b13">GETARG_B</link>(*ie2);&#32;&#32;<emphasis role="comment">/*&#32;#&#32;of&#32;elements&#32;concatenated&#32;in&#32;&apos;e2&apos;&#32;*/</emphasis>
01626 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e1-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>&#32;+&#32;1&#32;==&#32;<link linkend="_lopcodes_8h_1a1d504abc1e2246548f89977210dce0b9">GETARG_A</link>(*ie2));
01627 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;e2);
01628 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a01900876b9281238c6dbb4d7bc59ca66">SETARG_A</link>(*ie2,&#32;e1-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>);&#32;&#32;<emphasis role="comment">/*&#32;correct&#32;first&#32;element&#32;(&apos;e1&apos;)&#32;*/</emphasis>
01629 &#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a52ddcdcbd367c4557cc83c38e3e1723f">SETARG_B</link>(*ie2,&#32;n&#32;+&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;will&#32;concatenate&#32;one&#32;more&#32;element&#32;*/</emphasis>
01630 &#32;&#32;}
01631 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;&apos;e2&apos;&#32;is&#32;not&#32;a&#32;concatenation&#32;*/</emphasis>
01632 &#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a28a7da14b1413b441cf2a5d433b43a51">OP_CONCAT</link>,&#32;e1-&gt;<link linkend="_structexpdesc_1aed582e7b6d85c89efa920b812fd10616">u</link>.<link linkend="_structexpdesc_1a29045c997670516117cd2d1cac1069ed">info</link>,&#32;2,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;new&#32;concat&#32;opcode&#32;*/</emphasis>
01633 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a9d534bd7aa79921e7339c9c1106acea9">freeexp</link>(fs,&#32;e2);
01634 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ab17c57ffa1dc5c51f0d67a4ae8a5f073">luaK_fixline</link>(fs,&#32;line);
01635 &#32;&#32;}
01636 }
01637 
01638 
01639 <emphasis role="comment">/*</emphasis>
01640 <emphasis role="comment">**&#32;Finalize&#32;code&#32;for&#32;binary&#32;operation,&#32;after&#32;reading&#32;2nd&#32;operand.</emphasis>
01641 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01642"/><link linkend="_lcode_8h_1a2a87516e72f08e1b692331de96a6d8d6">01642</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1a21e9443ce3d06694c2f9ea497052fab4">luaK_posfix</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83">BinOpr</link>&#32;opr,
01643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e1,&#32;<link linkend="_structexpdesc">expdesc</link>&#32;*e2,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01644 &#32;&#32;<link linkend="_lcode_8c_1a982df0963fcf2227c3a5c96163d8ef03">luaK_dischargevars</link>(fs,&#32;e2);
01645 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8h_1af868dddd41f6748292cc399555e82f89">foldbinop</link>(opr)&#32;&amp;&amp;&#32;<link linkend="_lcode_8c_1a690b5c3cf2d262aaef28188ecc62d1b2">constfolding</link>(fs,&#32;opr&#32;+&#32;<link linkend="_lua_8h_1acfd183382ff4ae12fc5f987e969f9e30">LUA_OPADD</link>,&#32;e1,&#32;e2))
01646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;done&#32;by&#32;folding&#32;*/</emphasis>
01647 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(opr)&#32;{
01648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a3dbbb7b8ec103877916a8a4c4671a3ef">OPR_AND</link>:&#32;{
01649 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e1-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>&#32;==&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>);&#32;&#32;<emphasis role="comment">/*&#32;list&#32;closed&#32;by&#32;&apos;luaK_infix&apos;&#32;*/</emphasis>
01650 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a99718e3c19e193690f60b7595bee952e">luaK_concat</link>(fs,&#32;&amp;e2-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>,&#32;e1-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>);
01651 &#32;&#32;&#32;&#32;&#32;&#32;*e1&#32;=&#32;*e2;
01652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01653 &#32;&#32;&#32;&#32;}
01654 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83ae104a7612eb80ee5d9ff5715a938a2c1">OPR_OR</link>:&#32;{
01655 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(e1-&gt;<link linkend="_structexpdesc_1a362077c979b0bb65159c603270e40f70">f</link>&#32;==&#32;<link linkend="_lcode_8h_1ac12a06b93b62373c9e664c7a06e838b8">NO_JUMP</link>);&#32;&#32;<emphasis role="comment">/*&#32;list&#32;closed&#32;by&#32;&apos;luaK_infix&apos;&#32;*/</emphasis>
01656 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a99718e3c19e193690f60b7595bee952e">luaK_concat</link>(fs,&#32;&amp;e2-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>,&#32;e1-&gt;<link linkend="_structexpdesc_1acbf17814c95ed42dfef3c614fe42cbfb">t</link>);
01657 &#32;&#32;&#32;&#32;&#32;&#32;*e1&#32;=&#32;*e2;
01658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01659 &#32;&#32;&#32;&#32;}
01660 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a5f601beb91f937ddb7a1835f93016fdc">OPR_CONCAT</link>:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;e1&#32;..&#32;e2&#32;*/</emphasis>
01661 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a252b7ff26ed24db991e8a11275bcf75c">luaK_exp2nextreg</link>(fs,&#32;e2);
01662 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a57739bb8f355074018a62ee86f8f5c36">codeconcat</link>(fs,&#32;e1,&#32;e2,&#32;line);
01663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01664 &#32;&#32;&#32;&#32;}
01665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a6a040b1b3b8cc217942b40bdcfd89a12">OPR_ADD</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a3b374e6db04a6e4645e113fc82c873e2">OPR_MUL</link>:&#32;{
01666 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a0639238e21aa55ffe24f15b16d220372">codecommutative</link>(fs,&#32;opr,&#32;e1,&#32;e2,&#32;line);
01667 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01668 &#32;&#32;&#32;&#32;}
01669 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a9af57e8c20b32a5bae4e7d5b94015a0d">OPR_SUB</link>:&#32;{
01670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a143564608b873128e8af05828f8c3e36">finishbinexpneg</link>(fs,&#32;e1,&#32;e2,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ae59b0459d271ccd33e3b5e525d8d82ec">OP_ADDI</link>,&#32;line,&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1aae0e4c65a5c4797c1dbb82609504f0f6">TM_SUB</link>))
01671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">/*&#32;coded&#32;as&#32;(r1&#32;+&#32;-I)&#32;*/</emphasis>
01672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;ELSE&#32;*/</emphasis>
01673 &#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">/*&#32;FALLTHROUGH&#32;*/</emphasis>
01674 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aa0b20b22c1a53d0fb294bd15993fd4d8">OPR_DIV</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83ac91ab547f0844521654b0e8924085d1e">OPR_IDIV</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83abc6e1524cbf3d8a2b2a6689d5c40bc57">OPR_MOD</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83af06a2e29452e38eb8ed02812a1aa1083">OPR_POW</link>:&#32;{
01675 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ab10806c569e8a861c7efcf845b36c8bc">codearith</link>(fs,&#32;opr,&#32;e1,&#32;e2,&#32;0,&#32;line);
01676 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01677 &#32;&#32;&#32;&#32;}
01678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a83d1f111c407b2a4ce3ecdf5fc588e4d">OPR_BAND</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aee42d0b535e2a8f6686dde348f113210">OPR_BOR</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aba9d6ec8db62deeab8b731a973023156">OPR_BXOR</link>:&#32;{
01679 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ad84321345dde4a0ee416c6e77aa9f79a">codebitwise</link>(fs,&#32;opr,&#32;e1,&#32;e2,&#32;line);
01680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01681 &#32;&#32;&#32;&#32;}
01682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83aea58586b669bfc9483fa17069e7f3602">OPR_SHL</link>:&#32;{
01683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a3cf85f67771eb8781afdc02625d389c1">isSCint</link>(e1))&#32;{
01684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a5cb5734345361c95cee8e08306f36821">swapexps</link>(e1,&#32;e2);
01685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a94ae37fabbb4863d4d782b58a7335106">codebini</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ab0da05be7645df562d8968b4f254df2b">OP_SHLI</link>,&#32;e1,&#32;e2,&#32;1,&#32;line,&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1ac0c09418341a5d115650a2cb4a6724a1">TM_SHL</link>);&#32;&#32;<emphasis role="comment">/*&#32;I&#32;&lt;&lt;&#32;r2&#32;*/</emphasis>
01686 &#32;&#32;&#32;&#32;&#32;&#32;}
01687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a143564608b873128e8af05828f8c3e36">finishbinexpneg</link>(fs,&#32;e1,&#32;e2,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a9159011638ef566ddb323918488443e8">OP_SHRI</link>,&#32;line,&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1ac0c09418341a5d115650a2cb4a6724a1">TM_SHL</link>))&#32;{
01688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;coded&#32;as&#32;(r1&#32;&gt;&gt;&#32;-I)&#32;*/</emphasis>;
01689 &#32;&#32;&#32;&#32;&#32;&#32;}
01690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;regular&#32;case&#32;(two&#32;registers)&#32;*/</emphasis>
01691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af18af1f6b975aea02c8c7be45a80d0c7">codebinexpval</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a845012132d1f5f2d1cd125326476c25b">OP_SHL</link>,&#32;e1,&#32;e2,&#32;line);
01692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01693 &#32;&#32;&#32;&#32;}
01694 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a53468a69eae492aec03a799f02754411">OPR_SHR</link>:&#32;{
01695 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lcode_8c_1a3cf85f67771eb8781afdc02625d389c1">isSCint</link>(e2))
01696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a94ae37fabbb4863d4d782b58a7335106">codebini</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a9159011638ef566ddb323918488443e8">OP_SHRI</link>,&#32;e1,&#32;e2,&#32;0,&#32;line,&#32;<link linkend="_ltm_8h_1a69e345ae253d250b61a03f1d6871c8d1a893cb9ea636210f2e65dbf0bf784121b">TM_SHR</link>);&#32;&#32;<emphasis role="comment">/*&#32;r1&#32;&gt;&gt;&#32;I&#32;*/</emphasis>
01697 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;<emphasis role="comment">/*&#32;regular&#32;case&#32;(two&#32;registers)&#32;*/</emphasis>
01698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1af18af1f6b975aea02c8c7be45a80d0c7">codebinexpval</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a789f5e2846cb039c0273aff134011fd4">OP_SHR</link>,&#32;e1,&#32;e2,&#32;line);
01699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01700 &#32;&#32;&#32;&#32;}
01701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1c53aacbc69d7058b240be92b134a7eb">OPR_EQ</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1f56f30f2368c0f93c9aeeea7e72ac55">OPR_NE</link>:&#32;{
01702 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ae4fe1997f80682df6f176c52bd3d3898">codeeq</link>(fs,&#32;opr,&#32;e1,&#32;e2);
01703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01704 &#32;&#32;&#32;&#32;}
01705 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a15e3bd67027d90471048ea39abfd32fa">OPR_LT</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a96f2a6272233d80a19b4f4482cf121a5">OPR_LE</link>:&#32;{
01706 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>,&#32;(opr&#32;-&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1c53aacbc69d7058b240be92b134a7eb">OPR_EQ</link>)&#32;+&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a1634898deb6e4d1bcb15416034c641c5">OP_EQ</link>);
01707 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1add743403f3f3e4f3478075841a65db0d">codeorder</link>(fs,&#32;op,&#32;e1,&#32;e2);
01708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01709 &#32;&#32;&#32;&#32;}
01710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a3c68b5b6ad04299cc50ef1c4611441b0">OPR_GT</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a5a35f1c08acd1e14156d32e04d8b9806">OPR_GE</link>:&#32;{
01711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&apos;(a&#32;&gt;&#32;b)&apos;&#32;&lt;=&gt;&#32;&apos;(b&#32;&lt;&#32;a)&apos;;&#32;&#32;&apos;(a&#32;&gt;=&#32;b)&apos;&#32;&lt;=&gt;&#32;&apos;(b&#32;&lt;=&#32;a)&apos;&#32;*/</emphasis>
01712 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;op&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>,&#32;(opr&#32;-&#32;<link linkend="_lcode_8h_1ae9a305c1104efedfc54af8d08b942c83a1f56f30f2368c0f93c9aeeea7e72ac55">OPR_NE</link>)&#32;+&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a1634898deb6e4d1bcb15416034c641c5">OP_EQ</link>);
01713 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a5cb5734345361c95cee8e08306f36821">swapexps</link>(e1,&#32;e2);
01714 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1add743403f3f3e4f3478075841a65db0d">codeorder</link>(fs,&#32;op,&#32;e1,&#32;e2);
01715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01716 &#32;&#32;&#32;&#32;}
01717 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(0);
01718 &#32;&#32;}
01719 }
01720 
01721 
01722 <emphasis role="comment">/*</emphasis>
01723 <emphasis role="comment">**&#32;Change&#32;line&#32;information&#32;associated&#32;with&#32;current&#32;position,&#32;by&#32;removing</emphasis>
01724 <emphasis role="comment">**&#32;previous&#32;info&#32;and&#32;adding&#32;it&#32;again&#32;with&#32;new&#32;line.</emphasis>
01725 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01726"/><link linkend="_lcode_8h_1a87c903709e739068e361dd59788a486f">01726</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1ab17c57ffa1dc5c51f0d67a4ae8a5f073">luaK_fixline</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)&#32;{
01727 &#32;&#32;<link linkend="_lcode_8c_1a2d0840aab23ac3d53ba8821ad4eb1b8f">removelastlineinfo</link>(fs);
01728 &#32;&#32;<link linkend="_lcode_8c_1acd1138478ae0364e0d3eaace189d2614">savelineinfo</link>(fs,&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>,&#32;line);
01729 }
01730 
01731 
<anchor xml:id="_lcode_8c_source_1l01732"/><link linkend="_lcode_8h_1a661f2e8d150a8878e016813a1616d7f0">01732</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1aa59fc2dadbee774d0cdf1196d047d7e1">luaK_settablesize</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ra,&#32;<emphasis role="keywordtype">int</emphasis>&#32;asize,&#32;<emphasis role="keywordtype">int</emphasis>&#32;hsize)&#32;{
01733 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*inst&#32;=&#32;&amp;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[pc];
01734 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rb&#32;=&#32;(hsize&#32;!=&#32;0)&#32;?&#32;<link linkend="_lobject_8c_1a731a3a2f9db35aaddeadf8cb19d507bd">luaO_ceillog2</link>(hsize)&#32;+&#32;1&#32;:&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;hash&#32;size&#32;*/</emphasis>
01735 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;extra&#32;=&#32;asize&#32;/&#32;(<link linkend="_lopcodes_8h_1a15a7daf14e4640990519e4e7f627900f">MAXARG_C</link>&#32;+&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;higher&#32;bits&#32;of&#32;array&#32;size&#32;*/</emphasis>
01736 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rc&#32;=&#32;asize&#32;%&#32;(<link linkend="_lopcodes_8h_1a15a7daf14e4640990519e4e7f627900f">MAXARG_C</link>&#32;+&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;lower&#32;bits&#32;of&#32;array&#32;size&#32;*/</emphasis>
01737 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k&#32;=&#32;(extra&#32;&gt;&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;true&#32;iff&#32;needs&#32;extra&#32;argument&#32;*/</emphasis>
01738 &#32;&#32;*inst&#32;=&#32;<link linkend="_lopcodes_8h_1a9cb59013204285f8d899c8f3d88d2707">CREATE_ABCk</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7af4ae9eb9a3c88596112a1d99d0c66280">OP_NEWTABLE</link>,&#32;ra,&#32;rb,&#32;rc,&#32;k);
01739 &#32;&#32;*(inst&#32;+&#32;1)&#32;=&#32;<link linkend="_lopcodes_8h_1ae08e838d4e7f9c8ed9b23a6a52d1b819">CREATE_Ax</link>(<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ae7a29a9b5e1490453da04cba95b39bea">OP_EXTRAARG</link>,&#32;extra);
01740 }
01741 
01742 
01743 <emphasis role="comment">/*</emphasis>
01744 <emphasis role="comment">**&#32;Emit&#32;a&#32;SETLIST&#32;instruction.</emphasis>
01745 <emphasis role="comment">**&#32;&apos;base&apos;&#32;is&#32;register&#32;that&#32;keeps&#32;table;</emphasis>
01746 <emphasis role="comment">**&#32;&apos;nelems&apos;&#32;is&#32;#table&#32;plus&#32;those&#32;to&#32;be&#32;stored&#32;now;</emphasis>
01747 <emphasis role="comment">**&#32;&apos;tostore&apos;&#32;is&#32;number&#32;of&#32;values&#32;(in&#32;registers&#32;&apos;base&#32;+&#32;1&apos;,...)&#32;to&#32;add&#32;to</emphasis>
01748 <emphasis role="comment">**&#32;table&#32;(or&#32;LUA_MULTRET&#32;to&#32;add&#32;up&#32;to&#32;stack&#32;top).</emphasis>
01749 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01750"/><link linkend="_lcode_8h_1a88808415ff9297023fb19b4e84a19033">01750</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1adf5e140580f1f4ca545b7cfd471e3166">luaK_setlist</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;base,&#32;<emphasis role="keywordtype">int</emphasis>&#32;nelems,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tostore)&#32;{
01751 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(tostore&#32;!=&#32;0&#32;&amp;&amp;&#32;tostore&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1a0888e2bcb54f6e603f09208763aadfe9">LFIELDS_PER_FLUSH</link>);
01752 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tostore&#32;==&#32;<link linkend="_lua_8h_1ace3545adc11664c2f2b152fbe8b6283c">LUA_MULTRET</link>)
01753 &#32;&#32;&#32;&#32;tostore&#32;=&#32;0;
01754 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nelems&#32;&lt;=&#32;<link linkend="_lopcodes_8h_1a15a7daf14e4640990519e4e7f627900f">MAXARG_C</link>)
01755 &#32;&#32;&#32;&#32;<link linkend="_lcode_8h_1a0d132d461ad7cb7bd041724d97cd7a39">luaK_codeABC</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a01618d8295953fd4ab2ef721b2051718">OP_SETLIST</link>,&#32;base,&#32;tostore,&#32;nelems);
01756 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01757 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;extra&#32;=&#32;nelems&#32;/&#32;(<link linkend="_lopcodes_8h_1a15a7daf14e4640990519e4e7f627900f">MAXARG_C</link>&#32;+&#32;1);
01758 &#32;&#32;&#32;&#32;nelems&#32;%=&#32;(<link linkend="_lopcodes_8h_1a15a7daf14e4640990519e4e7f627900f">MAXARG_C</link>&#32;+&#32;1);
01759 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a7f8d052466e2665575f464a55f90a509">luaK_codeABCk</link>(fs,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a01618d8295953fd4ab2ef721b2051718">OP_SETLIST</link>,&#32;base,&#32;tostore,&#32;nelems,&#32;1);
01760 &#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1ab4119f5c8d10ac76a119cf70bb25c5b9">codeextraarg</link>(fs,&#32;extra);
01761 &#32;&#32;}
01762 &#32;&#32;fs-&gt;<link linkend="_struct_func_state_1aee21b6e59a521ace2ee8ce491c912e07">freereg</link>&#32;=&#32;base&#32;+&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;free&#32;registers&#32;with&#32;list&#32;values&#32;*/</emphasis>
01763 }
01764 
01765 
01766 <emphasis role="comment">/*</emphasis>
01767 <emphasis role="comment">**&#32;return&#32;the&#32;final&#32;target&#32;of&#32;a&#32;jump&#32;(skipping&#32;jumps&#32;to&#32;jumps)</emphasis>
01768 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01769"/><link linkend="_lcode_8c_1ada56905cd28223efbcc6568614d477cd">01769</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lcode_8c_1ada56905cd28223efbcc6568614d477cd">finaltarget</link>&#32;(<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*code,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{
01770 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count;
01771 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(count&#32;=&#32;0;&#32;count&#32;&lt;&#32;100;&#32;count++)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;avoid&#32;infinite&#32;loops&#32;*/</emphasis>
01772 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;pc&#32;=&#32;code[i];
01773 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(pc)&#32;!=&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7afd679fab86e6a91d22c91734e287639b">OP_JMP</link>)
01774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01775 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;+=&#32;<link linkend="_lopcodes_8h_1a1e69b8e862462ab13df4acd8de7ef54c">GETARG_sJ</link>(pc)&#32;+&#32;1;
01777 &#32;&#32;}
01778 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
01779 }
01780 
01781 
01782 <emphasis role="comment">/*</emphasis>
01783 <emphasis role="comment">**&#32;Do&#32;a&#32;final&#32;pass&#32;over&#32;the&#32;code&#32;of&#32;a&#32;function,&#32;doing&#32;small&#32;peephole</emphasis>
01784 <emphasis role="comment">**&#32;optimizations&#32;and&#32;adjustments.</emphasis>
01785 <emphasis role="comment">*/</emphasis>
<anchor xml:id="_lcode_8c_source_1l01786"/><link linkend="_lcode_8h_1a04b29cadb9bd98c501fa20e416d2ae5b">01786</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lcode_8c_1aae9456e48d7a5b94358d310b80b1589f">luaK_finish</link>&#32;(<link linkend="_struct_func_state">FuncState</link>&#32;*fs)&#32;{
01787 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
01788 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*p&#32;=&#32;fs-&gt;<link linkend="_struct_func_state_1a4d218be569dacc9bcb058a02109fbce4">f</link>;
01789 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;fs-&gt;<link linkend="_struct_func_state_1ac8c81e61335635fa4709d82412b31f06">pc</link>;&#32;i++)&#32;{
01790 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;*pc&#32;=&#32;&amp;p-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[i];
01791 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(i&#32;==&#32;0&#32;||&#32;<link linkend="_lopcodes_8h_1a9b8f96d6711b2f4fa021c770c9edffdb">isOT</link>(*(pc&#32;-&#32;1))&#32;==&#32;<link linkend="_lopcodes_8h_1ad8d4fbc03d23ff580e821c7fb6f07e3a">isIT</link>(*pc));
01792 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(*pc))&#32;{
01793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ae3f8033d220b543563720de9ab788e82">OP_RETURN0</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7a85801949afc11b7d95553fd0ee912f38">OP_RETURN1</link>:&#32;{
01794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(fs-&gt;<link linkend="_struct_func_state_1a1fa4457f711fca24bdfdcc9fc9abb308">needclose</link>&#32;||&#32;p-&gt;<link linkend="_struct_proto_1a75232df840e02cfa8134903745579657">is_vararg</link>))
01795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;extra&#32;work&#32;*/</emphasis>
01796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;else&#32;use&#32;OP_RETURN&#32;to&#32;do&#32;the&#32;extra&#32;work&#32;*/</emphasis>
01797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a9ae2b84a40beacf053969ff426aae06f">SET_OPCODE</link>(*pc,&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ad436c18b194473f5ec64c28b774e41b3">OP_RETURN</link>);
01798 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">/*&#32;FALLTHROUGH&#32;*/</emphasis>
01799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7ad436c18b194473f5ec64c28b774e41b3">OP_RETURN</link>:&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7aff2c07ebfd82aa22cc247e9855a16069">OP_TAILCALL</link>:&#32;{
01800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs-&gt;<link linkend="_struct_func_state_1a1fa4457f711fca24bdfdcc9fc9abb308">needclose</link>)
01801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1ac3ce38dc1556d678ef023b240c97fde8">SETARG_k</link>(*pc,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;signal&#32;that&#32;it&#32;needs&#32;to&#32;close&#32;*/</emphasis>
01802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p-&gt;<link linkend="_struct_proto_1a75232df840e02cfa8134903745579657">is_vararg</link>)
01803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a085f9af93bc2386ddb0b9fb53d5ff0b8">SETARG_C</link>(*pc,&#32;p-&gt;<link linkend="_struct_proto_1a2c5c3bfc47c6c4b7b9f4eef47d7167e9">numparams</link>&#32;+&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;signal&#32;that&#32;it&#32;is&#32;vararg&#32;*/</emphasis>
01804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01805 &#32;&#32;&#32;&#32;&#32;&#32;}
01806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7afd679fab86e6a91d22c91734e287639b">OP_JMP</link>:&#32;{
01807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;target&#32;=&#32;<link linkend="_lcode_8c_1ada56905cd28223efbcc6568614d477cd">finaltarget</link>(p-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>,&#32;i);
01808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lcode_8c_1a90b203d73d5f6e3ffb85079e746b028d">fixjump</link>(fs,&#32;i,&#32;target);
01809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01810 &#32;&#32;&#32;&#32;&#32;&#32;}
01811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
01812 &#32;&#32;&#32;&#32;}
01813 &#32;&#32;}
01814 }
</programlisting></section>
