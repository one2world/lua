.TH "D:/gitworkspace/lua/src/lauxlib.h" 3 "2020年 九月 8日 星期二" "Lua_Docmention" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/gitworkspace/lua/src/lauxlib.h
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include 'lua\&.h'\fP
.br

.SS "结构体"

.in +1c
.ti -1c
.RI "struct \fBluaL_Reg\fP"
.br
.ti -1c
.RI "struct \fBluaL_Buffer\fP"
.br
.ti -1c
.RI "struct \fBluaL_Stream\fP"
.br
.in -1c
.SS "宏定义"

.in +1c
.ti -1c
.RI "#define \fBLUA_GNAME\fP   '_G'"
.br
.ti -1c
.RI "#define \fBLUA_ERRFILE\fP   (\fBLUA_ERRERR\fP+1)"
.br
.ti -1c
.RI "#define \fBLUA_LOADED_TABLE\fP   '_LOADED'"
.br
.ti -1c
.RI "#define \fBLUA_PRELOAD_TABLE\fP   '_PRELOAD'"
.br
.ti -1c
.RI "#define \fBLUAL_NUMSIZES\fP   (sizeof(\fBlua_Integer\fP)*16 + sizeof(\fBlua_Number\fP))"
.br
.ti -1c
.RI "#define \fBluaL_checkversion\fP(L)   	  \fBluaL_checkversion_\fP(L, \fBLUA_VERSION_NUM\fP, \fBLUAL_NUMSIZES\fP)"
.br
.ti -1c
.RI "#define \fBLUA_NOREF\fP   (\-2)"
.br
.ti -1c
.RI "#define \fBLUA_REFNIL\fP   (\-1)"
.br
.ti -1c
.RI "#define \fBluaL_loadfile\fP(L,  f)   \fBluaL_loadfilex\fP(L,f,NULL)"
.br
.ti -1c
.RI "#define \fBluaL_newlibtable\fP(L,  l)     \fBlua_createtable\fP(L, 0, sizeof(l)/sizeof((l)[0]) \- 1)"
.br
.ti -1c
.RI "#define \fBluaL_newlib\fP(L,  l)     (\fBluaL_checkversion\fP(L), \fBluaL_newlibtable\fP(L,l), \fBluaL_setfuncs\fP(L,l,0))"
.br
.ti -1c
.RI "#define \fBluaL_argcheck\fP(L,  \fBcond\fP,  arg,  extramsg)   		((void)((\fBcond\fP) || \fBluaL_argerror\fP(L, (arg), (extramsg))))"
.br
.ti -1c
.RI "#define \fBluaL_argexpected\fP(L,  \fBcond\fP,  arg,  tname)   		((void)((\fBcond\fP) || \fBluaL_typeerror\fP(L, (arg), (tname))))"
.br
.ti -1c
.RI "#define \fBluaL_checkstring\fP(L,  n)   (\fBluaL_checklstring\fP(L, (n), NULL))"
.br
.ti -1c
.RI "#define \fBluaL_optstring\fP(L,  n,  d)   (\fBluaL_optlstring\fP(L, (n), (d), NULL))"
.br
.ti -1c
.RI "#define \fBluaL_typename\fP(L,  i)   \fBlua_typename\fP(L, \fBlua_type\fP(L,(i)))"
.br
.ti -1c
.RI "#define \fBluaL_dofile\fP(L,  fn)   	(\fBluaL_loadfile\fP(L, fn) || \fBlua_pcall\fP(L, 0, \fBLUA_MULTRET\fP, 0))"
.br
.ti -1c
.RI "#define \fBluaL_dostring\fP(L,  s)   	(\fBluaL_loadstring\fP(L, s) || \fBlua_pcall\fP(L, 0, \fBLUA_MULTRET\fP, 0))"
.br
.ti -1c
.RI "#define \fBluaL_getmetatable\fP(L,  n)   (\fBlua_getfield\fP(L, \fBLUA_REGISTRYINDEX\fP, (n)))"
.br
.ti -1c
.RI "#define \fBluaL_opt\fP(L,  f,  n,  d)   (\fBlua_isnoneornil\fP(L,(n)) ? (d) : f(L,(n)))"
.br
.ti -1c
.RI "#define \fBluaL_loadbuffer\fP(L,  s,  sz,  n)   \fBluaL_loadbufferx\fP(L,s,sz,n,NULL)"
.br
.ti -1c
.RI "#define \fBluaL_pushfail\fP(L)   \fBlua_pushnil\fP(L)"
.br
.ti -1c
.RI "#define \fBluaL_bufflen\fP(bf)   ((bf)\->n)"
.br
.ti -1c
.RI "#define \fBluaL_buffaddr\fP(bf)   ((bf)\->b)"
.br
.ti -1c
.RI "#define \fBluaL_addchar\fP(B,  c)"
.br
.ti -1c
.RI "#define \fBluaL_addsize\fP(B,  s)   ((B)\->n += (s))"
.br
.ti -1c
.RI "#define \fBluaL_buffsub\fP(B,  s)   ((B)\->n \-= (s))"
.br
.ti -1c
.RI "#define \fBluaL_prepbuffer\fP(B)   \fBluaL_prepbuffsize\fP(B, \fBLUAL_BUFFERSIZE\fP)"
.br
.ti -1c
.RI "#define \fBLUA_FILEHANDLE\fP   'FILE*'"
.br
.ti -1c
.RI "#define \fBlua_writestring\fP(s,  l)   fwrite((s), sizeof(char), (l), stdout)"
.br
.ti -1c
.RI "#define \fBlua_writeline\fP()   (\fBlua_writestring\fP('\\n', 1), fflush(stdout))"
.br
.ti -1c
.RI "#define \fBlua_writestringerror\fP(s,  p)           (fprintf(stderr, (s), (p)), fflush(stderr))"
.br
.in -1c
.SS "类型定义"

.in +1c
.ti -1c
.RI "typedef struct \fBluaL_Buffer\fP \fBluaL_Buffer\fP"
.br
.ti -1c
.RI "typedef struct \fBluaL_Reg\fP \fBluaL_Reg\fP"
.br
.ti -1c
.RI "typedef struct \fBluaL_Stream\fP \fBluaL_Stream\fP"
.br
.in -1c
.SS "函数"

.in +1c
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_checkversion_\fP (\fBlua_State\fP *L, \fBlua_Number\fP ver, size_t sz)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_getmetafield\fP (\fBlua_State\fP *L, int obj, const char *e)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_callmeta\fP (\fBlua_State\fP *L, int obj, const char *e)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP const char *() \fBluaL_tolstring\fP (\fBlua_State\fP *L, int idx, size_t *len)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_argerror\fP (\fBlua_State\fP *L, int arg, const char *extramsg)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_typeerror\fP (\fBlua_State\fP *L, int arg, const char *tname)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP const char *() \fBluaL_checklstring\fP (\fBlua_State\fP *L, int arg, size_t *l)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP const char *() \fBluaL_optlstring\fP (\fBlua_State\fP *L, int arg, const char *def, size_t *l)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP \fBlua_Number\fP() \fBluaL_checknumber\fP (\fBlua_State\fP *L, int arg)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP \fBlua_Number\fP() \fBluaL_optnumber\fP (\fBlua_State\fP *L, int arg, \fBlua_Number\fP def)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP \fBlua_Integer\fP() \fBluaL_checkinteger\fP (\fBlua_State\fP *L, int arg)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP \fBlua_Integer\fP() \fBluaL_optinteger\fP (\fBlua_State\fP *L, int arg, \fBlua_Integer\fP def)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_checkstack\fP (\fBlua_State\fP *L, int sz, const char *msg)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_checktype\fP (\fBlua_State\fP *L, int arg, int t)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_checkany\fP (\fBlua_State\fP *L, int arg)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_newmetatable\fP (\fBlua_State\fP *L, const char *tname)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_setmetatable\fP (\fBlua_State\fP *L, const char *tname)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void *() \fBluaL_testudata\fP (\fBlua_State\fP *L, int ud, const char *tname)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void *() \fBluaL_checkudata\fP (\fBlua_State\fP *L, int ud, const char *tname)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_where\fP (\fBlua_State\fP *L, int lvl)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_error\fP (\fBlua_State\fP *L, const char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_checkoption\fP (\fBlua_State\fP *L, int arg, const char *def, const char *const lst[])"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_fileresult\fP (\fBlua_State\fP *L, int stat, const char *fname)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_execresult\fP (\fBlua_State\fP *L, int stat)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_ref\fP (\fBlua_State\fP *L, int t)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_unref\fP (\fBlua_State\fP *L, int t, int ref)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_loadfilex\fP (\fBlua_State\fP *L, const char *filename, const char *mode)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_loadbufferx\fP (\fBlua_State\fP *L, const char *buff, size_t sz, const char *name, const char *mode)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_loadstring\fP (\fBlua_State\fP *L, const char *s)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP \fBlua_State\fP *() \fBluaL_newstate\fP (void)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP \fBlua_Integer\fP() \fBluaL_len\fP (\fBlua_State\fP *L, int idx)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void \fBluaL_addgsub\fP (\fBluaL_Buffer\fP *b, const char *s, const char *p, const char *r)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP const char *() \fBluaL_gsub\fP (\fBlua_State\fP *L, const char *s, const char *p, const char *r)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_setfuncs\fP (\fBlua_State\fP *L, const \fBluaL_Reg\fP *l, int nup)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP int() \fBluaL_getsubtable\fP (\fBlua_State\fP *L, int idx, const char *fname)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_traceback\fP (\fBlua_State\fP *L, \fBlua_State\fP *L1, const char *msg, int level)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_requiref\fP (\fBlua_State\fP *L, const char *modname, \fBlua_CFunction\fP openf, int glb)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_buffinit\fP (\fBlua_State\fP *L, \fBluaL_Buffer\fP *B)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP char *() \fBluaL_prepbuffsize\fP (\fBluaL_Buffer\fP *B, size_t sz)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_addlstring\fP (\fBluaL_Buffer\fP *B, const char *s, size_t l)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_addstring\fP (\fBluaL_Buffer\fP *B, const char *s)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_addvalue\fP (\fBluaL_Buffer\fP *B)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_pushresult\fP (\fBluaL_Buffer\fP *B)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP void() \fBluaL_pushresultsize\fP (\fBluaL_Buffer\fP *B, size_t sz)"
.br
.ti -1c
.RI "\fBLUALIB_API\fP char *() \fBluaL_buffinitsize\fP (\fBlua_State\fP *L, \fBluaL_Buffer\fP *B, size_t sz)"
.br
.in -1c
.SH "宏定义说明"
.PP 
.SS "#define LUA_ERRFILE   (\fBLUA_ERRERR\fP+1)"

.PP
在文件 lauxlib\&.h 第 26 行定义\&.
.SS "#define LUA_FILEHANDLE   'FILE*'"

.PP
在文件 lauxlib\&.h 第 217 行定义\&.
.SS "#define LUA_GNAME   '_G'"

.PP
在文件 lauxlib\&.h 第 19 行定义\&.
.SS "#define LUA_LOADED_TABLE   '_LOADED'"

.PP
在文件 lauxlib\&.h 第 30 行定义\&.
.SS "#define LUA_NOREF   (\-2)"

.PP
在文件 lauxlib\&.h 第 85 行定义\&.
.SS "#define LUA_PRELOAD_TABLE   '_PRELOAD'"

.PP
在文件 lauxlib\&.h 第 34 行定义\&.
.SS "#define LUA_REFNIL   (\-1)"

.PP
在文件 lauxlib\&.h 第 86 行定义\&.
.SS "#define lua_writeline()   (\fBlua_writestring\fP('\\n', 1), fflush(stdout))"

.PP
在文件 lauxlib\&.h 第 240 行定义\&.
.SS "#define lua_writestring(s, l)   fwrite((s), sizeof(char), (l), stdout)"

.PP
在文件 lauxlib\&.h 第 235 行定义\&.
.SS "#define lua_writestringerror(s, p)           (fprintf(stderr, (s), (p)), fflush(stderr))"

.PP
在文件 lauxlib\&.h 第 245 行定义\&.
.SS "#define luaL_addchar(B, c)"
\fB值:\fP
.PP
.nf
  ((void)((B)->n < (B)->size || luaL_prepbuffsize((B), 1)), \
   ((B)->b[(B)->n++] = (c)))
.fi
.PP
在文件 lauxlib\&.h 第 182 行定义\&.
.SS "#define luaL_addsize(B, s)   ((B)\->n += (s))"

.PP
在文件 lauxlib\&.h 第 186 行定义\&.
.SS "#define luaL_argcheck(L, \fBcond\fP, arg, extramsg)   		((void)((\fBcond\fP) || \fBluaL_argerror\fP(L, (arg), (extramsg))))"

.PP
在文件 lauxlib\&.h 第 132 行定义\&.
.SS "#define luaL_argexpected(L, \fBcond\fP, arg, tname)   		((void)((\fBcond\fP) || \fBluaL_typeerror\fP(L, (arg), (tname))))"

.PP
在文件 lauxlib\&.h 第 135 行定义\&.
.SS "#define luaL_buffaddr(bf)   ((bf)\->b)"

.PP
在文件 lauxlib\&.h 第 179 行定义\&.
.SS "#define luaL_bufflen(bf)   ((bf)\->n)"

.PP
在文件 lauxlib\&.h 第 178 行定义\&.
.SS "#define luaL_buffsub(B, s)   ((B)\->n \-= (s))"

.PP
在文件 lauxlib\&.h 第 188 行定义\&.
.SS "#define luaL_checkstring(L, n)   (\fBluaL_checklstring\fP(L, (n), NULL))"

.PP
在文件 lauxlib\&.h 第 138 行定义\&.
.SS "#define luaL_checkversion(L)   	  \fBluaL_checkversion_\fP(L, \fBLUA_VERSION_NUM\fP, \fBLUAL_NUMSIZES\fP)"

.PP
在文件 lauxlib\&.h 第 46 行定义\&.
.SS "#define luaL_dofile(L, fn)   	(\fBluaL_loadfile\fP(L, fn) || \fBlua_pcall\fP(L, 0, \fBLUA_MULTRET\fP, 0))"

.PP
在文件 lauxlib\&.h 第 143 行定义\&.
.SS "#define luaL_dostring(L, s)   	(\fBluaL_loadstring\fP(L, s) || \fBlua_pcall\fP(L, 0, \fBLUA_MULTRET\fP, 0))"

.PP
在文件 lauxlib\&.h 第 146 行定义\&.
.SS "#define luaL_getmetatable(L, n)   (\fBlua_getfield\fP(L, \fBLUA_REGISTRYINDEX\fP, (n)))"

.PP
在文件 lauxlib\&.h 第 149 行定义\&.
.SS "#define luaL_loadbuffer(L, s, sz, n)   \fBluaL_loadbufferx\fP(L,s,sz,n,NULL)"

.PP
在文件 lauxlib\&.h 第 153 行定义\&.
.SS "#define luaL_loadfile(L, f)   \fBluaL_loadfilex\fP(L,f,NULL)"

.PP
在文件 lauxlib\&.h 第 94 行定义\&.
.SS "#define luaL_newlib(L, l)     (\fBluaL_checkversion\fP(L), \fBluaL_newlibtable\fP(L,l), \fBluaL_setfuncs\fP(L,l,0))"

.PP
在文件 lauxlib\&.h 第 129 行定义\&.
.SS "#define luaL_newlibtable(L, l)     \fBlua_createtable\fP(L, 0, sizeof(l)/sizeof((l)[0]) \- 1)"

.PP
在文件 lauxlib\&.h 第 126 行定义\&.
.SS "#define LUAL_NUMSIZES   (sizeof(\fBlua_Integer\fP)*16 + sizeof(\fBlua_Number\fP))"

.PP
在文件 lauxlib\&.h 第 43 行定义\&.
.SS "#define luaL_opt(L, f, n, d)   (\fBlua_isnoneornil\fP(L,(n)) ? (d) : f(L,(n)))"

.PP
在文件 lauxlib\&.h 第 151 行定义\&.
.SS "#define luaL_optstring(L, n, d)   (\fBluaL_optlstring\fP(L, (n), (d), NULL))"

.PP
在文件 lauxlib\&.h 第 139 行定义\&.
.SS "#define luaL_prepbuffer(B)   \fBluaL_prepbuffsize\fP(B, \fBLUAL_BUFFERSIZE\fP)"

.PP
在文件 lauxlib\&.h 第 199 行定义\&.
.SS "#define luaL_pushfail(L)   \fBlua_pushnil\fP(L)"

.PP
在文件 lauxlib\&.h 第 157 行定义\&.
.SS "#define luaL_typename(L, i)   \fBlua_typename\fP(L, \fBlua_type\fP(L,(i)))"

.PP
在文件 lauxlib\&.h 第 141 行定义\&.
.SH "类型定义说明"
.PP 
.SS "typedef struct \fBluaL_Buffer\fP \fBluaL_Buffer\fP"

.PP
在文件 lauxlib\&.h 第 1 行定义\&.
.SS "typedef struct \fBluaL_Reg\fP \fBluaL_Reg\fP"

.SS "typedef struct \fBluaL_Stream\fP \fBluaL_Stream\fP"

.SH "函数说明"
.PP 
.SS "\fBLUALIB_API\fP void luaL_addgsub (\fBluaL_Buffer\fP * b, const char * s, const char * p, const char * r)"

.PP
在文件 lauxlib\&.c 第 963 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_addlstring (\fBluaL_Buffer\fP * B, const char * s, size_t l)"

.PP
在文件 lauxlib\&.c 第 568 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_addstring (\fBluaL_Buffer\fP * B, const char * s)"

.PP
在文件 lauxlib\&.c 第 577 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_addvalue (\fBluaL_Buffer\fP * B)"

.PP
在文件 lauxlib\&.c 第 607 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_argerror (\fBlua_State\fP * L, int arg, const char * extramsg)"

.PP
在文件 lauxlib\&.c 第 175 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_buffinit (\fBlua_State\fP * L, \fBluaL_Buffer\fP * B)"

.PP
在文件 lauxlib\&.c 第 618 行定义\&.
.SS "\fBLUALIB_API\fP char*() luaL_buffinitsize (\fBlua_State\fP * L, \fBluaL_Buffer\fP * B, size_t sz)"

.PP
在文件 lauxlib\&.c 第 626 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_callmeta (\fBlua_State\fP * L, int obj, const char * e)"

.PP
在文件 lauxlib\&.c 第 837 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_checkany (\fBlua_State\fP * L, int arg)"

.PP
在文件 lauxlib\&.c 第 396 行定义\&.
.SS "\fBLUALIB_API\fP \fBlua_Integer\fP() luaL_checkinteger (\fBlua_State\fP * L, int arg)"

.PP
在文件 lauxlib\&.c 第 442 行定义\&.
.SS "\fBLUALIB_API\fP const char*() luaL_checklstring (\fBlua_State\fP * L, int arg, size_t * l)"

.PP
在文件 lauxlib\&.c 第 402 行定义\&.
.SS "\fBLUALIB_API\fP \fBlua_Number\fP() luaL_checknumber (\fBlua_State\fP * L, int arg)"

.PP
在文件 lauxlib\&.c 第 420 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_checkoption (\fBlua_State\fP * L, int arg, const char * def, const char *const lst[])"

.PP
在文件 lauxlib\&.c 第 360 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_checkstack (\fBlua_State\fP * L, int sz, const char * msg)"

.PP
在文件 lauxlib\&.c 第 380 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_checktype (\fBlua_State\fP * L, int arg, int t)"

.PP
在文件 lauxlib\&.c 第 390 行定义\&.
.SS "\fBLUALIB_API\fP void*() luaL_checkudata (\fBlua_State\fP * L, int ud, const char * tname)"

.PP
在文件 lauxlib\&.c 第 345 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_checkversion_ (\fBlua_State\fP * L, \fBlua_Number\fP ver, size_t sz)"

.PP
在文件 lauxlib\&.c 第 1049 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_error (\fBlua_State\fP * L, const char * fmt,  \&.\&.\&.)"

.PP
在文件 lauxlib\&.c 第 234 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_execresult (\fBlua_State\fP * L, int stat)"

.PP
在文件 lauxlib\&.c 第 285 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_fileresult (\fBlua_State\fP * L, int stat, const char * fname)"

.PP
在文件 lauxlib\&.c 第 245 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_getmetafield (\fBlua_State\fP * L, int obj, const char * e)"

.PP
在文件 lauxlib\&.c 第 821 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_getsubtable (\fBlua_State\fP * L, int idx, const char * fname)"

.PP
在文件 lauxlib\&.c 第 923 行定义\&.
.SS "\fBLUALIB_API\fP const char*() luaL_gsub (\fBlua_State\fP * L, const char * s, const char * p, const char * r)"

.PP
在文件 lauxlib\&.c 第 976 行定义\&.
.SS "\fBLUALIB_API\fP \fBlua_Integer\fP() luaL_len (\fBlua_State\fP * L, int idx)"

.PP
在文件 lauxlib\&.c 第 847 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_loadbufferx (\fBlua_State\fP * L, const char * buff, size_t sz, const char * name, const char * mode)"

.PP
在文件 lauxlib\&.c 第 804 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_loadfilex (\fBlua_State\fP * L, const char * filename, const char * mode)"

.PP
在文件 lauxlib\&.c 第 752 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_loadstring (\fBlua_State\fP * L, const char * s)"

.PP
在文件 lauxlib\&.c 第 813 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_newmetatable (\fBlua_State\fP * L, const char * tname)"

.PP
在文件 lauxlib\&.c 第 311 行定义\&.
.SS "\fBLUALIB_API\fP \fBlua_State\fP*() luaL_newstate (void)"

.PP
在文件 lauxlib\&.c 第 1035 行定义\&.
.SS "\fBLUALIB_API\fP \fBlua_Integer\fP() luaL_optinteger (\fBlua_State\fP * L, int arg, \fBlua_Integer\fP def)"

.PP
在文件 lauxlib\&.c 第 452 行定义\&.
.SS "\fBLUALIB_API\fP const char*() luaL_optlstring (\fBlua_State\fP * L, int arg, const char * def, size_t * l)"

.PP
在文件 lauxlib\&.c 第 409 行定义\&.
.SS "\fBLUALIB_API\fP \fBlua_Number\fP() luaL_optnumber (\fBlua_State\fP * L, int arg, \fBlua_Number\fP def)"

.PP
在文件 lauxlib\&.c 第 429 行定义\&.
.SS "\fBLUALIB_API\fP char*() luaL_prepbuffsize (\fBluaL_Buffer\fP * B, size_t sz)"

.PP
在文件 lauxlib\&.c 第 563 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_pushresult (\fBluaL_Buffer\fP * B)"

.PP
在文件 lauxlib\&.c 第 582 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_pushresultsize (\fBluaL_Buffer\fP * B, size_t sz)"

.PP
在文件 lauxlib\&.c 第 592 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_ref (\fBlua_State\fP * L, int t)"

.PP
在文件 lauxlib\&.c 第 644 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_requiref (\fBlua_State\fP * L, const char * modname, \fBlua_CFunction\fP openf, int glb)"

.PP
在文件 lauxlib\&.c 第 943 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_setfuncs (\fBlua_State\fP * L, const \fBluaL_Reg\fP * l, int nup)"

.PP
在文件 lauxlib\&.c 第 902 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_setmetatable (\fBlua_State\fP * L, const char * tname)"

.PP
在文件 lauxlib\&.c 第 324 行定义\&.
.SS "\fBLUALIB_API\fP void*() luaL_testudata (\fBlua_State\fP * L, int ud, const char * tname)"

.PP
在文件 lauxlib\&.c 第 330 行定义\&.
.SS "\fBLUALIB_API\fP const char*() luaL_tolstring (\fBlua_State\fP * L, int idx, size_t * len)"

.PP
在文件 lauxlib\&.c 第 859 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_traceback (\fBlua_State\fP * L, \fBlua_State\fP * L1, const char * msg, int level)"

.PP
在文件 lauxlib\&.c 第 131 行定义\&.
.SS "\fBLUALIB_API\fP int() luaL_typeerror (\fBlua_State\fP * L, int arg, const char * tname)"

.PP
在文件 lauxlib\&.c 第 193 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_unref (\fBlua_State\fP * L, int t, int ref)"

.PP
在文件 lauxlib\&.c 第 665 行定义\&.
.SS "\fBLUALIB_API\fP void() luaL_where (\fBlua_State\fP * L, int lvl)"

.PP
在文件 lauxlib\&.c 第 216 行定义\&.
.SH "作者"
.PP 
由 Doyxgen 通过分析 Lua_Docmention 的 源代码自动生成\&.
