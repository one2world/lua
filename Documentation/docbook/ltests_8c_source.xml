<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_ltests_8c_source" xml:lang="zh">
<title>D:/gitworkspace/lua/ltests.c</title>
<programlisting>00001 <emphasis role="comment">/*</emphasis>
00002 <emphasis role="comment">**&#32;$Id:&#32;ltests.c&#32;$</emphasis>
00003 <emphasis role="comment">**&#32;Internal&#32;Module&#32;for&#32;Debugging&#32;of&#32;the&#32;Lua&#32;Implementation</emphasis>
00004 <emphasis role="comment">**&#32;See&#32;Copyright&#32;Notice&#32;in&#32;lua.h</emphasis>
00005 <emphasis role="comment">*/</emphasis>
00006 
<anchor xml:id="_ltests_8c_source_1l00007"/><link linkend="_ltests_8c_1ac39a541b94db326b1335180e523cb077">00007</link> <emphasis role="preprocessor">#define&#32;ltests_c</emphasis>
<anchor xml:id="_ltests_8c_source_1l00008"/><link linkend="_ltests_8c_1abf0b3947b59218777a8e928a10be205b">00008</link> <emphasis role="preprocessor">#define&#32;LUA_CORE</emphasis>
00009 
00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lprefix_8h">lprefix.h</link>&quot;</emphasis>
00011 
00012 
00013 <emphasis role="preprocessor">#include&#32;&lt;limits.h&gt;</emphasis>
00014 <emphasis role="preprocessor">#include&#32;&lt;setjmp.h&gt;</emphasis>
00015 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
00016 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
00017 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
00018 
00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lua_8h">lua.h</link>&quot;</emphasis>
00020 
00021 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lapi_8h">lapi.h</link>&quot;</emphasis>
00022 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lauxlib_8h">lauxlib.h</link>&quot;</emphasis>
00023 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lcode_8h">lcode.h</link>&quot;</emphasis>
00024 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lctype_8h">lctype.h</link>&quot;</emphasis>
00025 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ldebug_8h">ldebug.h</link>&quot;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ldo_8h">ldo.h</link>&quot;</emphasis>
00027 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lfunc_8h">lfunc.h</link>&quot;</emphasis>
00028 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lmem_8h">lmem.h</link>&quot;</emphasis>
00029 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lopcodes_8h">lopcodes.h</link>&quot;</emphasis>
00030 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lopnames_8h">lopnames.h</link>&quot;</emphasis>
00031 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lstate_8h">lstate.h</link>&quot;</emphasis>
00032 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lstring_8h">lstring.h</link>&quot;</emphasis>
00033 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ltable_8h">ltable.h</link>&quot;</emphasis>
00034 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lualib_8h">lualib.h</link>&quot;</emphasis>
00035 
00036 
00037 
00038 <emphasis role="comment">/*</emphasis>
00039 <emphasis role="comment">**&#32;The&#32;whole&#32;module&#32;only&#32;makes&#32;sense&#32;with&#32;LUA_DEBUG&#32;on</emphasis>
00040 <emphasis role="comment">*/</emphasis>
00041 <emphasis role="preprocessor">#if&#32;defined(LUA_DEBUG)</emphasis>
00042 
00043 
00044 <emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_ltests_8h_1aff7135f2cb3e0acfe05a83a41e66a53e">l_Trick</link>&#32;=&#32;0;
00045 
00046 
00047 <emphasis role="preprocessor">#define&#32;obj_at(L,k)&#32;s2v(L-&gt;ci-&gt;func&#32;+&#32;(k))</emphasis>
00048 
00049 
00050 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;runC&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*pc);
00051 
00052 
00053 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;setnameval&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;val)&#32;{
00054 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;val);
00055 &#32;&#32;<link linkend="_lapi_8c_1a3f2f542ee6728d82e51b1c302f9606df">lua_setfield</link>(L,&#32;-2,&#32;name);
00056 }
00057 
00058 
00059 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;pushobject&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_t_value">TValue</link>&#32;*o)&#32;{
00060 &#32;&#32;<link linkend="_lobject_8h_1add70d29b431f66a1dee29a0cb286de6e">setobj2s</link>(L,&#32;L-&gt;<link linkend="_structlua___state_1afeb5dbe379fc406b35fe5f8a5fcfc5d7">top</link>,&#32;o);
00061 &#32;&#32;<link linkend="_lapi_8h_1afe4a5994dd3704ec53de77f9fd121915">api_incr_top</link>(L);
00062 }
00063 
00064 
00065 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;badexit&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*fmt,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s1,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s2)&#32;{
00066 &#32;&#32;fprintf(stderr,&#32;fmt,&#32;s1);
00067 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s2)
00068 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;extra&#32;info:&#32;%s\n&quot;</emphasis>,&#32;s2);
00069 &#32;&#32;<emphasis role="comment">/*&#32;avoid&#32;assertion&#32;failures&#32;when&#32;exiting&#32;*/</emphasis>
00070 &#32;&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1a2ca2fa3965761b33d18fa7544185571a">numblocks</link>&#32;=&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1a5ec0dbf8c451bb8edbbd7f681d30dcb2">total</link>&#32;=&#32;0;
00071 &#32;&#32;exit(EXIT_FAILURE);
00072 }
00073 
00074 
00075 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;tpanic&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00076 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg&#32;=&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L,&#32;-1);
00077 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg&#32;==&#32;NULL)&#32;msg&#32;=&#32;<emphasis role="stringliteral">&quot;error&#32;object&#32;is&#32;not&#32;a&#32;string&quot;</emphasis>;
00078 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(badexit(<emphasis role="stringliteral">&quot;PANIC:&#32;unprotected&#32;error&#32;in&#32;call&#32;to&#32;Lua&#32;API&#32;(%s)\n&quot;</emphasis>,
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg,&#32;NULL),
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;do&#32;not&#32;return&#32;to&#32;Lua&#32;*/</emphasis>
00081 }
00082 
00083 
00084 <emphasis role="comment">/*</emphasis>
00085 <emphasis role="comment">**&#32;Warning&#32;function&#32;for&#32;tests.&#32;First,&#32;it&#32;concatenates&#32;all&#32;parts&#32;of</emphasis>
00086 <emphasis role="comment">**&#32;a&#32;warning&#32;in&#32;buffer&#32;&apos;buff&apos;.&#32;Then,&#32;it&#32;has&#32;three&#32;modes:</emphasis>
00087 <emphasis role="comment">**&#32;-&#32;0.normal:&#32;messages&#32;starting&#32;with&#32;&apos;#&apos;&#32;are&#32;shown&#32;on&#32;standard&#32;output;</emphasis>
00088 <emphasis role="comment">**&#32;-&#32;other&#32;messages&#32;abort&#32;the&#32;tests&#32;(they&#32;represent&#32;real&#32;warning</emphasis>
00089 <emphasis role="comment">**&#32;conditions;&#32;the&#32;standard&#32;tests&#32;should&#32;not&#32;generate&#32;these&#32;conditions</emphasis>
00090 <emphasis role="comment">**&#32;unexpectedly);</emphasis>
00091 <emphasis role="comment">**&#32;-&#32;1.allow:&#32;all&#32;messages&#32;are&#32;shown;</emphasis>
00092 <emphasis role="comment">**&#32;-&#32;2.store:&#32;all&#32;warnings&#32;go&#32;to&#32;the&#32;global&#32;&apos;_WARN&apos;;</emphasis>
00093 <emphasis role="comment">*/</emphasis>
00094 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_lauxlib_8c_1acba9e22050fdbe52eb22f5f80cb809a4">warnf</link>&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*ud,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tocont)&#32;{
00095 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_structlua___state">lua_State</link>&#32;*,&#32;ud);
00096 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;buff[200]&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;should&#32;be&#32;enough&#32;for&#32;tests...&#32;*/</emphasis>
00097 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;onoff&#32;=&#32;0;
00098 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;mode&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;start&#32;in&#32;normal&#32;mode&#32;*/</emphasis>
00099 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;lasttocont&#32;=&#32;0;
00100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!lasttocont&#32;&amp;&amp;&#32;!tocont&#32;&amp;&amp;&#32;*msg&#32;==&#32;<emphasis role="charliteral">&apos;@&apos;</emphasis>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;control&#32;message?&#32;*/</emphasis>
00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buff[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
00102 &#32;&#32;&#32;&#32;&#32;&#32;badexit(<emphasis role="stringliteral">&quot;Control&#32;warning&#32;during&#32;warning:&#32;%s\naborting...\n&quot;</emphasis>,&#32;msg,&#32;buff);
00103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(msg,&#32;<emphasis role="stringliteral">&quot;@off&quot;</emphasis>)&#32;==&#32;0)
00104 &#32;&#32;&#32;&#32;&#32;&#32;onoff&#32;=&#32;0;
00105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(msg,&#32;<emphasis role="stringliteral">&quot;@on&quot;</emphasis>)&#32;==&#32;0)
00106 &#32;&#32;&#32;&#32;&#32;&#32;onoff&#32;=&#32;1;
00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(msg,&#32;<emphasis role="stringliteral">&quot;@normal&quot;</emphasis>)&#32;==&#32;0)
00108 &#32;&#32;&#32;&#32;&#32;&#32;mode&#32;=&#32;0;
00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(msg,&#32;<emphasis role="stringliteral">&quot;@allow&quot;</emphasis>)&#32;==&#32;0)
00110 &#32;&#32;&#32;&#32;&#32;&#32;mode&#32;=&#32;1;
00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(msg,&#32;<emphasis role="stringliteral">&quot;@store&quot;</emphasis>)&#32;==&#32;0)
00112 &#32;&#32;&#32;&#32;&#32;&#32;mode&#32;=&#32;2;
00113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00114 &#32;&#32;&#32;&#32;&#32;&#32;badexit(<emphasis role="stringliteral">&quot;Invalid&#32;control&#32;warning&#32;in&#32;test&#32;mode:&#32;%s\naborting...\n&quot;</emphasis>,
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg,&#32;NULL);
00116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00117 &#32;&#32;}
00118 &#32;&#32;lasttocont&#32;=&#32;tocont;
00119 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strlen(msg)&#32;&gt;=&#32;<emphasis role="keyword">sizeof</emphasis>(buff)&#32;-&#32;strlen(buff))
00120 &#32;&#32;&#32;&#32;badexit(<emphasis role="stringliteral">&quot;warnf-buffer&#32;overflow&#32;(%s)\n&quot;</emphasis>,&#32;msg,&#32;buff);
00121 &#32;&#32;strcat(buff,&#32;msg);&#32;&#32;<emphasis role="comment">/*&#32;add&#32;new&#32;message&#32;to&#32;current&#32;warning&#32;*/</emphasis>
00122 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tocont)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;message&#32;finished?&#32;*/</emphasis>
00123 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a1781f2a7d9161848a246d475a9171875">lua_unlock</link>(L);
00124 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a8185a9c46d5930205f95beee4991e9f0">lua_getglobal</link>(L,&#32;<emphasis role="stringliteral">&quot;_WARN&quot;</emphasis>);
00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lapi_8c_1a444aee9aa56b0b06175ee3c7bcf7927c">lua_toboolean</link>(L,&#32;-1))
00126 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;ok,&#32;no&#32;previous&#32;unexpected&#32;warning&#32;*/</emphasis>
00127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00128 &#32;&#32;&#32;&#32;&#32;&#32;badexit(<emphasis role="stringliteral">&quot;Unhandled&#32;warning&#32;in&#32;store&#32;mode:&#32;%s\naborting...\n&quot;</emphasis>,
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L,&#32;-1),&#32;buff);
00130 &#32;&#32;&#32;&#32;}
00131 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aa68a48b9104aeadf4842c25c12a9b8c9">lua_lock</link>(L);
00132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(mode)&#32;{
00133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;normal&#32;*/</emphasis>
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buff[0]&#32;!=&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>&#32;&amp;&amp;&#32;onoff)&#32;&#32;<emphasis role="comment">/*&#32;unexpected&#32;warning?&#32;*/</emphasis>
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;badexit(<emphasis role="stringliteral">&quot;Unexpected&#32;warning&#32;in&#32;test&#32;mode:&#32;%s\naborting...\n&quot;</emphasis>,
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buff,&#32;NULL);
00137 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">/*&#32;FALLTHROUGH&#32;*/</emphasis>
00138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;allow&#32;*/</emphasis>
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(onoff)
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Lua&#32;warning:&#32;%s\n&quot;</emphasis>,&#32;buff);&#32;&#32;<emphasis role="comment">/*&#32;print&#32;warning&#32;*/</emphasis>
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00142 &#32;&#32;&#32;&#32;&#32;&#32;}
00143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:&#32;{&#32;&#32;<emphasis role="comment">/*&#32;store&#32;*/</emphasis>
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a1781f2a7d9161848a246d475a9171875">lua_unlock</link>(L);
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;buff);
00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1aecf388efaede9d97581335998dfa243b">lua_setglobal</link>(L,&#32;<emphasis role="stringliteral">&quot;_WARN&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;assign&#32;message&#32;to&#32;global&#32;&apos;_WARN&apos;&#32;*/</emphasis>
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aa68a48b9104aeadf4842c25c12a9b8c9">lua_lock</link>(L);
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00149 &#32;&#32;&#32;&#32;&#32;&#32;}
00150 &#32;&#32;&#32;&#32;}
00151 &#32;&#32;&#32;&#32;buff[0]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;prepare&#32;buffer&#32;for&#32;next&#32;warning&#32;*/</emphasis>
00152 &#32;&#32;}
00153 }
00154 
00155 
00156 <emphasis role="comment">/*</emphasis>
00157 <emphasis role="comment">**&#32;{======================================================================</emphasis>
00158 <emphasis role="comment">**&#32;Controlled&#32;version&#32;for&#32;realloc.</emphasis>
00159 <emphasis role="comment">**&#32;=======================================================================</emphasis>
00160 <emphasis role="comment">*/</emphasis>
00161 
00162 <emphasis role="preprocessor">#define&#32;MARK&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x55&#32;&#32;</emphasis><emphasis role="comment">/*&#32;01010101&#32;(a&#32;nice&#32;pattern)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
00163 
00164 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">union&#32;</emphasis><link linkend="_struct_header">Header</link>&#32;{
00165 &#32;&#32;<link linkend="_luaconf_8h_1a07ff709daaaf9cee410310059ef7bc75">LUAI_MAXALIGN</link>;
00166 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
00167 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size;
00168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;type;
00169 &#32;&#32;}&#32;d;
00170 }&#32;<link linkend="_lstrlib_8c_1aa8c0271842d616f53f294da8891f6485">Header</link>;
00171 
00172 
00173 <emphasis role="preprocessor">#if&#32;!defined(EXTERNMEMCHECK)</emphasis>
00174 
00175 <emphasis role="comment">/*&#32;full&#32;memory&#32;check&#32;*/</emphasis>
00176 <emphasis role="preprocessor">#define&#32;MARKSIZE&#32;&#32;&#32;&#32;16&#32;&#32;</emphasis><emphasis role="comment">/*&#32;size&#32;of&#32;marks&#32;after&#32;each&#32;block&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
00177 <emphasis role="preprocessor">#define&#32;fillmem(mem,size)&#32;&#32;&#32;memset(mem,&#32;-MARK,&#32;size)</emphasis>
00178 
00179 <emphasis role="preprocessor">#else</emphasis>
00180 
00181 <emphasis role="comment">/*&#32;external&#32;memory&#32;check:&#32;don&apos;t&#32;do&#32;it&#32;twice&#32;*/</emphasis>
00182 <emphasis role="preprocessor">#define&#32;MARKSIZE&#32;&#32;&#32;&#32;0</emphasis>
00183 <emphasis role="preprocessor">#define&#32;fillmem(mem,size)&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;empty&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
00184 
00185 <emphasis role="preprocessor">#endif</emphasis>
00186 
00187 
00188 <link linkend="_struct_memcontrol">Memcontrol</link>&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>&#32;=
00189 &#32;&#32;{0,&#32;0UL,&#32;0UL,&#32;0UL,&#32;0UL,&#32;(~0UL),
00190 &#32;&#32;&#32;{0UL,&#32;0UL,&#32;0UL,&#32;0UL,&#32;0UL,&#32;0UL,&#32;0UL,&#32;0UL,&#32;0UL}};
00191 
00192 
00193 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;freeblock&#32;(<link linkend="_struct_memcontrol">Memcontrol</link>&#32;*mc,&#32;<link linkend="_struct_header">Header</link>&#32;*<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>)&#32;{
00194 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>)&#32;{
00195 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size&#32;=&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>-&gt;d.size;
00196 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;MARKSIZE;&#32;i++)&#32;&#32;<emphasis role="comment">/*&#32;check&#32;marks&#32;after&#32;block&#32;*/</emphasis>
00198 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(*(<link linkend="_llimits_8h_1a1d905979f8c901b7143b43ee98341206">cast_charp</link>(<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>&#32;+&#32;1)&#32;+&#32;size&#32;+&#32;i)&#32;==&#32;MARK);
00199 &#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a0c97806b982f365f414fa4f4c6953954">objcount</link>[<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>-&gt;d.type]--;
00200 &#32;&#32;&#32;&#32;fillmem(<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_header">Header</link>)&#32;+&#32;size&#32;+&#32;MARKSIZE);&#32;&#32;<emphasis role="comment">/*&#32;erase&#32;block&#32;*/</emphasis>
00201 &#32;&#32;&#32;&#32;free(<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>);&#32;&#32;<emphasis role="comment">/*&#32;actually&#32;free&#32;block&#32;*/</emphasis>
00202 &#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a2ca2fa3965761b33d18fa7544185571a">numblocks</link>--;&#32;&#32;<emphasis role="comment">/*&#32;update&#32;counts&#32;*/</emphasis>
00203 &#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a5ec0dbf8c451bb8edbbd7f681d30dcb2">total</link>&#32;-=&#32;size;
00204 &#32;&#32;}
00205 }
00206 
00207 
00208 <emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_ltests_8h_1a841f1ad3aefdf611dc771b4786868f59">debug_realloc</link>&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*ud,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;oldsize,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;{
00209 &#32;&#32;<link linkend="_struct_memcontrol">Memcontrol</link>&#32;*mc&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_struct_memcontrol">Memcontrol</link>&#32;*,&#32;ud);
00210 &#32;&#32;<link linkend="_struct_header">Header</link>&#32;*<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_struct_header">Header</link>&#32;*,&#32;b);
00211 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;type;
00212 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mc-&gt;<link linkend="_struct_memcontrol_1a68b43055ef53e887be706c87c2a074f2">memlimit</link>&#32;==&#32;0)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;first&#32;time?&#32;*/</emphasis>
00213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*limit&#32;=&#32;getenv(<emphasis role="stringliteral">&quot;MEMLIMIT&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;initialize&#32;memory&#32;limit&#32;*/</emphasis>
00214 &#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a68b43055ef53e887be706c87c2a074f2">memlimit</link>&#32;=&#32;limit&#32;?&#32;strtoul(limit,&#32;NULL,&#32;10)&#32;:&#32;ULONG_MAX;
00215 &#32;&#32;}
00216 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>&#32;==&#32;NULL)&#32;{
00217 &#32;&#32;&#32;&#32;type&#32;=&#32;(oldsize&#32;&lt;&#32;<link linkend="_lua_8h_1abf59b4e3180540d3ee3b10da19d02ee7">LUA_NUMTAGS</link>)&#32;?&#32;oldsize&#32;:&#32;0;
00218 &#32;&#32;&#32;&#32;oldsize&#32;=&#32;0;
00219 &#32;&#32;}
00220 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00221 &#32;&#32;&#32;&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>--;&#32;&#32;<emphasis role="comment">/*&#32;go&#32;to&#32;real&#32;header&#32;*/</emphasis>
00222 &#32;&#32;&#32;&#32;type&#32;=&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>-&gt;d.type;
00223 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(oldsize&#32;==&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>-&gt;d.size);
00224 &#32;&#32;}
00225 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;0)&#32;{
00226 &#32;&#32;&#32;&#32;freeblock(mc,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>);
00227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
00228 &#32;&#32;}
00229 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mc-&gt;<link linkend="_struct_memcontrol_1af70a9a9d50ffca4c21e26eedf8b2f02f">failnext</link>)&#32;{
00230 &#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1af70a9a9d50ffca4c21e26eedf8b2f02f">failnext</link>&#32;=&#32;0;
00231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;fake&#32;a&#32;single&#32;memory&#32;allocation&#32;error&#32;*/</emphasis>
00232 &#32;&#32;}
00233 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mc-&gt;<link linkend="_struct_memcontrol_1aae4b19108acbff1e89dde7f29364596e">countlimit</link>&#32;!=&#32;~0UL&#32;&amp;&amp;&#32;size&#32;!=&#32;oldsize)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;count&#32;limit&#32;in&#32;use?&#32;*/</emphasis>
00234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mc-&gt;<link linkend="_struct_memcontrol_1aae4b19108acbff1e89dde7f29364596e">countlimit</link>&#32;==&#32;0)
00235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;fake&#32;a&#32;memory&#32;allocation&#32;error&#32;*/</emphasis>
00236 &#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1aae4b19108acbff1e89dde7f29364596e">countlimit</link>--;
00237 &#32;&#32;}
00238 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&gt;&#32;oldsize&#32;&amp;&amp;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a5ec0dbf8c451bb8edbbd7f681d30dcb2">total</link>+size-oldsize&#32;&gt;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a68b43055ef53e887be706c87c2a074f2">memlimit</link>)
00239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;fake&#32;a&#32;memory&#32;allocation&#32;error&#32;*/</emphasis>
00240 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00241 &#32;&#32;&#32;&#32;<link linkend="_struct_header">Header</link>&#32;*newblock;
00242 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00243 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;commonsize&#32;=&#32;(oldsize&#32;&lt;&#32;size)&#32;?&#32;oldsize&#32;:&#32;size;
00244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;realsize&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_lstrlib_8c_1aa8c0271842d616f53f294da8891f6485">Header</link>)&#32;+&#32;size&#32;+&#32;MARKSIZE;
00245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(realsize&#32;&lt;&#32;size)&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;arithmetic&#32;overflow!&#32;*/</emphasis>
00246 &#32;&#32;&#32;&#32;newblock&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_struct_header">Header</link>&#32;*,&#32;malloc(realsize));&#32;&#32;<emphasis role="comment">/*&#32;alloc&#32;a&#32;new&#32;block&#32;*/</emphasis>
00247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newblock&#32;==&#32;NULL)
00248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;really&#32;out&#32;of&#32;memory?&#32;*/</emphasis>
00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>)&#32;{
00250 &#32;&#32;&#32;&#32;&#32;&#32;memcpy(newblock&#32;+&#32;1,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>&#32;+&#32;1,&#32;commonsize);&#32;&#32;<emphasis role="comment">/*&#32;copy&#32;old&#32;contents&#32;*/</emphasis>
00251 &#32;&#32;&#32;&#32;&#32;&#32;freeblock(mc,&#32;<link linkend="_lparser_8c_1a235428bed4c6be6cb6d2760cd0fa9d34">block</link>);&#32;&#32;<emphasis role="comment">/*&#32;erase&#32;(and&#32;check)&#32;old&#32;copy&#32;*/</emphasis>
00252 &#32;&#32;&#32;&#32;}
00253 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;initialize&#32;new&#32;part&#32;of&#32;the&#32;block&#32;with&#32;something&#32;weird&#32;*/</emphasis>
00254 &#32;&#32;&#32;&#32;fillmem(<link linkend="_llimits_8h_1a1d905979f8c901b7143b43ee98341206">cast_charp</link>(newblock&#32;+&#32;1)&#32;+&#32;commonsize,&#32;size&#32;-&#32;commonsize);
00255 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;initialize&#32;marks&#32;after&#32;block&#32;*/</emphasis>
00256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;MARKSIZE;&#32;i++)
00257 &#32;&#32;&#32;&#32;&#32;&#32;*(<link linkend="_llimits_8h_1a1d905979f8c901b7143b43ee98341206">cast_charp</link>(newblock&#32;+&#32;1)&#32;+&#32;size&#32;+&#32;i)&#32;=&#32;MARK;
00258 &#32;&#32;&#32;&#32;newblock-&gt;d.size&#32;=&#32;size;
00259 &#32;&#32;&#32;&#32;newblock-&gt;d.type&#32;=&#32;type;
00260 &#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a5ec0dbf8c451bb8edbbd7f681d30dcb2">total</link>&#32;+=&#32;size;
00261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mc-&gt;<link linkend="_struct_memcontrol_1a5ec0dbf8c451bb8edbbd7f681d30dcb2">total</link>&#32;&gt;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a25d4c1dec161580cacc04932061c41c7">maxmem</link>)
00262 &#32;&#32;&#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a25d4c1dec161580cacc04932061c41c7">maxmem</link>&#32;=&#32;mc-&gt;<link linkend="_struct_memcontrol_1a5ec0dbf8c451bb8edbbd7f681d30dcb2">total</link>;
00263 &#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a2ca2fa3965761b33d18fa7544185571a">numblocks</link>++;
00264 &#32;&#32;&#32;&#32;mc-&gt;<link linkend="_struct_memcontrol_1a0c97806b982f365f414fa4f4c6953954">objcount</link>[type]++;
00265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newblock&#32;+&#32;1;
00266 &#32;&#32;}
00267 }
00268 
00269 
00270 <emphasis role="comment">/*&#32;}======================================================================&#32;*/</emphasis>
00271 
00272 
00273 
00274 <emphasis role="comment">/*</emphasis>
00275 <emphasis role="comment">**&#32;{======================================================</emphasis>
00276 <emphasis role="comment">**&#32;Functions&#32;to&#32;check&#32;memory&#32;consistency</emphasis>
00277 <emphasis role="comment">**&#32;=======================================================</emphasis>
00278 <emphasis role="comment">*/</emphasis>
00279 
00280 
00281 <emphasis role="comment">/*</emphasis>
00282 <emphasis role="comment">**&#32;Check&#32;GC&#32;invariants.&#32;For&#32;incremental&#32;mode,&#32;a&#32;black&#32;object&#32;cannot</emphasis>
00283 <emphasis role="comment">**&#32;point&#32;to&#32;a&#32;white&#32;one.&#32;For&#32;generational&#32;mode,&#32;really&#32;old&#32;objects</emphasis>
00284 <emphasis role="comment">**&#32;cannot&#32;point&#32;to&#32;young&#32;objects.&#32;Both&#32;old1&#32;and&#32;touched2&#32;objects</emphasis>
00285 <emphasis role="comment">**&#32;cannot&#32;point&#32;to&#32;new&#32;objects&#32;(but&#32;can&#32;point&#32;to&#32;survivals).</emphasis>
00286 <emphasis role="comment">**&#32;(Threads&#32;and&#32;open&#32;upvalues,&#32;despite&#32;being&#32;marked&#32;&quot;really&#32;old&quot;,</emphasis>
00287 <emphasis role="comment">**&#32;continue&#32;to&#32;be&#32;visited&#32;in&#32;all&#32;collections,&#32;and&#32;therefore&#32;can&#32;point&#32;to</emphasis>
00288 <emphasis role="comment">**&#32;new&#32;objects.&#32;They,&#32;and&#32;only&#32;they,&#32;are&#32;old&#32;but&#32;gray.)</emphasis>
00289 <emphasis role="comment">*/</emphasis>
00290 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;testobjref1&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*f,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*t)&#32;{
00291 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lgc_8h_1acc409eb45f598d23d8388fc9e96189ea">isdead</link>(g,t))&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00292 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lgc_8h_1a860db734bc919435aba75c30e4fe261b">issweepphase</link>(g))
00293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;invariants&#32;*/</emphasis>
00294 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(g-&gt;<link linkend="_structglobal___state_1a603b7a85bbaf95ecc2ac48bf08ffe0e6">gckind</link>&#32;==&#32;<link linkend="_lstate_8h_1a52c54e51ee8ad2218ac72b745afc2f7d">KGC_INC</link>)
00295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(<link linkend="_lgc_8h_1ac1e4847ad9a91e4cea36520dc9078365">isblack</link>(f)&#32;&amp;&amp;&#32;<link linkend="_lgc_8h_1a4c0ce78d476460d2e54914301f4a4bf7">iswhite</link>(t));&#32;&#32;<emphasis role="comment">/*&#32;basic&#32;incremental&#32;invariant&#32;*/</emphasis>
00296 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;generational&#32;mode&#32;*/</emphasis>
00297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(f)&#32;==&#32;<link linkend="_lgc_8h_1a96372e9b92aa939f300e0477ba112716">G_OLD</link>&#32;&amp;&amp;&#32;<link linkend="_lgc_8h_1ac1e4847ad9a91e4cea36520dc9078365">isblack</link>(f))&#32;&amp;&amp;&#32;!<link linkend="_lgc_8h_1a24d47e523ecf2d6e475a34913ce06b05">isold</link>(t))
00298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(((<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(f)&#32;==&#32;<link linkend="_lgc_8h_1a266a8ec4a8dbacf8d7b99dca3adcac90">G_OLD1</link>&#32;||&#32;<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(f)&#32;==&#32;<link linkend="_lgc_8h_1ac2b8a2255c79c9f43f88d1625767e1bf">G_TOUCHED2</link>)&#32;&amp;&amp;&#32;<link linkend="_lgc_8h_1ac1e4847ad9a91e4cea36520dc9078365">isblack</link>(f))&#32;&amp;&amp;
00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(t)&#32;==&#32;<link linkend="_lgc_8h_1a611544eedb63012098eab46a011fe618">G_NEW</link>)
00301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00303 &#32;&#32;}
00304 }
00305 
00306 
00307 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printobj&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*o)&#32;{
00308 &#32;&#32;printf(<emphasis role="stringliteral">&quot;||%s(%p)-%c%c(%02X)||&quot;</emphasis>,
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_ltm_8h_1a7e8b7062137f42da8f8478d7e48004b3">ttypename</link>(<link linkend="_lobject_8h_1a40d12e88a0d8249d226109e0d6d70dd6">novariant</link>(o-&gt;tt)),&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)o,
00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1acc409eb45f598d23d8388fc9e96189ea">isdead</link>(g,o)&#32;?&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>&#32;:&#32;<link linkend="_lgc_8h_1ac1e4847ad9a91e4cea36520dc9078365">isblack</link>(o)&#32;?&#32;<emphasis role="charliteral">&apos;b&apos;</emphasis>&#32;:&#32;<link linkend="_lgc_8h_1a4c0ce78d476460d2e54914301f4a4bf7">iswhite</link>(o)&#32;?&#32;<emphasis role="charliteral">&apos;w&apos;</emphasis>&#32;:&#32;<emphasis role="charliteral">&apos;g&apos;</emphasis>,
00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ns01oTt&quot;</emphasis>[<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(o)],&#32;o-&gt;marked);
00312 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(o-&gt;tt&#32;==&#32;<link linkend="_lobject_8h_1a794410ffd7267ef873eb05ac695b1ba6">LUA_VSHRSTR</link>&#32;||&#32;o-&gt;tt&#32;==&#32;<link linkend="_lobject_8h_1a6869fcb0a0178b6d70d431eae1683199">LUA_VLNGSTR</link>)
00313 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&apos;%s&apos;&quot;</emphasis>,&#32;<link linkend="_lobject_8h_1acb05d3ab238923581a9c629b8e11a6ac">getstr</link>(<link linkend="_lstate_8h_1af6c16f3aa27ad97ea1bcaa31e05e0b06">gco2ts</link>(o)));
00314 }
00315 
00316 
00317 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_ltests_8h_1a424e6fc1410a08d49bb66e9c3e68dd2c">lua_printobj</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*o)&#32;{
00318 &#32;&#32;printobj(<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L),&#32;o);
00319 }
00320 
00321 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;testobjref&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*f,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*t)&#32;{
00322 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r1&#32;=&#32;testobjref1(g,&#32;f,&#32;t);
00323 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!r1)&#32;{
00324 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d(%02X)&#32;-&#32;&quot;</emphasis>,&#32;g-&gt;<link linkend="_structglobal___state_1aec22885c483e649f2d65368c3507cd9a">gcstate</link>,&#32;g-&gt;<link linkend="_structglobal___state_1aba5efd49f9d630bd5e036fcd063ae6b5">currentwhite</link>);
00325 &#32;&#32;&#32;&#32;printobj(g,&#32;f);
00326 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;-&gt;&#32;&#32;&quot;</emphasis>);
00327 &#32;&#32;&#32;&#32;printobj(g,&#32;t);
00328 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00329 &#32;&#32;}
00330 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r1;
00331 }
00332 
00333 <emphasis role="preprocessor">#define&#32;checkobjref(g,f,t)&#32;&#32;\</emphasis>
00334 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;if&#32;(t)&#32;lua_longassert(testobjref(g,f,obj2gco(t)));&#32;}</emphasis>
00335 
00336 
00337 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkvalref&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*f,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_t_value">TValue</link>&#32;*t)&#32;{
00338 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lobject_8h_1aaabdb414706e6a904461e39967557185">iscollectable</link>(t)&#32;||
00339 &#32;&#32;&#32;&#32;(<link linkend="_lobject_8h_1a08f554017b8314e2dfc0dfd05b1d8167">righttt</link>(t)&#32;&amp;&amp;&#32;testobjref(g,&#32;f,&#32;<link linkend="_lobject_8h_1a05cdf6070135f10ad37e1048a730b634">gcvalue</link>(t))));
00340 }
00341 
00342 
00343 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checktable&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_table">Table</link>&#32;*h)&#32;{
00344 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00345 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;asize&#32;=&#32;<link linkend="_ltable_8c_1a8f20a204b7a78780847939086b847781">luaH_realasize</link>(h);
00346 &#32;&#32;<link linkend="_union_node">Node</link>&#32;*n,&#32;*limit&#32;=&#32;<link linkend="_ltable_8h_1a644cfa3b6d4be1782e818a8340b5f78b">gnode</link>(h,&#32;<link linkend="_lobject_8h_1a2fbf715e78eaa889ed0fb9d4514e736a">sizenode</link>(h));
00347 &#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*hgc&#32;=&#32;<link linkend="_lstate_8h_1a254ca29aba03e47440082d4591a9734e">obj2gco</link>(h);
00348 &#32;&#32;checkobjref(g,&#32;hgc,&#32;h-&gt;<link linkend="_struct_table_1a7051e0d573f6be65b230b27565a1a901">metatable</link>);
00349 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;asize;&#32;i++)
00350 &#32;&#32;&#32;&#32;checkvalref(g,&#32;hgc,&#32;&amp;h-&gt;<link linkend="_struct_table_1a6ce25078468c6681674e2f56432a27b9">array</link>[i]);
00351 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;<link linkend="_ltable_8h_1a644cfa3b6d4be1782e818a8340b5f78b">gnode</link>(h,&#32;0);&#32;n&#32;&lt;&#32;limit;&#32;n++)&#32;{
00352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lobject_8h_1a5345ae49ed16dfecdfef95ec5399b000">isempty</link>(<link linkend="_ltable_8h_1acbbecd9bd8fbb72a17f6e2f5acf7113d">gval</link>(n)))&#32;{
00353 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;k;
00354 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1aa7b8fdb54ee8ce0235270f7d0b41e430">getnodekey</link>(g-&gt;<link linkend="_structglobal___state_1a90da27c9046a3da7fed43ef75957e379">mainthread</link>,&#32;&amp;k,&#32;n);
00355 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lobject_8h_1a64e2e5b8ce53a1dc7a528b13947d7ff3">keyisnil</link>(n));
00356 &#32;&#32;&#32;&#32;&#32;&#32;checkvalref(g,&#32;hgc,&#32;&amp;k);
00357 &#32;&#32;&#32;&#32;&#32;&#32;checkvalref(g,&#32;hgc,&#32;<link linkend="_ltable_8h_1acbbecd9bd8fbb72a17f6e2f5acf7113d">gval</link>(n));
00358 &#32;&#32;&#32;&#32;}
00359 &#32;&#32;}
00360 }
00361 
00362 
00363 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkudata&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_udata">Udata</link>&#32;*u)&#32;{
00364 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00365 &#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*hgc&#32;=&#32;<link linkend="_lstate_8h_1a254ca29aba03e47440082d4591a9734e">obj2gco</link>(u);
00366 &#32;&#32;checkobjref(g,&#32;hgc,&#32;u-&gt;<link linkend="_struct_udata_1a7051e0d573f6be65b230b27565a1a901">metatable</link>);
00367 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;u-&gt;<link linkend="_struct_udata_1a73b0125a5ce1394f28d43c93751a9db5">nuvalue</link>;&#32;i++)
00368 &#32;&#32;&#32;&#32;checkvalref(g,&#32;hgc,&#32;&amp;u-&gt;<link linkend="_struct_udata_1a751e2c4ac119ed2ef754f3d01ecae2b9">uv</link>[i].<link linkend="_union_u_value_1aef7fd1c15e5ef9ae255e21967603fd34">uv</link>);
00369 }
00370 
00371 
00372 <emphasis role="comment">/*</emphasis>
00373 <emphasis role="comment">**&#32;All&#32;marks&#32;are&#32;conditional&#32;because&#32;a&#32;GC&#32;may&#32;happen&#32;while&#32;the</emphasis>
00374 <emphasis role="comment">**&#32;prototype&#32;is&#32;still&#32;being&#32;created</emphasis>
00375 <emphasis role="comment">*/</emphasis>
00376 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkproto&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_proto">Proto</link>&#32;*f)&#32;{
00377 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00378 &#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*fgc&#32;=&#32;<link linkend="_lstate_8h_1a254ca29aba03e47440082d4591a9734e">obj2gco</link>(f);
00379 &#32;&#32;checkobjref(g,&#32;fgc,&#32;f-&gt;<link linkend="_struct_proto_1a47b5f25d6c53f3892e43702659c6de69">source</link>);
00380 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;f-&gt;<link linkend="_struct_proto_1a207b8b69ed4d393dd3c20925febd29e4">sizek</link>;&#32;i++)&#32;{
00381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lobject_8h_1a9bdf057a0de8da2ffae3ac35662dd255">ttisstring</link>(f-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>&#32;+&#32;i))
00382 &#32;&#32;&#32;&#32;&#32;&#32;checkobjref(g,&#32;fgc,&#32;<link linkend="_lobject_8h_1a8661397faed512ccc9c70a4661f1a83d">tsvalue</link>(f-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>&#32;+&#32;i));
00383 &#32;&#32;}
00384 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;f-&gt;<link linkend="_struct_proto_1a2e13a98343ef0d1233bb3e62ae519c5f">sizeupvalues</link>;&#32;i++)
00385 &#32;&#32;&#32;&#32;checkobjref(g,&#32;fgc,&#32;f-&gt;<link linkend="_struct_proto_1ac3b891662880254a7e0a3dc0afa86254">upvalues</link>[i].<link linkend="_struct_upvaldesc_1aa249fce0e5297641aa43f45e48bb1548">name</link>);
00386 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;f-&gt;<link linkend="_struct_proto_1aea0f5dcb02517aa08aa2ffa58c396260">sizep</link>;&#32;i++)
00387 &#32;&#32;&#32;&#32;checkobjref(g,&#32;fgc,&#32;f-&gt;<link linkend="_struct_proto_1ab7af98f98f5cf674f6be5e3fc855af43">p</link>[i]);
00388 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;f-&gt;<link linkend="_struct_proto_1af9147ae18b522811714aeb19036f639d">sizelocvars</link>;&#32;i++)
00389 &#32;&#32;&#32;&#32;checkobjref(g,&#32;fgc,&#32;f-&gt;<link linkend="_struct_proto_1a7a727780b57a02cd42e7ef902f6e7f90">locvars</link>[i].<link linkend="_struct_loc_var_1ac2450e0899ac889b040f20956221cd83">varname</link>);
00390 }
00391 
00392 
00393 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkCclosure&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_c_closure">CClosure</link>&#32;*cl)&#32;{
00394 &#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*clgc&#32;=&#32;<link linkend="_lstate_8h_1a254ca29aba03e47440082d4591a9734e">obj2gco</link>(cl);
00395 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00396 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;cl-&gt;nupvalues;&#32;i++)
00397 &#32;&#32;&#32;&#32;checkvalref(g,&#32;clgc,&#32;&amp;cl-&gt;<link linkend="_struct_c_closure_1a5d6ca5386d338c19af338be60a375dd4">upvalue</link>[i]);
00398 }
00399 
00400 
00401 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkLclosure&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_l_closure">LClosure</link>&#32;*cl)&#32;{
00402 &#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*clgc&#32;=&#32;<link linkend="_lstate_8h_1a254ca29aba03e47440082d4591a9734e">obj2gco</link>(cl);
00403 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00404 &#32;&#32;checkobjref(g,&#32;clgc,&#32;cl-&gt;<link linkend="_struct_l_closure_1aed1f50b9bdc5ce4c7cfa49529472b42c">p</link>);
00405 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;cl-&gt;nupvalues;&#32;i++)&#32;{
00406 &#32;&#32;&#32;&#32;<link linkend="_struct_up_val">UpVal</link>&#32;*uv&#32;=&#32;cl-&gt;<link linkend="_struct_l_closure_1aa4734795813776a46167fe712dfd9506">upvals</link>[i];
00407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uv)&#32;{
00408 &#32;&#32;&#32;&#32;&#32;&#32;checkobjref(g,&#32;clgc,&#32;uv);
00409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lfunc_8h_1a26a8ecd7d58d326f7f6f20bc8bc8bb55">upisopen</link>(uv))
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkvalref(g,&#32;<link linkend="_lstate_8h_1a254ca29aba03e47440082d4591a9734e">obj2gco</link>(uv),&#32;uv-&gt;<link linkend="_struct_up_val_1a507ba5be7778a879769a2718d6e4afa3">v</link>);
00411 &#32;&#32;&#32;&#32;}
00412 &#32;&#32;}
00413 }
00414 
00415 
00416 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;lua_checkpc&#32;(<link linkend="_struct_call_info">CallInfo</link>&#32;*ci)&#32;{
00417 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lstate_8h_1a489eab424b094f54dd7f6b35e2cf68a2">isLua</link>(ci))&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00418 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00419 &#32;&#32;&#32;&#32;<link linkend="_union_stack_value">StkId</link>&#32;f&#32;=&#32;ci-&gt;<link linkend="_struct_call_info_1a9d82a8ad04b0dd8837e621047972260a">func</link>;
00420 &#32;&#32;&#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*p&#32;=&#32;<link linkend="_lobject_8h_1afb9e65b01574a1135c582cf28883062e">clLvalue</link>(<link linkend="_lobject_8h_1a8c21cbb67def90b23342840cd08a5cfd">s2v</link>(f))-&gt;p;
00421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>&#32;&lt;=&#32;ci-&gt;<link linkend="_struct_call_info_1af8751782b1a040b075c25cef0acb484a">u</link>.<link linkend="_struct_call_info_1a1abd0b31f495fcbdfaa1bb8ac5546d6d">l</link>.savedpc&#32;&amp;&amp;
00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ci-&gt;<link linkend="_struct_call_info_1af8751782b1a040b075c25cef0acb484a">u</link>.<link linkend="_struct_call_info_1a1abd0b31f495fcbdfaa1bb8ac5546d6d">l</link>.savedpc&#32;&lt;=&#32;p-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>&#32;+&#32;p-&gt;<link linkend="_struct_proto_1aa3cefdf204c272e3a1a3aa8bc12f4e3e">sizecode</link>;
00423 &#32;&#32;}
00424 }
00425 
00426 
00427 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_ldblib_8c_1aef541490d49259cf4cb14e7f9597600e">checkstack</link>&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1)&#32;{
00428 &#32;&#32;<link linkend="_union_stack_value">StkId</link>&#32;o;
00429 &#32;&#32;<link linkend="_struct_call_info">CallInfo</link>&#32;*ci;
00430 &#32;&#32;<link linkend="_struct_up_val">UpVal</link>&#32;*uv;
00431 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lgc_8h_1acc409eb45f598d23d8388fc9e96189ea">isdead</link>(g,&#32;L1));
00432 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(L1-&gt;<link linkend="_structlua___state_1a8d64aaa9257b553aae2e3e193c80a83f">stack</link>&#32;==&#32;NULL)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;incomplete&#32;thread?&#32;*/</emphasis>
00433 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(L1-&gt;<link linkend="_structlua___state_1a7fe5de65ffba2cb8917943b5811ae1cf">stacksize</link>&#32;==&#32;0&#32;&amp;&amp;&#32;L1-&gt;<link linkend="_structlua___state_1a762ab4537c3697fa94e74b3c0dffd297">openupval</link>&#32;==&#32;NULL&#32;&amp;&amp;
00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;L1-&gt;<link linkend="_structlua___state_1a8764223139091552413c85d3fc0bb1eb">ci</link>&#32;==&#32;NULL);
00435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00436 &#32;&#32;}
00437 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uv&#32;=&#32;L1-&gt;<link linkend="_structlua___state_1a762ab4537c3697fa94e74b3c0dffd297">openupval</link>;&#32;uv&#32;!=&#32;NULL;&#32;uv&#32;=&#32;uv-&gt;<link linkend="_struct_up_val_1ae88bb25a10ec80f8fa19750a76390923">u</link>.<link linkend="_struct_up_val_1a70efd6629df78085a967d85ee0a8e673">open</link>.next)
00438 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lfunc_8h_1a26a8ecd7d58d326f7f6f20bc8bc8bb55">upisopen</link>(uv));&#32;&#32;<emphasis role="comment">/*&#32;must&#32;be&#32;open&#32;*/</emphasis>
00439 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ci&#32;=&#32;L1-&gt;<link linkend="_structlua___state_1a8764223139091552413c85d3fc0bb1eb">ci</link>;&#32;ci&#32;!=&#32;NULL;&#32;ci&#32;=&#32;ci-&gt;<link linkend="_struct_call_info_1acd0df27f40f3c6f546e29401fecaddb4">previous</link>)&#32;{
00440 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(ci-&gt;<link linkend="_struct_call_info_1afeb5dbe379fc406b35fe5f8a5fcfc5d7">top</link>&#32;&lt;=&#32;L1-&gt;<link linkend="_structlua___state_1a21d8865731396f21a8b5bfd449c2354a">stack_last</link>);
00441 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(lua_checkpc(ci));
00442 &#32;&#32;}
00443 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(o&#32;=&#32;L1-&gt;<link linkend="_structlua___state_1a8d64aaa9257b553aae2e3e193c80a83f">stack</link>;&#32;o&#32;&lt;&#32;L1-&gt;stack_last&#32;+&#32;<link linkend="_lstate_8h_1a9e690b8e4047af306d2dd1f78a9094d7">EXTRA_STACK</link>;&#32;o++)
00444 &#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1aeec8842aa72396b2719685ad7e131f37">checkliveness</link>(L1,&#32;<link linkend="_lobject_8h_1a8c21cbb67def90b23342840cd08a5cfd">s2v</link>(o));&#32;&#32;<emphasis role="comment">/*&#32;entire&#32;stack&#32;must&#32;have&#32;valid&#32;values&#32;*/</emphasis>
00445 }
00446 
00447 
00448 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkrefs&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*o)&#32;{
00449 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(o-&gt;tt)&#32;{
00450 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1af45b44d4031e7e869195dd97759d2ca3">LUA_VUSERDATA</link>:&#32;{
00451 &#32;&#32;&#32;&#32;&#32;&#32;checkudata(g,&#32;<link linkend="_lstate_8h_1a55e9a228ad0d3a82ee9cfc353002fd8a">gco2u</link>(o));
00452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00453 &#32;&#32;&#32;&#32;}
00454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1ae982db94518ed52587579ed70d822ad5">LUA_VUPVAL</link>:&#32;{
00455 &#32;&#32;&#32;&#32;&#32;&#32;checkvalref(g,&#32;o,&#32;<link linkend="_lstate_8h_1a1633a3ec133e64956014aafd04e31cce">gco2upv</link>(o)-&gt;v);
00456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00457 &#32;&#32;&#32;&#32;}
00458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1afaf24d5b79b9027ad768d023778669df">LUA_VTABLE</link>:&#32;{
00459 &#32;&#32;&#32;&#32;&#32;&#32;checktable(g,&#32;<link linkend="_lstate_8h_1a4f233ba369144fad9fd5fc6c513da1ac">gco2t</link>(o));
00460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00461 &#32;&#32;&#32;&#32;}
00462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1ad224258ccc4e8f79f148d54d32ddbd00">LUA_VTHREAD</link>:&#32;{
00463 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_ldblib_8c_1aef541490d49259cf4cb14e7f9597600e">checkstack</link>(g,&#32;<link linkend="_lstate_8h_1a52c467e11bd40cad5ca78372f7f67b4d">gco2th</link>(o));
00464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00465 &#32;&#32;&#32;&#32;}
00466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a5d0e6e41ea93960667095501aa5745c1">LUA_VLCL</link>:&#32;{
00467 &#32;&#32;&#32;&#32;&#32;&#32;checkLclosure(g,&#32;<link linkend="_lstate_8h_1adaac0379079b200986d6ae72b65aefaf">gco2lcl</link>(o));
00468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00469 &#32;&#32;&#32;&#32;}
00470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a2361d923ddb7fc1468b978fe043e35c2">LUA_VCCL</link>:&#32;{
00471 &#32;&#32;&#32;&#32;&#32;&#32;checkCclosure(g,&#32;<link linkend="_lstate_8h_1a1dcf2ea170c68fe70adb5af7ae04c71e">gco2ccl</link>(o));
00472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00473 &#32;&#32;&#32;&#32;}
00474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a1c6c32cba3e6d0c897f68ceb273dd757">LUA_VPROTO</link>:&#32;{
00475 &#32;&#32;&#32;&#32;&#32;&#32;checkproto(g,&#32;<link linkend="_lstate_8h_1a8792af5dd4539a71f6ed8ddb31d079c3">gco2p</link>(o));
00476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00477 &#32;&#32;&#32;&#32;}
00478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a794410ffd7267ef873eb05ac695b1ba6">LUA_VSHRSTR</link>:
00479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a6869fcb0a0178b6d70d431eae1683199">LUA_VLNGSTR</link>:&#32;{
00480 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lgc_8h_1ad417e22072630b33cf74a3055b27d8d7">isgray</link>(o));&#32;&#32;<emphasis role="comment">/*&#32;strings&#32;are&#32;never&#32;gray&#32;*/</emphasis>
00481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00482 &#32;&#32;&#32;&#32;}
00483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(0);
00484 &#32;&#32;}
00485 }
00486 
00487 
00488 <emphasis role="comment">/*</emphasis>
00489 <emphasis role="comment">**&#32;Check&#32;consistency&#32;of&#32;an&#32;object:</emphasis>
00490 <emphasis role="comment">**&#32;-&#32;Dead&#32;objects&#32;can&#32;only&#32;happen&#32;in&#32;the&#32;&apos;allgc&apos;&#32;list&#32;during&#32;a&#32;sweep</emphasis>
00491 <emphasis role="comment">**&#32;phase&#32;(controlled&#32;by&#32;the&#32;caller&#32;through&#32;&apos;maybedead&apos;).</emphasis>
00492 <emphasis role="comment">**&#32;-&#32;During&#32;pause,&#32;all&#32;objects&#32;must&#32;be&#32;white.</emphasis>
00493 <emphasis role="comment">**&#32;-&#32;In&#32;generational&#32;mode:</emphasis>
00494 <emphasis role="comment">**&#32;&#32;&#32;*&#32;objects&#32;must&#32;be&#32;old&#32;enough&#32;for&#32;their&#32;lists&#32;(&apos;listage&apos;).</emphasis>
00495 <emphasis role="comment">**&#32;&#32;&#32;*&#32;old&#32;objects&#32;cannot&#32;be&#32;white.</emphasis>
00496 <emphasis role="comment">**&#32;&#32;&#32;*&#32;old&#32;objects&#32;must&#32;be&#32;black,&#32;except&#32;for&#32;&apos;touched1&apos;,&#32;&apos;old0&apos;,</emphasis>
00497 <emphasis role="comment">**&#32;threads,&#32;and&#32;open&#32;upvalues.</emphasis>
00498 <emphasis role="comment">*/</emphasis>
00499 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkobject&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*o,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maybedead,
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;listage)&#32;{
00501 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lgc_8h_1acc409eb45f598d23d8388fc9e96189ea">isdead</link>(g,&#32;o))
00502 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(maybedead);
00503 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00504 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(g-&gt;<link linkend="_structglobal___state_1aec22885c483e649f2d65368c3507cd9a">gcstate</link>&#32;!=&#32;<link linkend="_lgc_8h_1ab546d91106ec5cfdba254de13e5b5c5f">GCSpause</link>&#32;||&#32;<link linkend="_lgc_8h_1a4c0ce78d476460d2e54914301f4a4bf7">iswhite</link>(o));
00505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(g-&gt;<link linkend="_structglobal___state_1a603b7a85bbaf95ecc2ac48bf08ffe0e6">gckind</link>&#32;==&#32;<link linkend="_lstate_8h_1aa2765fe939333ebc895ba9cedbaa30a0">KGC_GEN</link>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;generational&#32;mode?&#32;*/</emphasis>
00506 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(o)&#32;&gt;=&#32;listage);
00507 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lgc_8h_1a4c0ce78d476460d2e54914301f4a4bf7">iswhite</link>(o)&#32;||&#32;!<link linkend="_lgc_8h_1a24d47e523ecf2d6e475a34913ce06b05">isold</link>(o));
00508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lgc_8h_1a24d47e523ecf2d6e475a34913ce06b05">isold</link>(o))&#32;{
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lgc_8h_1ac1e4847ad9a91e4cea36520dc9078365">isblack</link>(o)&#32;||
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(o)&#32;==&#32;<link linkend="_lgc_8h_1ae2c1796f4fb3359730723ce0acd2d162">G_TOUCHED1</link>&#32;||
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(o)&#32;==&#32;<link linkend="_lgc_8h_1a19ac124332eabcbdcb744e14923700b9">G_OLD0</link>&#32;||
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o-&gt;tt&#32;==&#32;<link linkend="_lobject_8h_1ad224258ccc4e8f79f148d54d32ddbd00">LUA_VTHREAD</link>&#32;||
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(o-&gt;tt&#32;==&#32;<link linkend="_lobject_8h_1ae982db94518ed52587579ed70d822ad5">LUA_VUPVAL</link>&#32;&amp;&amp;&#32;<link linkend="_lfunc_8h_1a26a8ecd7d58d326f7f6f20bc8bc8bb55">upisopen</link>(<link linkend="_lstate_8h_1a1633a3ec133e64956014aafd04e31cce">gco2upv</link>(o))));
00514 &#32;&#32;&#32;&#32;&#32;&#32;}
00515 &#32;&#32;&#32;&#32;}
00516 &#32;&#32;&#32;&#32;checkrefs(g,&#32;o);
00517 &#32;&#32;}
00518 }
00519 
00520 
00521 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_llimits_8h_1aac8c50ca0aa51c80523376da77c2c4d8">lu_mem</link>&#32;checkgraylist&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*o)&#32;{
00522 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;total&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;count&#32;number&#32;of&#32;elements&#32;in&#32;the&#32;list&#32;*/</emphasis>
00523 &#32;&#32;((void)g);&#32;&#32;<emphasis role="comment">/*&#32;better&#32;to&#32;keep&#32;it&#32;available&#32;if&#32;we&#32;need&#32;to&#32;print&#32;an&#32;object&#32;*/</emphasis>
00524 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(o)&#32;{
00525 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!!<link linkend="_lgc_8h_1ad417e22072630b33cf74a3055b27d8d7">isgray</link>(o)&#32;^&#32;(<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(o)&#32;==&#32;<link linkend="_lgc_8h_1ac2b8a2255c79c9f43f88d1625767e1bf">G_TOUCHED2</link>));
00526 &#32;&#32;&#32;&#32;<emphasis role="comment">//lua_assert(isgray(o)&#32;||&#32;getage(o)&#32;==&#32;G_TOUCHED2);</emphasis>
00527 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lgc_8h_1a25c19ff3161e2a2395ba69fdef49915f">testbit</link>(o-&gt;marked,&#32;<link linkend="_lgc_8h_1ab85d4eae1efa2e1a40d2f41bdbbda226">TESTBIT</link>));
00528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lgc_8h_1a40b40242e96f45f8d04dcf4feb1475ae">keepinvariant</link>(g))
00529 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1aad559b25ee580ea2894c540dc817e41f">l_setbit</link>(o-&gt;marked,&#32;<link linkend="_lgc_8h_1ab85d4eae1efa2e1a40d2f41bdbbda226">TESTBIT</link>);&#32;&#32;<emphasis role="comment">/*&#32;mark&#32;that&#32;object&#32;is&#32;in&#32;a&#32;gray&#32;list&#32;*/</emphasis>
00530 &#32;&#32;&#32;&#32;total++;
00531 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(o-&gt;tt)&#32;{
00532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1afaf24d5b79b9027ad768d023778669df">LUA_VTABLE</link>:&#32;o&#32;=&#32;<link linkend="_lstate_8h_1a4f233ba369144fad9fd5fc6c513da1ac">gco2t</link>(o)-&gt;gclist;&#32;<emphasis role="keywordflow">break</emphasis>;
00533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a5d0e6e41ea93960667095501aa5745c1">LUA_VLCL</link>:&#32;o&#32;=&#32;<link linkend="_lstate_8h_1adaac0379079b200986d6ae72b65aefaf">gco2lcl</link>(o)-&gt;gclist;&#32;<emphasis role="keywordflow">break</emphasis>;
00534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a2361d923ddb7fc1468b978fe043e35c2">LUA_VCCL</link>:&#32;o&#32;=&#32;<link linkend="_lstate_8h_1a1dcf2ea170c68fe70adb5af7ae04c71e">gco2ccl</link>(o)-&gt;gclist;&#32;<emphasis role="keywordflow">break</emphasis>;
00535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1ad224258ccc4e8f79f148d54d32ddbd00">LUA_VTHREAD</link>:&#32;o&#32;=&#32;<link linkend="_lstate_8h_1a52c467e11bd40cad5ca78372f7f67b4d">gco2th</link>(o)-&gt;gclist;&#32;<emphasis role="keywordflow">break</emphasis>;
00536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1a1c6c32cba3e6d0c897f68ceb273dd757">LUA_VPROTO</link>:&#32;o&#32;=&#32;<link linkend="_lstate_8h_1a8792af5dd4539a71f6ed8ddb31d079c3">gco2p</link>(o)-&gt;gclist;&#32;<emphasis role="keywordflow">break</emphasis>;
00537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lobject_8h_1af45b44d4031e7e869195dd97759d2ca3">LUA_VUSERDATA</link>:
00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lstate_8h_1a55e9a228ad0d3a82ee9cfc353002fd8a">gco2u</link>(o)-&gt;nuvalue&#32;&gt;&#32;0);
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;o&#32;=&#32;<link linkend="_lstate_8h_1a55e9a228ad0d3a82ee9cfc353002fd8a">gco2u</link>(o)-&gt;gclist;
00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(0);&#32;&#32;<emphasis role="comment">/*&#32;other&#32;objects&#32;cannot&#32;be&#32;in&#32;a&#32;gray&#32;list&#32;*/</emphasis>
00542 &#32;&#32;&#32;&#32;}
00543 &#32;&#32;}
00544 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;total;
00545 }
00546 
00547 
00548 <emphasis role="comment">/*</emphasis>
00549 <emphasis role="comment">**&#32;Check&#32;objects&#32;in&#32;gray&#32;lists.</emphasis>
00550 <emphasis role="comment">*/</emphasis>
00551 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_llimits_8h_1aac8c50ca0aa51c80523376da77c2c4d8">lu_mem</link>&#32;checkgrays&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g)&#32;{
00552 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;total&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;count&#32;number&#32;of&#32;elements&#32;in&#32;all&#32;lists&#32;*/</emphasis>
00553 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lgc_8h_1a40b40242e96f45f8d04dcf4feb1475ae">keepinvariant</link>(g))&#32;<emphasis role="keywordflow">return</emphasis>&#32;total;
00554 &#32;&#32;total&#32;+=&#32;checkgraylist(g,&#32;g-&gt;<link linkend="_structglobal___state_1a212d17a5d31cf9cd949ba66f16d63139">gray</link>);
00555 &#32;&#32;total&#32;+=&#32;checkgraylist(g,&#32;g-&gt;<link linkend="_structglobal___state_1af6b3198325143bc0a9a529e9b14ff29a">grayagain</link>);
00556 &#32;&#32;total&#32;+=&#32;checkgraylist(g,&#32;g-&gt;<link linkend="_structglobal___state_1a26d09b5385bf38c15ca56a9e44b5ef6d">weak</link>);
00557 &#32;&#32;total&#32;+=&#32;checkgraylist(g,&#32;g-&gt;<link linkend="_structglobal___state_1a97f9bda9b7e1f18bb0c68608e6609c89">allweak</link>);
00558 &#32;&#32;total&#32;+=&#32;checkgraylist(g,&#32;g-&gt;<link linkend="_structglobal___state_1aac8b3202114d8c99a73328fff0c3c79c">ephemeron</link>);
00559 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;total;
00560 }
00561 
00562 
00563 <emphasis role="comment">/*</emphasis>
00564 <emphasis role="comment">**&#32;Check&#32;whether&#32;&apos;o&apos;&#32;should&#32;be&#32;in&#32;a&#32;gray&#32;list.&#32;If&#32;so,&#32;increment</emphasis>
00565 <emphasis role="comment">**&#32;&apos;count&apos;&#32;and&#32;check&#32;its&#32;TESTBIT.&#32;(It&#32;must&#32;have&#32;been&#32;previously&#32;set&#32;by</emphasis>
00566 <emphasis role="comment">**&#32;&apos;checkgraylist&apos;.)</emphasis>
00567 <emphasis role="comment">*/</emphasis>
00568 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;incifingray&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*o,&#32;<link linkend="_llimits_8h_1aac8c50ca0aa51c80523376da77c2c4d8">lu_mem</link>&#32;*count)&#32;{
00569 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lgc_8h_1a40b40242e96f45f8d04dcf4feb1475ae">keepinvariant</link>(g))
00570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;gray&#32;lists&#32;not&#32;being&#32;kept&#32;in&#32;these&#32;phases&#32;*/</emphasis>
00571 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(o-&gt;tt&#32;==&#32;<link linkend="_lobject_8h_1ae982db94518ed52587579ed70d822ad5">LUA_VUPVAL</link>)&#32;{
00572 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;only&#32;open&#32;upvalues&#32;can&#32;be&#32;gray&#32;*/</emphasis>
00573 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lgc_8h_1ad417e22072630b33cf74a3055b27d8d7">isgray</link>(o)&#32;||&#32;<link linkend="_lfunc_8h_1a26a8ecd7d58d326f7f6f20bc8bc8bb55">upisopen</link>(<link linkend="_lstate_8h_1a1633a3ec133e64956014aafd04e31cce">gco2upv</link>(o)));
00574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;<emphasis role="comment">/*&#32;upvalues&#32;are&#32;never&#32;in&#32;gray&#32;lists&#32;*/</emphasis>
00575 &#32;&#32;}
00576 &#32;&#32;<emphasis role="comment">/*&#32;these&#32;are&#32;the&#32;ones&#32;that&#32;must&#32;be&#32;in&#32;gray&#32;lists&#32;*/</emphasis>
00577 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lgc_8h_1ad417e22072630b33cf74a3055b27d8d7">isgray</link>(o)&#32;||&#32;<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(o)&#32;==&#32;<link linkend="_lgc_8h_1ac2b8a2255c79c9f43f88d1625767e1bf">G_TOUCHED2</link>)&#32;{
00578 &#32;&#32;&#32;&#32;(*count)++;
00579 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lgc_8h_1a25c19ff3161e2a2395ba69fdef49915f">testbit</link>(o-&gt;marked,&#32;<link linkend="_lgc_8h_1ab85d4eae1efa2e1a40d2f41bdbbda226">TESTBIT</link>));
00580 &#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1aca0beb244185329a1b8f0e695ef47748">resetbit</link>(o-&gt;marked,&#32;<link linkend="_lgc_8h_1ab85d4eae1efa2e1a40d2f41bdbbda226">TESTBIT</link>);&#32;&#32;<emphasis role="comment">/*&#32;prepare&#32;for&#32;next&#32;cycle&#32;*/</emphasis>
00581 &#32;&#32;}
00582 }
00583 
00584 
00585 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_llimits_8h_1aac8c50ca0aa51c80523376da77c2c4d8">lu_mem</link>&#32;checklist&#32;(<link linkend="_structglobal___state">global_State</link>&#32;*g,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maybedead,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tof,
00586 &#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*newl,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*survival,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*old,&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*reallyold)&#32;{
00587 &#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*o;
00588 &#32;&#32;<link linkend="_llimits_8h_1aac8c50ca0aa51c80523376da77c2c4d8">lu_mem</link>&#32;total&#32;=&#32;0;&#32;&#32;<emphasis role="comment">/*&#32;number&#32;of&#32;object&#32;that&#32;should&#32;be&#32;in&#32;&#32;gray&#32;lists&#32;*/</emphasis>
00589 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(o&#32;=&#32;newl;&#32;o&#32;!=&#32;survival;&#32;o&#32;=&#32;o-&gt;next)&#32;{
00590 &#32;&#32;&#32;&#32;checkobject(g,&#32;o,&#32;maybedead,&#32;<link linkend="_lgc_8h_1a611544eedb63012098eab46a011fe618">G_NEW</link>);
00591 &#32;&#32;&#32;&#32;incifingray(g,&#32;o,&#32;&amp;total);
00592 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!tof&#32;==&#32;!<link linkend="_lgc_8h_1a6d17f226d57a796f7741f457400cf8bd">tofinalize</link>(o));
00593 &#32;&#32;}
00594 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(o&#32;=&#32;survival;&#32;o&#32;!=&#32;old;&#32;o&#32;=&#32;o-&gt;next)&#32;{
00595 &#32;&#32;&#32;&#32;checkobject(g,&#32;o,&#32;0,&#32;<link linkend="_lgc_8h_1aa8c9510ab591432a3b80e90519156116">G_SURVIVAL</link>);
00596 &#32;&#32;&#32;&#32;incifingray(g,&#32;o,&#32;&amp;total);
00597 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!tof&#32;==&#32;!<link linkend="_lgc_8h_1a6d17f226d57a796f7741f457400cf8bd">tofinalize</link>(o));
00598 &#32;&#32;}
00599 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(o&#32;=&#32;old;&#32;o&#32;!=&#32;reallyold;&#32;o&#32;=&#32;o-&gt;next)&#32;{
00600 &#32;&#32;&#32;&#32;checkobject(g,&#32;o,&#32;0,&#32;<link linkend="_lgc_8h_1a266a8ec4a8dbacf8d7b99dca3adcac90">G_OLD1</link>);
00601 &#32;&#32;&#32;&#32;incifingray(g,&#32;o,&#32;&amp;total);
00602 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!tof&#32;==&#32;!<link linkend="_lgc_8h_1a6d17f226d57a796f7741f457400cf8bd">tofinalize</link>(o));
00603 &#32;&#32;}
00604 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(o&#32;=&#32;reallyold;&#32;o&#32;!=&#32;NULL;&#32;o&#32;=&#32;o-&gt;next)&#32;{
00605 &#32;&#32;&#32;&#32;checkobject(g,&#32;o,&#32;0,&#32;<link linkend="_lgc_8h_1a96372e9b92aa939f300e0477ba112716">G_OLD</link>);
00606 &#32;&#32;&#32;&#32;incifingray(g,&#32;o,&#32;&amp;total);
00607 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!tof&#32;==&#32;!<link linkend="_lgc_8h_1a6d17f226d57a796f7741f457400cf8bd">tofinalize</link>(o));
00608 &#32;&#32;}
00609 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;total;
00610 }
00611 
00612 
00613 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_ltests_8h_1a749fe8c5cac80b7e60393e1a0e1934ab">lua_checkmemory</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00614 &#32;&#32;<link linkend="_structglobal___state">global_State</link>&#32;*g&#32;=&#32;<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L);
00615 &#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*o;
00616 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;maybedead;
00617 &#32;&#32;<link linkend="_llimits_8h_1aac8c50ca0aa51c80523376da77c2c4d8">lu_mem</link>&#32;totalin;&#32;&#32;<emphasis role="comment">/*&#32;total&#32;of&#32;objects&#32;that&#32;are&#32;in&#32;gray&#32;lists&#32;*/</emphasis>
00618 &#32;&#32;<link linkend="_llimits_8h_1aac8c50ca0aa51c80523376da77c2c4d8">lu_mem</link>&#32;totalshould;&#32;&#32;<emphasis role="comment">/*&#32;total&#32;of&#32;objects&#32;that&#32;should&#32;be&#32;in&#32;gray&#32;lists&#32;*/</emphasis>
00619 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lgc_8h_1a40b40242e96f45f8d04dcf4feb1475ae">keepinvariant</link>(g))&#32;{
00620 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lgc_8h_1a4c0ce78d476460d2e54914301f4a4bf7">iswhite</link>(g-&gt;<link linkend="_structglobal___state_1a90da27c9046a3da7fed43ef75957e379">mainthread</link>));
00621 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lgc_8h_1a4c0ce78d476460d2e54914301f4a4bf7">iswhite</link>(<link linkend="_lobject_8h_1a05cdf6070135f10ad37e1048a730b634">gcvalue</link>(&amp;g-&gt;<link linkend="_structglobal___state_1af2551dd930744b33fb4c2964076101fe">l_registry</link>)));
00622 &#32;&#32;}
00623 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(!<link linkend="_lgc_8h_1acc409eb45f598d23d8388fc9e96189ea">isdead</link>(g,&#32;<link linkend="_lobject_8h_1a05cdf6070135f10ad37e1048a730b634">gcvalue</link>(&amp;g-&gt;<link linkend="_structglobal___state_1af2551dd930744b33fb4c2964076101fe">l_registry</link>)));
00624 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(g-&gt;<link linkend="_structglobal___state_1a6955215dfc015c08152e21f5f225e84a">sweepgc</link>&#32;==&#32;NULL&#32;||&#32;<link linkend="_lgc_8h_1a860db734bc919435aba75c30e4fe261b">issweepphase</link>(g));
00625 &#32;&#32;totalin&#32;=&#32;checkgrays(g);
00626 
00627 &#32;&#32;<emphasis role="comment">/*&#32;check&#32;&apos;fixedgc&apos;&#32;list&#32;*/</emphasis>
00628 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(o&#32;=&#32;g-&gt;<link linkend="_structglobal___state_1aaae4d624f0c53c83a285c2dc30a26eb5">fixedgc</link>;&#32;o&#32;!=&#32;NULL;&#32;o&#32;=&#32;o-&gt;next)&#32;{
00629 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(o-&gt;tt&#32;==&#32;<link linkend="_lobject_8h_1a794410ffd7267ef873eb05ac695b1ba6">LUA_VSHRSTR</link>&#32;&amp;&amp;&#32;<link linkend="_lgc_8h_1ad417e22072630b33cf74a3055b27d8d7">isgray</link>(o)&#32;&amp;&amp;&#32;<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(o)&#32;==&#32;<link linkend="_lgc_8h_1a96372e9b92aa939f300e0477ba112716">G_OLD</link>);
00630 &#32;&#32;}
00631 
00632 &#32;&#32;<emphasis role="comment">/*&#32;check&#32;&apos;allgc&apos;&#32;list&#32;*/</emphasis>
00633 &#32;&#32;maybedead&#32;=&#32;(<link linkend="_lgc_8h_1a7c7806ab609fa3c19ed9c2b688e10730">GCSatomic</link>&#32;&lt;&#32;g-&gt;<link linkend="_structglobal___state_1aec22885c483e649f2d65368c3507cd9a">gcstate</link>&#32;&amp;&amp;&#32;g-&gt;<link linkend="_structglobal___state_1aec22885c483e649f2d65368c3507cd9a">gcstate</link>&#32;&lt;=&#32;<link linkend="_lgc_8h_1aac9b5b472434aa8d38a89b46b6b29196">GCSswpallgc</link>);
00634 &#32;&#32;totalshould&#32;=&#32;checklist(g,&#32;maybedead,&#32;0,&#32;g-&gt;<link linkend="_structglobal___state_1a3239e7c69845ec6df350dc5b6f1d5291">allgc</link>,
00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g-&gt;<link linkend="_structglobal___state_1a1162d3f249bfeebcf52bd0f70e0cc200">survival</link>,&#32;g-&gt;<link linkend="_structglobal___state_1a70eec2b8218810b4e2d880f1b9c0eedc">old1</link>,&#32;g-&gt;<link linkend="_structglobal___state_1abc84a52466de1f5c97cb7b16c88dbe95">reallyold</link>);
00636 
00637 &#32;&#32;<emphasis role="comment">/*&#32;check&#32;&apos;finobj&apos;&#32;list&#32;*/</emphasis>
00638 &#32;&#32;totalshould&#32;+=&#32;checklist(g,&#32;0,&#32;1,&#32;g-&gt;<link linkend="_structglobal___state_1a7c1118954ba5fdca801f48c9242c1a23">finobj</link>,
00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g-&gt;<link linkend="_structglobal___state_1a81edc846b7bf03a2c636df88e04d9688">finobjsur</link>,&#32;g-&gt;<link linkend="_structglobal___state_1a497482949c2da7caedb86741c6364395">finobjold1</link>,&#32;g-&gt;<link linkend="_structglobal___state_1a55ebc92b222c1b8367c3e0e8a36f4bd6">finobjrold</link>);
00640 
00641 &#32;&#32;<emphasis role="comment">/*&#32;check&#32;&apos;tobefnz&apos;&#32;list&#32;*/</emphasis>
00642 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(o&#32;=&#32;g-&gt;<link linkend="_structglobal___state_1a26a1a773fdf19f6aa0be08d5b8395c26">tobefnz</link>;&#32;o&#32;!=&#32;NULL;&#32;o&#32;=&#32;o-&gt;next)&#32;{
00643 &#32;&#32;&#32;&#32;checkobject(g,&#32;o,&#32;0,&#32;<link linkend="_lgc_8h_1a611544eedb63012098eab46a011fe618">G_NEW</link>);
00644 &#32;&#32;&#32;&#32;incifingray(g,&#32;o,&#32;&amp;totalshould);
00645 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lgc_8h_1a6d17f226d57a796f7741f457400cf8bd">tofinalize</link>(o));
00646 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(o-&gt;tt&#32;==&#32;<link linkend="_lobject_8h_1af45b44d4031e7e869195dd97759d2ca3">LUA_VUSERDATA</link>&#32;||&#32;o-&gt;tt&#32;==&#32;<link linkend="_lobject_8h_1afaf24d5b79b9027ad768d023778669df">LUA_VTABLE</link>);
00647 &#32;&#32;}
00648 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lgc_8h_1a40b40242e96f45f8d04dcf4feb1475ae">keepinvariant</link>(g))
00649 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(totalin&#32;==&#32;totalshould);
00650 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00651 }
00652 
00653 <emphasis role="comment">/*&#32;}======================================================&#32;*/</emphasis>
00654 
00655 
00656 
00657 <emphasis role="comment">/*</emphasis>
00658 <emphasis role="comment">**&#32;{======================================================</emphasis>
00659 <emphasis role="comment">**&#32;Disassembler</emphasis>
00660 <emphasis role="comment">**&#32;=======================================================</emphasis>
00661 <emphasis role="comment">*/</emphasis>
00662 
00663 
00664 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buildop&#32;(<link linkend="_struct_proto">Proto</link>&#32;*p,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buff)&#32;{
00665 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*obuff&#32;=&#32;buff;
00666 &#32;&#32;<link linkend="_llimits_8h_1aa81d2e7f7263ef29946852d4966a192e">Instruction</link>&#32;i&#32;=&#32;p-&gt;<link linkend="_struct_proto_1a744e03861a6c76b7eeef213b73419ec7">code</link>[pc];
00667 &#32;&#32;<link linkend="_lopcodes_8h_1abeb7dfb0e9e2b3114e240a405d046ea7">OpCode</link>&#32;o&#32;=&#32;<link linkend="_lopcodes_8h_1aaa146179c3677b790c5681dcd82f0acc">GET_OPCODE</link>(i);
00668 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name&#32;=&#32;<link linkend="_lopnames_8h_1ae0f2ed44920d8b32a4d1d05cae936c1e">opnames</link>[o];
00669 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line&#32;=&#32;<link linkend="_ldebug_8c_1ae7a6d2f88b11cc05758e44acd433ee2f">luaG_getfuncline</link>(p,&#32;pc);
00670 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lineinfo&#32;=&#32;(p-&gt;<link linkend="_struct_proto_1a0d5af822069e8cdb2bd7f17f3cdcf575">lineinfo</link>&#32;!=&#32;NULL)&#32;?&#32;p-&gt;<link linkend="_struct_proto_1a0d5af822069e8cdb2bd7f17f3cdcf575">lineinfo</link>[pc]&#32;:&#32;0;
00671 &#32;&#32;if&#32;(lineinfo&#32;==&#32;<link linkend="_ldebug_8h_1a62320b24b15c9fc1185526504649633f">ABSLINEINFO</link>)
00672 &#32;&#32;&#32;&#32;buff&#32;+=&#32;sprintf(buff,&#32;<emphasis role="stringliteral">&quot;(__&quot;</emphasis>);
00673 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00674 &#32;&#32;&#32;&#32;buff&#32;+=&#32;sprintf(buff,&#32;<emphasis role="stringliteral">&quot;(%2d&quot;</emphasis>,&#32;lineinfo);
00675 &#32;&#32;buff&#32;+=&#32;sprintf(buff,&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%4d)&#32;%4d&#32;-&#32;&quot;</emphasis>,&#32;line,&#32;pc);
00676 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_lopcodes_8h_1afb3fdd221fb95fdd1c254f7ab479739e">getOpMode</link>(o))&#32;{
00677 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1a56752d1aeb4bd4940e632396072d68afa5032b5bab05a3312f6236ad8a6053cf3">iABC</link>:
00678 &#32;&#32;&#32;&#32;&#32;&#32;sprintf(buff,&#32;<emphasis role="stringliteral">&quot;%-12s%4d&#32;%4d&#32;%4d%s&quot;</emphasis>,&#32;name,
00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1a1d504abc1e2246548f89977210dce0b9">GETARG_A</link>(i),&#32;<link linkend="_lopcodes_8h_1a7a343159ef7669a438c2097b839b2b13">GETARG_B</link>(i),&#32;<link linkend="_lopcodes_8h_1af96cb84f2685fda7f36d3d099dba6a44">GETARG_C</link>(i),
00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lopcodes_8h_1aa9ce1e6169ccc23a1e9c783f61af343f">GETARG_k</link>(i)&#32;?&#32;<emphasis role="stringliteral">&quot;&#32;(k)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
00681 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1a56752d1aeb4bd4940e632396072d68afae162f330f7a1e7581cdbbb4af60dc8ea">iABx</link>:
00683 &#32;&#32;&#32;&#32;&#32;&#32;sprintf(buff,&#32;<emphasis role="stringliteral">&quot;%-12s%4d&#32;%4d&quot;</emphasis>,&#32;name,&#32;<link linkend="_lopcodes_8h_1a1d504abc1e2246548f89977210dce0b9">GETARG_A</link>(i),&#32;<link linkend="_lopcodes_8h_1acf8d228275fd2789dcf5f019bbabc019">GETARG_Bx</link>(i));
00684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1a56752d1aeb4bd4940e632396072d68afa5db94456d16691b254a6b2fc7b473e55">iAsBx</link>:
00686 &#32;&#32;&#32;&#32;&#32;&#32;sprintf(buff,&#32;<emphasis role="stringliteral">&quot;%-12s%4d&#32;%4d&quot;</emphasis>,&#32;name,&#32;<link linkend="_lopcodes_8h_1a1d504abc1e2246548f89977210dce0b9">GETARG_A</link>(i),&#32;<link linkend="_lopcodes_8h_1a1f61a823709ac7847e481290a596c480">GETARG_sBx</link>(i));
00687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1a56752d1aeb4bd4940e632396072d68afa453db051897b5faf2716653c2aa5a2e2">iAx</link>:
00689 &#32;&#32;&#32;&#32;&#32;&#32;sprintf(buff,&#32;<emphasis role="stringliteral">&quot;%-12s%4d&quot;</emphasis>,&#32;name,&#32;<link linkend="_lopcodes_8h_1acfd578bba038b6682b924cf48012d80a">GETARG_Ax</link>(i));
00690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00691 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lopcodes_8h_1a56752d1aeb4bd4940e632396072d68afa8c4168189c62aed69b9160daeb20f20e">isJ</link>:
00692 &#32;&#32;&#32;&#32;&#32;&#32;sprintf(buff,&#32;<emphasis role="stringliteral">&quot;%-12s%4d&quot;</emphasis>,&#32;name,&#32;<link linkend="_lopcodes_8h_1a1e69b8e862462ab13df4acd8de7ef54c">GETARG_sJ</link>(i));
00693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00694 &#32;&#32;}
00695 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;obuff;
00696 }
00697 
00698 
00699 <emphasis role="preprocessor">#if&#32;0</emphasis>
00700 <emphasis role="keywordtype">void</emphasis>&#32;luaI_printcode&#32;(<link linkend="_struct_proto">Proto</link>&#32;*pt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;size)&#32;{
00701 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc;
00702 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pc=0;&#32;pc&lt;size;&#32;pc++)&#32;{
00703 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buff[100];
00704 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;buildop(pt,&#32;pc,&#32;buff));
00705 &#32;&#32;}
00706 &#32;&#32;printf(<emphasis role="stringliteral">&quot;-------\n&quot;</emphasis>);
00707 }
00708 
00709 
00710 <emphasis role="keywordtype">void</emphasis>&#32;luaI_printinst&#32;(<link linkend="_struct_proto">Proto</link>&#32;*pt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc)&#32;{
00711 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buff[100];
00712 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;buildop(pt,&#32;pc,&#32;buff));
00713 }
00714 <emphasis role="preprocessor">#endif</emphasis>
00715 
00716 
00717 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;listcode&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00718 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc;
00719 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*p;
00720 &#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;<link linkend="_lua_8h_1a7537af276c81906c144f29cd25b93315">lua_isfunction</link>(L,&#32;1)&#32;&amp;&amp;&#32;!<link linkend="_lapi_8c_1a3b922032c9fe2930399186a3647cc3ad">lua_iscfunction</link>(L,&#32;1),
00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;<emphasis role="stringliteral">&quot;Lua&#32;function&#32;expected&quot;</emphasis>);
00722 &#32;&#32;p&#32;=&#32;<link linkend="_lobject_8h_1a36095400a8ca3ad1e6120f507b421331">getproto</link>(obj_at(L,&#32;1));
00723 &#32;&#32;<link linkend="_lua_8h_1aa59db6b784aa1ec954599a44168c7761">lua_newtable</link>(L);
00724 &#32;&#32;setnameval(L,&#32;<emphasis role="stringliteral">&quot;maxstack&quot;</emphasis>,&#32;p-&gt;<link linkend="_struct_proto_1ad11e004e7f14af7e281b6da69d08ad7a">maxstacksize</link>);
00725 &#32;&#32;setnameval(L,&#32;<emphasis role="stringliteral">&quot;numparams&quot;</emphasis>,&#32;p-&gt;<link linkend="_struct_proto_1a2c5c3bfc47c6c4b7b9f4eef47d7167e9">numparams</link>);
00726 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pc=0;&#32;pc&lt;p-&gt;<link linkend="_struct_proto_1aa3cefdf204c272e3a1a3aa8bc12f4e3e">sizecode</link>;&#32;pc++)&#32;{
00727 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buff[100];
00728 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;pc+1);
00729 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;buildop(p,&#32;pc,&#32;buff));
00730 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a4ca492cf3d2194aec9a6292708bf66c8">lua_settable</link>(L,&#32;-3);
00731 &#32;&#32;}
00732 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00733 }
00734 
00735 
00736 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;printcode&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00737 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc;
00738 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*p;
00739 &#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;<link linkend="_lua_8h_1a7537af276c81906c144f29cd25b93315">lua_isfunction</link>(L,&#32;1)&#32;&amp;&amp;&#32;!<link linkend="_lapi_8c_1a3b922032c9fe2930399186a3647cc3ad">lua_iscfunction</link>(L,&#32;1),
00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;<emphasis role="stringliteral">&quot;Lua&#32;function&#32;expected&quot;</emphasis>);
00741 &#32;&#32;p&#32;=&#32;<link linkend="_lobject_8h_1a36095400a8ca3ad1e6120f507b421331">getproto</link>(obj_at(L,&#32;1));
00742 &#32;&#32;printf(<emphasis role="stringliteral">&quot;maxstack:&#32;%d\n&quot;</emphasis>,&#32;p-&gt;<link linkend="_struct_proto_1ad11e004e7f14af7e281b6da69d08ad7a">maxstacksize</link>);
00743 &#32;&#32;printf(<emphasis role="stringliteral">&quot;numparams:&#32;%d\n&quot;</emphasis>,&#32;p-&gt;<link linkend="_struct_proto_1a2c5c3bfc47c6c4b7b9f4eef47d7167e9">numparams</link>);
00744 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pc=0;&#32;pc&lt;p-&gt;<link linkend="_struct_proto_1aa3cefdf204c272e3a1a3aa8bc12f4e3e">sizecode</link>;&#32;pc++)&#32;{
00745 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buff[100];
00746 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;buildop(p,&#32;pc,&#32;buff));
00747 &#32;&#32;}
00748 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00749 }
00750 
00751 
00752 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;listk&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00753 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*p;
00754 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00755 &#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;<link linkend="_lua_8h_1a7537af276c81906c144f29cd25b93315">lua_isfunction</link>(L,&#32;1)&#32;&amp;&amp;&#32;!<link linkend="_lapi_8c_1a3b922032c9fe2930399186a3647cc3ad">lua_iscfunction</link>(L,&#32;1),
00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;<emphasis role="stringliteral">&quot;Lua&#32;function&#32;expected&quot;</emphasis>);
00757 &#32;&#32;p&#32;=&#32;<link linkend="_lobject_8h_1a36095400a8ca3ad1e6120f507b421331">getproto</link>(obj_at(L,&#32;1));
00758 &#32;&#32;<link linkend="_lapi_8c_1a7f93e3baf3101cad59ec61b7744a55d8">lua_createtable</link>(L,&#32;p-&gt;<link linkend="_struct_proto_1a207b8b69ed4d393dd3c20925febd29e4">sizek</link>,&#32;0);
00759 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;p-&gt;<link linkend="_struct_proto_1a207b8b69ed4d393dd3c20925febd29e4">sizek</link>;&#32;i++)&#32;{
00760 &#32;&#32;&#32;&#32;pushobject(L,&#32;p-&gt;<link linkend="_struct_proto_1a5287370e219b50fe677549b4aafdc81d">k</link>+i);
00761 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a757fd16e7e09280e2d4e4f9f77ba1099">lua_rawseti</link>(L,&#32;-2,&#32;i+1);
00762 &#32;&#32;}
00763 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00764 }
00765 
00766 
00767 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;listabslineinfo&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00768 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*p;
00769 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00770 &#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;<link linkend="_lua_8h_1a7537af276c81906c144f29cd25b93315">lua_isfunction</link>(L,&#32;1)&#32;&amp;&amp;&#32;!<link linkend="_lapi_8c_1a3b922032c9fe2930399186a3647cc3ad">lua_iscfunction</link>(L,&#32;1),
00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;<emphasis role="stringliteral">&quot;Lua&#32;function&#32;expected&quot;</emphasis>);
00772 &#32;&#32;p&#32;=&#32;<link linkend="_lobject_8h_1a36095400a8ca3ad1e6120f507b421331">getproto</link>(obj_at(L,&#32;1));
00773 &#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;p-&gt;<link linkend="_struct_proto_1a731ed18a38cc12a903582b927104c883">abslineinfo</link>&#32;!=&#32;NULL,&#32;1,&#32;<emphasis role="stringliteral">&quot;function&#32;has&#32;no&#32;debug&#32;info&quot;</emphasis>);
00774 &#32;&#32;<link linkend="_lapi_8c_1a7f93e3baf3101cad59ec61b7744a55d8">lua_createtable</link>(L,&#32;2&#32;*&#32;p-&gt;<link linkend="_struct_proto_1ab443243fa7dd09b9c08117626c3f8a61">sizeabslineinfo</link>,&#32;0);
00775 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&#32;&lt;&#32;p-&gt;<link linkend="_struct_proto_1ab443243fa7dd09b9c08117626c3f8a61">sizeabslineinfo</link>;&#32;i++)&#32;{
00776 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;p-&gt;<link linkend="_struct_proto_1a731ed18a38cc12a903582b927104c883">abslineinfo</link>[i].<link linkend="_struct_abs_line_info_1ac8c81e61335635fa4709d82412b31f06">pc</link>);
00777 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a757fd16e7e09280e2d4e4f9f77ba1099">lua_rawseti</link>(L,&#32;-2,&#32;2&#32;*&#32;i&#32;+&#32;1);
00778 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;p-&gt;<link linkend="_struct_proto_1a731ed18a38cc12a903582b927104c883">abslineinfo</link>[i].<link linkend="_struct_abs_line_info_1a41ebd28ef1d7c6ade45642cb6acc1039">line</link>);
00779 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a757fd16e7e09280e2d4e4f9f77ba1099">lua_rawseti</link>(L,&#32;-2,&#32;2&#32;*&#32;i&#32;+&#32;2);
00780 &#32;&#32;}
00781 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00782 }
00783 
00784 
00785 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;listlocals&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00786 &#32;&#32;<link linkend="_struct_proto">Proto</link>&#32;*p;
00787 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pc&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;2))&#32;-&#32;1;
00788 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
00789 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name;
00790 &#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;<link linkend="_lua_8h_1a7537af276c81906c144f29cd25b93315">lua_isfunction</link>(L,&#32;1)&#32;&amp;&amp;&#32;!<link linkend="_lapi_8c_1a3b922032c9fe2930399186a3647cc3ad">lua_iscfunction</link>(L,&#32;1),
00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;<emphasis role="stringliteral">&quot;Lua&#32;function&#32;expected&quot;</emphasis>);
00792 &#32;&#32;p&#32;=&#32;<link linkend="_lobject_8h_1a36095400a8ca3ad1e6120f507b421331">getproto</link>(obj_at(L,&#32;1));
00793 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((name&#32;=&#32;<link linkend="_lfunc_8c_1aaa3cd5bc3901e7edf1ac428151cdfe8c">luaF_getlocalname</link>(p,&#32;++i,&#32;pc))&#32;!=&#32;NULL)
00794 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;name);
00795 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i-1;
00796 }
00797 
00798 <emphasis role="comment">/*&#32;}======================================================&#32;*/</emphasis>
00799 
00800 
00801 
00802 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printstack&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00803 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00804 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L);
00805 &#32;&#32;printf(<emphasis role="stringliteral">&quot;stack:&#32;&gt;&gt;\n&quot;</emphasis>);
00806 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;n;&#32;i++)&#32;{
00807 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%3d:&#32;%s\n&quot;</emphasis>,&#32;i,&#32;<link linkend="_lauxlib_8c_1a0d4cbfd194d1919b3ff84000c0644cc0">luaL_tolstring</link>(L,&#32;i,&#32;NULL));
00808 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L,&#32;1);
00809 &#32;&#32;}
00810 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&lt;&lt;\n&quot;</emphasis>);
00811 }
00812 
00813 
00814 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;get_limits&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00815 &#32;&#32;<link linkend="_lapi_8c_1a7f93e3baf3101cad59ec61b7744a55d8">lua_createtable</link>(L,&#32;0,&#32;6);
00816 &#32;&#32;setnameval(L,&#32;<emphasis role="stringliteral">&quot;IS32INT&quot;</emphasis>,&#32;<link linkend="_luaconf_8h_1afd80ecd3fd68a9deaa257dc69ef513a4">LUAI_IS32INT</link>);
00817 &#32;&#32;setnameval(L,&#32;<emphasis role="stringliteral">&quot;MAXARG_Ax&quot;</emphasis>,&#32;<link linkend="_lopcodes_8h_1a742a1bed832225c3800b3f73eb8b20ec">MAXARG_Ax</link>);
00818 &#32;&#32;setnameval(L,&#32;<emphasis role="stringliteral">&quot;MAXARG_Bx&quot;</emphasis>,&#32;<link linkend="_lopcodes_8h_1aebbf650de6e9cbec539bfabcb9ae50c6">MAXARG_Bx</link>);
00819 &#32;&#32;setnameval(L,&#32;<emphasis role="stringliteral">&quot;OFFSET_sBx&quot;</emphasis>,&#32;<link linkend="_lopcodes_8h_1afda4d6a4b816b12ffd722e04b20f0884">OFFSET_sBx</link>);
00820 &#32;&#32;setnameval(L,&#32;<emphasis role="stringliteral">&quot;LFPF&quot;</emphasis>,&#32;<link linkend="_lopcodes_8h_1a0888e2bcb54f6e603f09208763aadfe9">LFIELDS_PER_FLUSH</link>);
00821 &#32;&#32;setnameval(L,&#32;<emphasis role="stringliteral">&quot;NUM_OPCODES&quot;</emphasis>,&#32;<link linkend="_lopcodes_8h_1a1fb469ba81540d3314cfbe37c675ba20">NUM_OPCODES</link>);
00822 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00823 }
00824 
00825 
00826 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;mem_query&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00827 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lua_8h_1ad054300429f1094d3692313abc733ddf">lua_isnone</link>(L,&#32;1))&#32;{
00828 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1a5ec0dbf8c451bb8edbbd7f681d30dcb2">total</link>);
00829 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1a2ca2fa3965761b33d18fa7544185571a">numblocks</link>);
00830 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1a25d4c1dec161580cacc04932061c41c7">maxmem</link>);
00831 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;3;
00832 &#32;&#32;}
00833 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lapi_8c_1a99451f234bf085c9c46c3d17a5aef905">lua_isnumber</link>(L,&#32;1))&#32;{
00834 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;limit&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;1));
00835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(limit&#32;==&#32;0)&#32;limit&#32;=&#32;ULONG_MAX;
00836 &#32;&#32;&#32;&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1a68b43055ef53e887be706c87c2a074f2">memlimit</link>&#32;=&#32;limit;
00837 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00838 &#32;&#32;}
00839 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00840 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*t&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;1);
00841 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;<link linkend="_lua_8h_1abf59b4e3180540d3ee3b10da19d02ee7">LUA_NUMTAGS</link>&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;i--)&#32;{
00843 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(t,&#32;<link linkend="_ltm_8h_1a7e8b7062137f42da8f8478d7e48004b3">ttypename</link>(i))&#32;==&#32;0)&#32;{
00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1a0c97806b982f365f414fa4f4c6953954">objcount</link>[i]);
00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00846 &#32;&#32;&#32;&#32;&#32;&#32;}
00847 &#32;&#32;&#32;&#32;}
00848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;unknown&#32;type&#32;&apos;%s&apos;&quot;</emphasis>,&#32;t);
00849 &#32;&#32;}
00850 }
00851 
00852 
00853 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;alloc_count&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00854 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lua_8h_1ad054300429f1094d3692313abc733ddf">lua_isnone</link>(L,&#32;1))
00855 &#32;&#32;&#32;&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1aae4b19108acbff1e89dde7f29364596e">countlimit</link>&#32;=&#32;~0L;
00856 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00857 &#32;&#32;&#32;&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1aae4b19108acbff1e89dde7f29364596e">countlimit</link>&#32;=&#32;<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;1);
00858 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00859 }
00860 
00861 
00862 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;alloc_failnext&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00863 &#32;&#32;<link linkend="_llimits_8h_1a86d500a34c624c2cae56bc25a31b12f3">UNUSED</link>(L);
00864 &#32;&#32;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1af70a9a9d50ffca4c21e26eedf8b2f02f">failnext</link>&#32;=&#32;1;
00865 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00866 }
00867 &#32;&#32;
00868 
00869 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;settrick&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00870 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lobject_8h_1a39af019fafa202841da3bf7c427bf090">ttisnil</link>(obj_at(L,&#32;1)))
00871 &#32;&#32;&#32;&#32;<link linkend="_ltests_8h_1aff7135f2cb3e0acfe05a83a41e66a53e">l_Trick</link>&#32;=&#32;NULL;
00872 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00873 &#32;&#32;&#32;&#32;<link linkend="_ltests_8h_1aff7135f2cb3e0acfe05a83a41e66a53e">l_Trick</link>&#32;=&#32;<link linkend="_lobject_8h_1a05cdf6070135f10ad37e1048a730b634">gcvalue</link>(obj_at(L,&#32;1));
00874 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00875 }
00876 
00877 
00878 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;gc_color&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00879 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;*o;
00880 &#32;&#32;<link linkend="_lauxlib_8c_1a8ebfe706b773eaaf50283e6583d4642e">luaL_checkany</link>(L,&#32;1);
00881 &#32;&#32;o&#32;=&#32;obj_at(L,&#32;1);
00882 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lobject_8h_1aaabdb414706e6a904461e39967557185">iscollectable</link>(o))
00883 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;<emphasis role="stringliteral">&quot;no&#32;collectable&quot;</emphasis>);
00884 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00885 &#32;&#32;&#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*obj&#32;=&#32;<link linkend="_lobject_8h_1a05cdf6070135f10ad37e1048a730b634">gcvalue</link>(o);
00886 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;<link linkend="_lgc_8h_1acc409eb45f598d23d8388fc9e96189ea">isdead</link>(<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L),&#32;obj)&#32;?&#32;<emphasis role="stringliteral">&quot;dead&quot;</emphasis>&#32;:
00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1a4c0ce78d476460d2e54914301f4a4bf7">iswhite</link>(obj)&#32;?&#32;<emphasis role="stringliteral">&quot;white&quot;</emphasis>&#32;:
00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1ac1e4847ad9a91e4cea36520dc9078365">isblack</link>(obj)&#32;?&#32;<emphasis role="stringliteral">&quot;black&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;gray&quot;</emphasis>);
00889 &#32;&#32;}
00890 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00891 }
00892 
00893 
00894 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;gc_age&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00895 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;*o;
00896 &#32;&#32;<link linkend="_lauxlib_8c_1a8ebfe706b773eaaf50283e6583d4642e">luaL_checkany</link>(L,&#32;1);
00897 &#32;&#32;o&#32;=&#32;obj_at(L,&#32;1);
00898 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lobject_8h_1aaabdb414706e6a904461e39967557185">iscollectable</link>(o))
00899 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;<emphasis role="stringliteral">&quot;no&#32;collectable&quot;</emphasis>);
00900 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00901 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*gennames[]&#32;=&#32;{<emphasis role="stringliteral">&quot;new&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;survival&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;old0&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;old1&quot;</emphasis>,
00902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;old&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;touched1&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;touched2&quot;</emphasis>};
00903 &#32;&#32;&#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*obj&#32;=&#32;<link linkend="_lobject_8h_1a05cdf6070135f10ad37e1048a730b634">gcvalue</link>(o);
00904 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;gennames[<link linkend="_lgc_8h_1ae68465c1574c4b45a05a6548ad934235">getage</link>(obj)]);
00905 &#32;&#32;}
00906 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00907 }
00908 
00909 
00910 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;gc_printobj&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00911 &#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;*o;
00912 &#32;&#32;<link linkend="_lauxlib_8c_1a8ebfe706b773eaaf50283e6583d4642e">luaL_checkany</link>(L,&#32;1);
00913 &#32;&#32;o&#32;=&#32;obj_at(L,&#32;1);
00914 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lobject_8h_1aaabdb414706e6a904461e39967557185">iscollectable</link>(o))
00915 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;no&#32;collectable\n&quot;</emphasis>);
00916 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00917 &#32;&#32;&#32;&#32;<link linkend="_struct_g_c_object">GCObject</link>&#32;*obj&#32;=&#32;<link linkend="_lobject_8h_1a05cdf6070135f10ad37e1048a730b634">gcvalue</link>(o);
00918 &#32;&#32;&#32;&#32;printobj(<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L),&#32;obj);
00919 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00920 &#32;&#32;}
00921 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00922 }
00923 
00924 
00925 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;gc_state&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00926 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*statenames[]&#32;=&#32;{
00927 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;propagate&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;atomic&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;enteratomic&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;sweepallgc&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;sweepfinobj&quot;</emphasis>,
00928 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;sweeptobefnz&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;sweepend&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;callfin&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;pause&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>};
00929 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;states[]&#32;=&#32;{
00930 &#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1a2ed301793747f3a2d0a7fc7d64d482fd">GCSpropagate</link>,&#32;<link linkend="_lgc_8h_1a7d4a80ad5991cca9822822f63deef987">GCSenteratomic</link>,&#32;<link linkend="_lgc_8h_1a7c7806ab609fa3c19ed9c2b688e10730">GCSatomic</link>,&#32;<link linkend="_lgc_8h_1aac9b5b472434aa8d38a89b46b6b29196">GCSswpallgc</link>,&#32;<link linkend="_lgc_8h_1a9d28766c63918e69c9ea3853a3e6c4c0">GCSswpfinobj</link>,
00931 &#32;&#32;&#32;&#32;<link linkend="_lgc_8h_1a152f379e712cbc7f0bfa2c6a3e15166d">GCSswptobefnz</link>,&#32;<link linkend="_lgc_8h_1a4e40597ebd731cafa743cd9a8e0db709">GCSswpend</link>,&#32;<link linkend="_lgc_8h_1a84094ff0ba3d8c7d4f84984e74f7705a">GCScallfin</link>,&#32;<link linkend="_lgc_8h_1ab546d91106ec5cfdba254de13e5b5c5f">GCSpause</link>,&#32;-1};
00932 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;option&#32;=&#32;states[<link linkend="_lauxlib_8c_1a7a3959469b5643d9ea2313eb11a3946f">luaL_checkoption</link>(L,&#32;1,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;statenames)];
00933 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(option&#32;==&#32;-1)&#32;{
00934 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;statenames[<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L)-&gt;gcstate]);
00935 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00936 &#32;&#32;}
00937 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00938 &#32;&#32;&#32;&#32;<link linkend="_structglobal___state">global_State</link>&#32;*g&#32;=&#32;<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L);
00939 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L)-&gt;gckind&#32;==&#32;<link linkend="_lstate_8h_1aa2765fe939333ebc895ba9cedbaa30a0">KGC_GEN</link>)
00940 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;cannot&#32;change&#32;states&#32;in&#32;generational&#32;mode&quot;</emphasis>);
00941 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1aa68a48b9104aeadf4842c25c12a9b8c9">lua_lock</link>(L);
00942 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(option&#32;&lt;&#32;g-&gt;gcstate)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;must&#32;cross&#32;&apos;pause&apos;?&#32;*/</emphasis>
00943 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lgc_8c_1a97086b84273579d4c9b42a782f30410d">luaC_runtilstate</link>(L,&#32;<link linkend="_lgc_8h_1af25866c39979dd1f72110cbd3a1a427d">bitmask</link>(<link linkend="_lgc_8h_1ab546d91106ec5cfdba254de13e5b5c5f">GCSpause</link>));&#32;&#32;<emphasis role="comment">/*&#32;run&#32;until&#32;pause&#32;*/</emphasis>
00944 &#32;&#32;&#32;&#32;}
00945 &#32;&#32;&#32;&#32;<link linkend="_lgc_8c_1a97086b84273579d4c9b42a782f30410d">luaC_runtilstate</link>(L,&#32;<link linkend="_lgc_8h_1af25866c39979dd1f72110cbd3a1a427d">bitmask</link>(option));
00946 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L)-&gt;gcstate&#32;==&#32;option);
00947 &#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a1781f2a7d9161848a246d475a9171875">lua_unlock</link>(L);
00948 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00949 &#32;&#32;}
00950 }
00951 
00952 
00953 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;hash_query&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00954 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lua_8h_1ad054300429f1094d3692313abc733ddf">lua_isnone</link>(L,&#32;2))&#32;{
00955 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;<link linkend="_lapi_8c_1a652b273947f0656686f998d8e90cd3ea">lua_type</link>(L,&#32;1)&#32;==&#32;<link linkend="_lua_8h_1a57de20d87bb5131a3159f2bd52e3fab6">LUA_TSTRING</link>,&#32;1,&#32;<emphasis role="stringliteral">&quot;string&#32;expected&quot;</emphasis>);
00956 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_lobject_8h_1a8661397faed512ccc9c70a4661f1a83d">tsvalue</link>(obj_at(L,&#32;1))-&gt;hash);
00957 &#32;&#32;}
00958 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00959 &#32;&#32;&#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;*o&#32;=&#32;obj_at(L,&#32;1);
00960 &#32;&#32;&#32;&#32;<link linkend="_struct_table">Table</link>&#32;*t;
00961 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a0f8f78c4edc5cbf890690b3cf9615dc8">luaL_checktype</link>(L,&#32;2,&#32;<link linkend="_lua_8h_1a31620fd8da5b655b7879e16a116ec31a">LUA_TTABLE</link>);
00962 &#32;&#32;&#32;&#32;t&#32;=&#32;<link linkend="_lobject_8h_1a336a6ce5e8340e6de133ec249cf47ebf">hvalue</link>(obj_at(L,&#32;2));
00963 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;luaH_mainposition(t,&#32;o)&#32;-&#32;t-&gt;<link linkend="_struct_table_1ab88cd70dad2e152cea983610f2a16e68">node</link>);
00964 &#32;&#32;}
00965 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00966 }
00967 
00968 
00969 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00970 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;a&#32;=&#32;0;
00971 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;(L-&gt;<link linkend="_structlua___state_1afeb5dbe379fc406b35fe5f8a5fcfc5d7">top</link>&#32;-&#32;L-&gt;<link linkend="_structlua___state_1a8d64aaa9257b553aae2e3e193c80a83f">stack</link>));
00972 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;(L-&gt;<link linkend="_structlua___state_1a21d8865731396f21a8b5bfd449c2354a">stack_last</link>&#32;-&#32;L-&gt;<link linkend="_structlua___state_1a8d64aaa9257b553aae2e3e193c80a83f">stack</link>));
00973 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;L-&gt;<link linkend="_structlua___state_1a5429936a93186096703265975ddd31b3">nCcalls</link>);
00974 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;L-&gt;<link linkend="_structlua___state_1a34c037820afad85fbce2db21b699f4d5">nci</link>);
00975 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&amp;a);
00976 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;5;
00977 }
00978 
00979 
00980 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;table_query&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
00981 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_table">Table</link>&#32;*t;
00982 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;2,&#32;-1));
00983 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;asize;
00984 &#32;&#32;<link linkend="_lauxlib_8c_1a0f8f78c4edc5cbf890690b3cf9615dc8">luaL_checktype</link>(L,&#32;1,&#32;<link linkend="_lua_8h_1a31620fd8da5b655b7879e16a116ec31a">LUA_TTABLE</link>);
00985 &#32;&#32;t&#32;=&#32;<link linkend="_lobject_8h_1a336a6ce5e8340e6de133ec249cf47ebf">hvalue</link>(obj_at(L,&#32;1));
00986 &#32;&#32;asize&#32;=&#32;<link linkend="_ltable_8c_1a8f20a204b7a78780847939086b847781">luaH_realasize</link>(t);
00987 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;-1)&#32;{
00988 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;asize);
00989 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_ltable_8h_1af3ab680af234ee7ea0f7e6078b4b73bf">allocsizenode</link>(t));
00990 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_ltable_8h_1a97b22167368e065caf9d8d11ae7ca1de">isdummy</link>(t)&#32;?&#32;0&#32;:&#32;t-&gt;<link linkend="_struct_table_1a6d65e3191d67788694f5152aed14f7fb">lastfree</link>&#32;-&#32;t-&gt;<link linkend="_struct_table_1ab88cd70dad2e152cea983610f2a16e68">node</link>);
00991 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;t-&gt;<link linkend="_struct_table_1aeb72dd9354afd8407f0325f034747110">alimit</link>);
00992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;4;
00993 &#32;&#32;}
00994 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)i&#32;&lt;&#32;asize)&#32;{
00995 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;i);
00996 &#32;&#32;&#32;&#32;pushobject(L,&#32;&amp;t-&gt;<link linkend="_struct_table_1a6ce25078468c6681674e2f56432a27b9">array</link>[i]);
00997 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a1b4cd0d80f51e5545a97ca6c28c03c50">lua_pushnil</link>(L);
00998 &#32;&#32;}
00999 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((i&#32;-=&#32;asize)&#32;&lt;&#32;<link linkend="_lobject_8h_1a2fbf715e78eaa889ed0fb9d4514e736a">sizenode</link>(t))&#32;{
01000 &#32;&#32;&#32;&#32;<link linkend="_struct_t_value">TValue</link>&#32;k;
01001 &#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1aa7b8fdb54ee8ce0235270f7d0b41e430">getnodekey</link>(L,&#32;&amp;k,&#32;<link linkend="_ltable_8h_1a644cfa3b6d4be1782e818a8340b5f78b">gnode</link>(t,&#32;i));
01002 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lobject_8h_1a5345ae49ed16dfecdfef95ec5399b000">isempty</link>(<link linkend="_ltable_8h_1acbbecd9bd8fbb72a17f6e2f5acf7113d">gval</link>(<link linkend="_ltable_8h_1a644cfa3b6d4be1782e818a8340b5f78b">gnode</link>(t,&#32;i)))&#32;||
01003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1a39af019fafa202841da3bf7c427bf090">ttisnil</link>(&amp;k)&#32;||
01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1a7a1392f89b1f29ed3b1afa37a22d0be2">ttisnumber</link>(&amp;k))&#32;{
01005 &#32;&#32;&#32;&#32;&#32;&#32;pushobject(L,&#32;&amp;k);
01006 &#32;&#32;&#32;&#32;}
01007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01008 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a47854189a679002ed743ebbcb30b1b26">lua_pushliteral</link>(L,&#32;<emphasis role="stringliteral">&quot;&lt;undef&gt;&quot;</emphasis>);
01009 &#32;&#32;&#32;&#32;pushobject(L,&#32;<link linkend="_ltable_8h_1acbbecd9bd8fbb72a17f6e2f5acf7113d">gval</link>(<link linkend="_ltable_8h_1a644cfa3b6d4be1782e818a8340b5f78b">gnode</link>(t,&#32;i)));
01010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_ltable_8h_1aac0e00b2296e00cfc818b74f1aff4f8b">gnext</link>(&amp;t-&gt;<link linkend="_struct_table_1ab88cd70dad2e152cea983610f2a16e68">node</link>[i])&#32;!=&#32;0)
01011 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_ltable_8h_1aac0e00b2296e00cfc818b74f1aff4f8b">gnext</link>(&amp;t-&gt;<link linkend="_struct_table_1ab88cd70dad2e152cea983610f2a16e68">node</link>[i]));
01012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01013 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a1b4cd0d80f51e5545a97ca6c28c03c50">lua_pushnil</link>(L);
01014 &#32;&#32;}
01015 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;3;
01016 }
01017 
01018 
01019 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;string_query&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01020 &#32;&#32;<link linkend="_structstringtable">stringtable</link>&#32;*tb&#32;=&#32;&amp;<link linkend="_lstate_8h_1a103db2de6edf3420c6c6c9a282562406">G</link>(L)-&gt;strt;
01021 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;s&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;1,&#32;0))&#32;-&#32;1;
01022 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;==&#32;-1)&#32;{
01023 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L&#32;,tb-&gt;<link linkend="_structstringtable_1a439227feff9d7f55384e8780cfc2eb82">size</link>);
01024 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L&#32;,tb-&gt;<link linkend="_structstringtable_1aa69d4be70d4410a0e505187f4b56e824">nuse</link>);
01025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;
01026 &#32;&#32;}
01027 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s&#32;&lt;&#32;tb-&gt;size)&#32;{
01028 &#32;&#32;&#32;&#32;<link linkend="_struct_t_string">TString</link>&#32;*ts;
01029 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;0;
01030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ts&#32;=&#32;tb-&gt;<link linkend="_structstringtable_1a48ff5e24ec6d93bbb1ec0eba2c581147">hash</link>[s];&#32;ts&#32;!=&#32;NULL;&#32;ts&#32;=&#32;ts-&gt;<link linkend="_struct_t_string_1ad158031cadb43a2c445df5d30265b6be">u</link>.<link linkend="_struct_t_string_1a2b0bb3e32a92d173a152e096434d3768">hnext</link>)&#32;{
01031 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lobject_8h_1aa60b4c3bb90063dcaa2f90e77d4a61f6">setsvalue2s</link>(L,&#32;L-&gt;<link linkend="_structlua___state_1afeb5dbe379fc406b35fe5f8a5fcfc5d7">top</link>,&#32;ts);
01032 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8h_1afe4a5994dd3704ec53de77f9fd121915">api_incr_top</link>(L);
01033 &#32;&#32;&#32;&#32;&#32;&#32;n++;
01034 &#32;&#32;&#32;&#32;}
01035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
01036 &#32;&#32;}
01037 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01038 }
01039 
01040 
01041 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;tref&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01042 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;level&#32;=&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L);
01043 &#32;&#32;<link linkend="_lauxlib_8c_1a8ebfe706b773eaaf50283e6583d4642e">luaL_checkany</link>(L,&#32;1);
01044 &#32;&#32;<link linkend="_lapi_8c_1a602f61a9b583d69dc1c72c8970bd65e8">lua_pushvalue</link>(L,&#32;1);
01045 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_lauxlib_8c_1a1adeae26be7c2e3001c3583f43f70720">luaL_ref</link>(L,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>));
01046 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L)&#32;==&#32;level+1);&#32;&#32;<emphasis role="comment">/*&#32;+1&#32;for&#32;result&#32;*/</emphasis>
01047 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01048 }
01049 
01050 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;getref&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01051 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;level&#32;=&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L);
01052 &#32;&#32;<link linkend="_lapi_8c_1af8e4dc545cc83927d901d2f242489320">lua_rawgeti</link>(L,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>,&#32;<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;1));
01053 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L)&#32;==&#32;level+1);
01054 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01055 }
01056 
01057 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;unref&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01058 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;level&#32;=&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L);
01059 &#32;&#32;<link linkend="_lauxlib_8c_1ad5e8303f3809d26c336c3e18879b7f4e">luaL_unref</link>(L,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>,&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;1)));
01060 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L)&#32;==&#32;level);
01061 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01062 }
01063 
01064 
01065 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;upvalue&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01066 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;2));
01067 &#32;&#32;<link linkend="_lauxlib_8c_1a0f8f78c4edc5cbf890690b3cf9615dc8">luaL_checktype</link>(L,&#32;1,&#32;<link linkend="_lua_8h_1adaa7fa6e2561c1bc428ba8d265171494">LUA_TFUNCTION</link>);
01068 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lua_8h_1ad054300429f1094d3692313abc733ddf">lua_isnone</link>(L,&#32;3))&#32;{
01069 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name&#32;=&#32;<link linkend="_lapi_8c_1afd5e7d6995dc52a5cb9e370ee3a710e6">lua_getupvalue</link>(L,&#32;1,&#32;n);
01070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(name&#32;==&#32;NULL)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01071 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;name);
01072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;
01073 &#32;&#32;}
01074 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01075 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name&#32;=&#32;<link linkend="_lapi_8c_1a6e2e5717e848fca56335a64739a8f2c0">lua_setupvalue</link>(L,&#32;1,&#32;n);
01076 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;name);
01077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01078 &#32;&#32;}
01079 }
01080 
01081 
01082 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;newuserdata&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01083 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size&#32;=&#32;<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>(<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;1,&#32;0));
01084 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nuv&#32;=&#32;<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;2,&#32;0);
01085 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;<link linkend="_llimits_8h_1a1d905979f8c901b7143b43ee98341206">cast_charp</link>(<link linkend="_lapi_8c_1a9c09a58b86c71e997d7ccabb67f18c12">lua_newuserdatauv</link>(L,&#32;size,&#32;nuv));
01086 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(size--)&#32;*p++&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
01087 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01088 }
01089 
01090 
01091 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;pushuserdata&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01092 &#32;&#32;<link linkend="_lua_8h_1a362144baa0cfb14dc38fd21438053d73">lua_Integer</link>&#32;u&#32;=&#32;<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;1);
01093 &#32;&#32;<link linkend="_lapi_8c_1a85e3e3d32b068aef62426828a104b561">lua_pushlightuserdata</link>(L,&#32;<link linkend="_llimits_8h_1a672c0fddf71f33d86ed8aa62ad914d52">cast_voidp</link>(<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>(u)));
01094 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01095 }
01096 
01097 
01098 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;udataval&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01099 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="_lapi_8c_1a0444ddf13e5618bca969e4b3b47bc0cc">lua_touserdata</link>(L,&#32;1)));
01100 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01101 }
01102 
01103 
01104 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;doonnewstack&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01105 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1&#32;=&#32;<link linkend="_lstate_8c_1a86b660d6f2b69734c35ec9fc718e4ca9">lua_newthread</link>(L);
01106 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;l;
01107 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;1,&#32;&amp;l);
01108 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;<link linkend="_lauxlib_8h_1ae210c8b2a9a27ee62b2e846e93ae876f">luaL_loadbuffer</link>(L1,&#32;s,&#32;l,&#32;s);
01109 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;==&#32;<link linkend="_lua_8h_1ab969ff78cb1b63efa2bba3bdfa6fff5c">LUA_OK</link>)
01110 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_lua_8h_1a589d7e3fd4c388d64056c88bf4672431">lua_pcall</link>(L1,&#32;0,&#32;0,&#32;0);
01111 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;status);
01112 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01113 }
01114 
01115 
01116 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;s2d&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01117 &#32;&#32;<link linkend="_lapi_8c_1a328625a03fbb5548f27b1af10f109f6a">lua_pushnumber</link>(L,&#32;<link linkend="_llimits_8h_1ac92cecb12c5aba1164877e81e76e2cb6">cast_num</link>(*<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;*,&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;1))));
01118 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01119 }
01120 
01121 
01122 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;d2s&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01123 &#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<emphasis role="keywordtype">double</emphasis>,&#32;<link linkend="_lauxlib_8c_1a9f2c941bb5eb7d3a7746f35c4fe3cced">luaL_checknumber</link>(L,&#32;1));
01124 &#32;&#32;<link linkend="_lapi_8c_1a2c325311534c23450cdf11931a8db0ae">lua_pushlstring</link>(L,&#32;<link linkend="_llimits_8h_1a1d905979f8c901b7143b43ee98341206">cast_charp</link>(&amp;d),&#32;<emphasis role="keyword">sizeof</emphasis>(d));
01125 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01126 }
01127 
01128 
01129 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;num2int&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01130 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_lua_8h_1a1365e48377a3b567e9d88423b2a6345c">lua_tointeger</link>(L,&#32;1));
01131 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01132 }
01133 
01134 
01135 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;newstate&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01136 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*ud;
01137 &#32;&#32;<link linkend="_lua_8h_1a2fee348bffcc82b15c626b27f66a748b">lua_Alloc</link>&#32;f&#32;=&#32;<link linkend="_lapi_8c_1a3dbff8747b32b799cf63603c46da06cc">lua_getallocf</link>(L,&#32;&amp;ud);
01138 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1&#32;=&#32;<link linkend="_lstate_8c_1a59a0d54f62839bcb7dfa8d0d7b4761b4">lua_newstate</link>(f,&#32;ud);
01139 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(L1)&#32;{
01140 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a90bf785da77985164dbe2eb0d64bf82e">lua_atpanic</link>(L1,&#32;tpanic);
01141 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a85e3e3d32b068aef62426828a104b561">lua_pushlightuserdata</link>(L,&#32;L1);
01142 &#32;&#32;}
01143 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
01144 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a1b4cd0d80f51e5545a97ca6c28c03c50">lua_pushnil</link>(L);
01145 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01146 }
01147 
01148 
01149 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_structlua___state">lua_State</link>&#32;*getstate&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01150 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1&#32;=&#32;<link linkend="_llimits_8h_1af17d62ec9e237a7644de6b9b34a48a34">cast</link>(<link linkend="_structlua___state">lua_State</link>&#32;*,&#32;<link linkend="_lapi_8c_1a0444ddf13e5618bca969e4b3b47bc0cc">lua_touserdata</link>(L,&#32;1));
01151 &#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;L1&#32;!=&#32;NULL,&#32;1,&#32;<emphasis role="stringliteral">&quot;state&#32;expected&quot;</emphasis>);
01152 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;L1;
01153 }
01154 
01155 
01156 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;loadlib&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01157 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structlua_l___reg">luaL_Reg</link>&#32;libs[]&#32;=&#32;{
01158 &#32;&#32;&#32;&#32;{<link linkend="_lauxlib_8h_1a074d53b3afd2b899d4b986c9643fb41a">LUA_GNAME</link>,&#32;<link linkend="_lbaselib_8c_1ae99bbf706d0fcfb0c1c7afbe3c4de382">luaopen_base</link>},
01159 &#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;coroutine&quot;</emphasis>,&#32;<link linkend="_lcorolib_8c_1a8515aa0d6a2e901a5397afd5e4250db2">luaopen_coroutine</link>},
01160 &#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;debug&quot;</emphasis>,&#32;<link linkend="_ldblib_8c_1ad94d3e2d0ca6d83a904a3ba9aad04f3b">luaopen_debug</link>},
01161 &#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;io&quot;</emphasis>,&#32;<link linkend="_liolib_8c_1a2d3f245e532f3d582a4ff62bbd567149">luaopen_io</link>},
01162 &#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;os&quot;</emphasis>,&#32;<link linkend="_loslib_8c_1a03d1c1c58e52032aee542b65a2b1c3ca">luaopen_os</link>},
01163 &#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;math&quot;</emphasis>,&#32;<link linkend="_lmathlib_8c_1a78cbff06fd4d59cf3d7525fa6cc196ba">luaopen_math</link>},
01164 &#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;string&quot;</emphasis>,&#32;<link linkend="_lstrlib_8c_1ab65aeff75cb100dde75e955c698c83b8">luaopen_string</link>},
01165 &#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;table&quot;</emphasis>,&#32;<link linkend="_ltablib_8c_1acfb66f04d8d0ea06cb1c4c059b9e142b">luaopen_table</link>},
01166 &#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;T&quot;</emphasis>,&#32;<link linkend="_ltests_8h_1a939daca9bf454e4f374d1d04ff7b161c">luaB_opentests</link>},
01167 &#32;&#32;&#32;&#32;{NULL,&#32;NULL}
01168 &#32;&#32;};
01169 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1&#32;=&#32;getstate(L);
01170 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
01171 &#32;&#32;<link linkend="_lauxlib_8c_1a3cb8205f86c838d8f82b7d2360b1b0f4">luaL_requiref</link>(L1,&#32;<emphasis role="stringliteral">&quot;package&quot;</emphasis>,&#32;<link linkend="_loadlib_8c_1ab732e1ec253c9b8dc0c2ce4d74cb0083">luaopen_package</link>,&#32;0);
01172 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lapi_8c_1a652b273947f0656686f998d8e90cd3ea">lua_type</link>(L1,&#32;-1)&#32;==&#32;<link linkend="_lua_8h_1a31620fd8da5b655b7879e16a116ec31a">LUA_TTABLE</link>);
01173 &#32;&#32;<emphasis role="comment">/*&#32;&apos;requiref&apos;&#32;should&#32;not&#32;reload&#32;module&#32;already&#32;loaded...&#32;*/</emphasis>
01174 &#32;&#32;<link linkend="_lauxlib_8c_1a3cb8205f86c838d8f82b7d2360b1b0f4">luaL_requiref</link>(L1,&#32;<emphasis role="stringliteral">&quot;package&quot;</emphasis>,&#32;NULL,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;seg.&#32;fault&#32;if&#32;it&#32;reloads&#32;*/</emphasis>
01175 &#32;&#32;<emphasis role="comment">/*&#32;...but&#32;should&#32;return&#32;the&#32;same&#32;module&#32;*/</emphasis>
01176 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lapi_8c_1a5fbae51f515549d4657d0efc676defee">lua_compare</link>(L1,&#32;-1,&#32;-2,&#32;<link linkend="_lua_8h_1ac03b3a20eb47ae78f0ba9de673dbbc18">LUA_OPEQ</link>));
01177 &#32;&#32;<link linkend="_lauxlib_8c_1a4cd66d7b986316711233243a268e8e04">luaL_getsubtable</link>(L1,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>,&#32;<link linkend="_lauxlib_8h_1ab654a257ab8f9de4ba519a64a9a9ea91">LUA_PRELOAD_TABLE</link>);
01178 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;libs[i].<link linkend="_structlua_l___reg_1a8f8f80d37794cde9472343e4487ba3eb">name</link>;&#32;i++)&#32;{
01179 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a2e4fbbe97182bf90004379202202f2b9">lua_pushcfunction</link>(L1,&#32;libs[i].func);
01180 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a3f2f542ee6728d82e51b1c302f9606df">lua_setfield</link>(L1,&#32;-2,&#32;libs[i].name);
01181 &#32;&#32;}
01182 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01183 }
01184 
01185 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;closestate&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01186 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1&#32;=&#32;getstate(L);
01187 &#32;&#32;<link linkend="_lstate_8c_1a5d903983f1497b2fc58fba9df09e354d">lua_close</link>(L1);
01188 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01189 }
01190 
01191 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;doremote&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01192 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1&#32;=&#32;getstate(L);
01193 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;lcode;
01194 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*code&#32;=&#32;<link linkend="_lauxlib_8c_1a79405166c5a94624ebe0427e6b0c07e0">luaL_checklstring</link>(L,&#32;2,&#32;&amp;lcode);
01195 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;
01196 &#32;&#32;<link linkend="_lapi_8c_1adaa30f0d34786144c94644039d1d1b6e">lua_settop</link>(L1,&#32;0);
01197 &#32;&#32;status&#32;=&#32;<link linkend="_lauxlib_8h_1ae210c8b2a9a27ee62b2e846e93ae876f">luaL_loadbuffer</link>(L1,&#32;code,&#32;lcode,&#32;code);
01198 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;==&#32;<link linkend="_lua_8h_1ab969ff78cb1b63efa2bba3bdfa6fff5c">LUA_OK</link>)
01199 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_lua_8h_1a589d7e3fd4c388d64056c88bf4672431">lua_pcall</link>(L1,&#32;0,&#32;<link linkend="_lua_8h_1ace3545adc11664c2f2b152fbe8b6283c">LUA_MULTRET</link>,&#32;0);
01200 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;<link linkend="_lua_8h_1ab969ff78cb1b63efa2bba3bdfa6fff5c">LUA_OK</link>)&#32;{
01201 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a1b4cd0d80f51e5545a97ca6c28c03c50">lua_pushnil</link>(L);
01202 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L1,&#32;-1));
01203 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;status);
01204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;3;
01205 &#32;&#32;}
01206 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
01208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_lua_8h_1ad054300429f1094d3692313abc733ddf">lua_isnone</link>(L1,&#32;++i))
01209 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L1,&#32;i));
01210 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L1,&#32;i-1);
01211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i-1;
01212 &#32;&#32;}
01213 }
01214 
01215 
01216 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;log2_aux&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01217 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;int)<link linkend="_lauxlib_8c_1aa15bea412c49bfdee1f3dbff096ce7d2">luaL_checkinteger</link>(L,&#32;1);
01218 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;<link linkend="_lobject_8c_1a731a3a2f9db35aaddeadf8cb19d507bd">luaO_ceillog2</link>(x));
01219 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01220 }
01221 
01222 
01223 <emphasis role="keyword">struct&#32;</emphasis>Aux&#32;{&#32;jmp_buf&#32;jb;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*paniccode;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L;&#32;};
01224 
01225 <emphasis role="comment">/*</emphasis>
01226 <emphasis role="comment">**&#32;does&#32;a&#32;long-jump&#32;back&#32;to&#32;&quot;main&#32;program&quot;.</emphasis>
01227 <emphasis role="comment">*/</emphasis>
01228 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;panicback&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01229 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Aux&#32;*b;
01230 &#32;&#32;<link linkend="_lapi_8c_1a1d762b92d5d82d6fa9f54ccf5c89d6a2">lua_checkstack</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;open&#32;space&#32;for&#32;&apos;Aux&apos;&#32;struct&#32;*/</emphasis>
01231 &#32;&#32;<link linkend="_lapi_8c_1a8b47f1b5685c3f8018ba926abb99af24">lua_getfield</link>(L,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>,&#32;<emphasis role="stringliteral">&quot;_jmpbuf&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;&apos;Aux&apos;&#32;struct&#32;*/</emphasis>
01232 &#32;&#32;b&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>Aux&#32;*)<link linkend="_lapi_8c_1a0444ddf13e5618bca969e4b3b47bc0cc">lua_touserdata</link>(L,&#32;-1);
01233 &#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;&apos;Aux&apos;&#32;struct&#32;*/</emphasis>
01234 &#32;&#32;runC(b-&gt;L,&#32;L,&#32;b-&gt;paniccode);&#32;&#32;<emphasis role="comment">/*&#32;run&#32;optional&#32;panic&#32;code&#32;*/</emphasis>
01235 &#32;&#32;longjmp(b-&gt;jb,&#32;1);
01236 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;<emphasis role="comment">/*&#32;to&#32;avoid&#32;warnings&#32;*/</emphasis>
01237 }
01238 
01239 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;checkpanic&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01240 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Aux&#32;b;
01241 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*ud;
01242 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1;
01243 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*code&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;1);
01244 &#32;&#32;<link linkend="_lua_8h_1a2fee348bffcc82b15c626b27f66a748b">lua_Alloc</link>&#32;f&#32;=&#32;<link linkend="_lapi_8c_1a3dbff8747b32b799cf63603c46da06cc">lua_getallocf</link>(L,&#32;&amp;ud);
01245 &#32;&#32;b.paniccode&#32;=&#32;<link linkend="_lauxlib_8h_1a732bc5882c4a5da46b236649ab6db47b">luaL_optstring</link>(L,&#32;2,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
01246 &#32;&#32;b.L&#32;=&#32;L;
01247 &#32;&#32;L1&#32;=&#32;<link linkend="_lstate_8c_1a59a0d54f62839bcb7dfa8d0d7b4761b4">lua_newstate</link>(f,&#32;ud);&#32;&#32;<emphasis role="comment">/*&#32;create&#32;new&#32;state&#32;*/</emphasis>
01248 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(L1&#32;==&#32;NULL)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;error?&#32;*/</emphasis>
01249 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a1b4cd0d80f51e5545a97ca6c28c03c50">lua_pushnil</link>(L);
01250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01251 &#32;&#32;}
01252 &#32;&#32;<link linkend="_lapi_8c_1a90bf785da77985164dbe2eb0d64bf82e">lua_atpanic</link>(L1,&#32;panicback);&#32;&#32;<emphasis role="comment">/*&#32;set&#32;its&#32;panic&#32;function&#32;*/</emphasis>
01253 &#32;&#32;<link linkend="_lapi_8c_1a85e3e3d32b068aef62426828a104b561">lua_pushlightuserdata</link>(L1,&#32;&amp;b);
01254 &#32;&#32;<link linkend="_lapi_8c_1a3f2f542ee6728d82e51b1c302f9606df">lua_setfield</link>(L1,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>,&#32;<emphasis role="stringliteral">&quot;_jmpbuf&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;store&#32;&apos;Aux&apos;&#32;struct&#32;*/</emphasis>
01255 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(setjmp(b.jb)&#32;==&#32;0)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;set&#32;jump&#32;buffer&#32;*/</emphasis>
01256 &#32;&#32;&#32;&#32;runC(L,&#32;L1,&#32;code);&#32;&#32;<emphasis role="comment">/*&#32;run&#32;code&#32;unprotected&#32;*/</emphasis>
01257 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a47854189a679002ed743ebbcb30b1b26">lua_pushliteral</link>(L,&#32;<emphasis role="stringliteral">&quot;no&#32;errors&quot;</emphasis>);
01258 &#32;&#32;}
01259 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">/*&#32;error&#32;handling&#32;*/</emphasis>
01260 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;move&#32;error&#32;message&#32;to&#32;original&#32;state&#32;*/</emphasis>
01261 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L1,&#32;-1));
01262 &#32;&#32;}
01263 &#32;&#32;<link linkend="_lstate_8c_1a5d903983f1497b2fc58fba9df09e354d">lua_close</link>(L1);
01264 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01265 }
01266 
01267 
01268 
01269 <emphasis role="comment">/*</emphasis>
01270 <emphasis role="comment">**&#32;{====================================================================</emphasis>
01271 <emphasis role="comment">**&#32;function&#32;to&#32;test&#32;the&#32;API&#32;with&#32;C.&#32;It&#32;interprets&#32;a&#32;kind&#32;of&#32;assembler</emphasis>
01272 <emphasis role="comment">**&#32;language&#32;with&#32;calls&#32;to&#32;the&#32;API,&#32;so&#32;the&#32;test&#32;can&#32;be&#32;driven&#32;by&#32;Lua&#32;code</emphasis>
01273 <emphasis role="comment">**&#32;=====================================================================</emphasis>
01274 <emphasis role="comment">*/</emphasis>
01275 
01276 
01277 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;sethookaux&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">int</emphasis>&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*code);
01278 
01279 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;delimits&#32;=&#32;<emphasis role="stringliteral">&quot;&#32;\t\n,;&quot;</emphasis>;
01280 
01281 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;skip&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**pc)&#32;{
01282 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)&#32;{
01283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(**pc&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;&amp;&amp;&#32;strchr(delimits,&#32;**pc))&#32;(*pc)++;
01284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(**pc&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;comment?&#32;*/</emphasis>
01285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(**pc&#32;!=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&amp;&amp;&#32;**pc&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;(*pc)++;&#32;&#32;<emphasis role="comment">/*&#32;until&#32;end-of-line&#32;*/</emphasis>
01286 &#32;&#32;&#32;&#32;}
01287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">break</emphasis>;
01288 &#32;&#32;}
01289 }
01290 
01291 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;getnum_aux&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**pc)&#32;{
01292 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;res&#32;=&#32;0;
01293 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sig&#32;=&#32;1;
01294 &#32;&#32;skip(pc);
01295 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(**pc&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;{
01296 &#32;&#32;&#32;&#32;res&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(<link linkend="_lua_8h_1a1365e48377a3b567e9d88423b2a6345c">lua_tointeger</link>(L1,&#32;-1));
01297 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L1,&#32;1);
01298 &#32;&#32;&#32;&#32;(*pc)++;
01299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res;
01300 &#32;&#32;}
01301 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(**pc&#32;==&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>)&#32;{
01302 &#32;&#32;&#32;&#32;res&#32;=&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L1);
01303 &#32;&#32;&#32;&#32;(*pc)++;
01304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res;
01305 &#32;&#32;}
01306 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(**pc&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;{
01307 &#32;&#32;&#32;&#32;sig&#32;=&#32;-1;
01308 &#32;&#32;&#32;&#32;(*pc)++;
01309 &#32;&#32;}
01310 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lctype_8h_1aee1d27a5eac398ec2c9c8b80281041e6">lisdigit</link>(<link linkend="_llimits_8h_1aa0c49a2b32329cc39df5ccafd1f720e0">cast_uchar</link>(**pc)))
01311 &#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;number&#32;expected&#32;(%s)&quot;</emphasis>,&#32;*pc);
01312 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_lctype_8h_1aee1d27a5eac398ec2c9c8b80281041e6">lisdigit</link>(<link linkend="_llimits_8h_1aa0c49a2b32329cc39df5ccafd1f720e0">cast_uchar</link>(**pc)))&#32;res&#32;=&#32;res*10&#32;+&#32;(*(*pc)++)&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
01313 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sig*res;
01314 }
01315 
01316 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*getstring_aux&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buff,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**pc)&#32;{
01317 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
01318 &#32;&#32;skip(pc);
01319 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(**pc&#32;==&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;||&#32;**pc&#32;==&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;quoted&#32;string?&#32;*/</emphasis>
01320 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;quote&#32;=&#32;*(*pc)++;
01321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(**pc&#32;!=&#32;quote)&#32;{
01322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(**pc&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;unfinished&#32;string&#32;in&#32;C&#32;script&quot;</emphasis>);
01323 &#32;&#32;&#32;&#32;&#32;&#32;buff[i++]&#32;=&#32;*(*pc)++;
01324 &#32;&#32;&#32;&#32;}
01325 &#32;&#32;&#32;&#32;(*pc)++;
01326 &#32;&#32;}
01327 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(**pc&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;&amp;&amp;&#32;!strchr(delimits,&#32;**pc))
01329 &#32;&#32;&#32;&#32;&#32;&#32;buff[i++]&#32;=&#32;*(*pc)++;
01330 &#32;&#32;}
01331 &#32;&#32;buff[i]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
01332 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buff;
01333 }
01334 
01335 
01336 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;getindex_aux&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**pc)&#32;{
01337 &#32;&#32;skip(pc);
01338 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(*(*pc)++)&#32;{
01339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;R&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>;
01340 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;G&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;deprecated&#32;index&#32;&apos;G&apos;&quot;</emphasis>);
01341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lua_8h_1ac3aa6665c25070f282c9827ec919fe6a">lua_upvalueindex</link>(getnum_aux(L,&#32;L1,&#32;pc));
01342 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;(*pc)--;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getnum_aux(L,&#32;L1,&#32;pc);
01343 &#32;&#32;}
01344 }
01345 
01346 
01347 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;statcodes[]&#32;=&#32;{<emphasis role="stringliteral">&quot;OK&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;YIELD&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ERRRUN&quot;</emphasis>,
01348 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ERRSYNTAX&quot;</emphasis>,&#32;<link linkend="_lstring_8h_1a36d62c6c0c5a33c2f29cf26ff9137cbf">MEMERRMSG</link>,&#32;<emphasis role="stringliteral">&quot;ERRGCMM&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ERRERR&quot;</emphasis>};
01349 
01350 <emphasis role="comment">/*</emphasis>
01351 <emphasis role="comment">**&#32;Avoid&#32;these&#32;stat&#32;codes&#32;from&#32;being&#32;collected,&#32;to&#32;avoid&#32;possible</emphasis>
01352 <emphasis role="comment">**&#32;memory&#32;error&#32;when&#32;pushing&#32;them.</emphasis>
01353 <emphasis role="comment">*/</emphasis>
01354 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;regcodes&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01355 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
01356 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(statcodes)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(statcodes[0]);&#32;i++)&#32;{
01357 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L,&#32;1);
01358 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a3f2f542ee6728d82e51b1c302f9606df">lua_setfield</link>(L,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>,&#32;statcodes[i]);
01359 &#32;&#32;}
01360 }
01361 
01362 
01363 <emphasis role="preprocessor">#define&#32;EQ(s1)&#32;&#32;(strcmp(s1,&#32;inst)&#32;==&#32;0)</emphasis>
01364 
01365 <emphasis role="preprocessor">#define&#32;getnum&#32;&#32;&#32;&#32;&#32;&#32;(getnum_aux(L,&#32;L1,&#32;&amp;pc))</emphasis>
01366 <emphasis role="preprocessor">#define&#32;getstring&#32;&#32;&#32;(getstring_aux(L,&#32;buff,&#32;&amp;pc))</emphasis>
01367 <emphasis role="preprocessor">#define&#32;getindex&#32;&#32;&#32;&#32;(getindex_aux(L,&#32;L1,&#32;&amp;pc))</emphasis>
01368 
01369 
01370 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;testC&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L);
01371 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Cfunck&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">int</emphasis>&#32;status,&#32;<link linkend="_lua_8h_1a0c565e13b66764da08aa2c68fe4365f0">lua_KContext</link>&#32;ctx);
01372 
01373 <emphasis role="comment">/*</emphasis>
01374 <emphasis role="comment">**&#32;arithmetic&#32;operation&#32;encoding&#32;for&#32;&apos;arith&apos;&#32;instruction</emphasis>
01375 <emphasis role="comment">**&#32;LUA_OPIDIV&#32;&#32;-&gt;&#32;\</emphasis>
01376 <emphasis role="comment">**&#32;LUA_OPSHL&#32;&#32;&#32;-&gt;&#32;&lt;</emphasis>
01377 <emphasis role="comment">**&#32;LUA_OPSHR&#32;&#32;&#32;-&gt;&#32;&gt;</emphasis>
01378 <emphasis role="comment">**&#32;LUA_OPUNM&#32;&#32;&#32;-&gt;&#32;_</emphasis>
01379 <emphasis role="comment">**&#32;LUA_OPBNOT&#32;&#32;-&gt;&#32;!</emphasis>
01380 <emphasis role="comment">*/</emphasis>
01381 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;ops[]&#32;=&#32;<emphasis role="stringliteral">&quot;+-*%^/\\&amp;|~&lt;&gt;_!&quot;</emphasis>;
01382 
01383 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;runC&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*pc)&#32;{
01384 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buff[300];
01385 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;0;
01386 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pc&#32;==&#32;NULL)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;attempt&#32;to&#32;runC&#32;null&#32;script&quot;</emphasis>);
01387 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)&#32;{
01388 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*inst&#32;=&#32;getstring;
01389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;return&#32;0;
01390 &#32;&#32;&#32;&#32;else&#32;if&#32;EQ(&quot;absindex&quot;)&#32;{
01391 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a328625a03fbb5548f27b1af10f109f6a">lua_pushnumber</link>(L1,&#32;<link linkend="_lapi_8c_1a32821b04960f1c1223132349d04911c1">lua_absindex</link>(L1,&#32;getindex));
01392 &#32;&#32;&#32;&#32;}
01393 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;append&quot;</emphasis>)&#32;{
01394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;<link linkend="_lapi_8c_1a161e2baf3d7a6a84499f6a9010cf12c8">lua_rawlen</link>(L1,&#32;t);
01396 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a757fd16e7e09280e2d4e4f9f77ba1099">lua_rawseti</link>(L1,&#32;t,&#32;i&#32;+&#32;1);
01397 &#32;&#32;&#32;&#32;}
01398 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;arith&quot;</emphasis>)&#32;{
01399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;op;
01400 &#32;&#32;&#32;&#32;&#32;&#32;skip(&amp;pc);
01401 &#32;&#32;&#32;&#32;&#32;&#32;op&#32;=&#32;strchr(ops,&#32;*pc++)&#32;-&#32;ops;
01402 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a08501a34884feca01759dec174d69c88">lua_arith</link>(L1,&#32;op);
01403 &#32;&#32;&#32;&#32;}
01404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;call&quot;</emphasis>)&#32;{
01405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;narg&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nres&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01407 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a89cbf40f871b6fae2dd2df814c7ac1ba">lua_call</link>(L1,&#32;narg,&#32;nres);
01408 &#32;&#32;&#32;&#32;}
01409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;callk&quot;</emphasis>)&#32;{
01410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;narg&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nres&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;getindex;
01413 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1ac5fef99e413a94e396b70b8263704ad3">lua_callk</link>(L1,&#32;narg,&#32;nres,&#32;i,&#32;Cfunck);
01414 &#32;&#32;&#32;&#32;}
01415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;checkstack&quot;</emphasis>)&#32;{
01416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sz&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg&#32;=&#32;getstring;
01418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*msg&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
01419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg&#32;=&#32;NULL;&#32;&#32;<emphasis role="comment">/*&#32;to&#32;test&#32;&apos;luaL_checkstack&apos;&#32;with&#32;no&#32;message&#32;*/</emphasis>
01420 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a7c46517055e0e8cb25e61b959709083a">luaL_checkstack</link>(L1,&#32;sz,&#32;msg);
01421 &#32;&#32;&#32;&#32;}
01422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;rawcheckstack&quot;</emphasis>)&#32;{
01423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sz&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01424 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lapi_8c_1a1d762b92d5d82d6fa9f54ccf5c89d6a2">lua_checkstack</link>(L1,&#32;sz));
01425 &#32;&#32;&#32;&#32;}
01426 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;compare&quot;</emphasis>)&#32;{
01427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*opt&#32;=&#32;getstring;&#32;&#32;<emphasis role="comment">/*&#32;EQ,&#32;LT,&#32;or&#32;LE&#32;*/</emphasis>
01428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;op&#32;=&#32;(opt[0]&#32;==&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>)&#32;?&#32;<link linkend="_lua_8h_1ac03b3a20eb47ae78f0ba9de673dbbc18">LUA_OPEQ</link>
01429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(opt[1]&#32;==&#32;<emphasis role="charliteral">&apos;T&apos;</emphasis>)&#32;?&#32;<link linkend="_lua_8h_1a0386da34771797273cad6b7a4b2ce53e">LUA_OPLT</link>&#32;:&#32;<link linkend="_lua_8h_1a110fe48591b6c46a89fdb0028a461717">LUA_OPLE</link>;
01430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;getindex;
01431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;b&#32;=&#32;getindex;
01432 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lapi_8c_1a5fbae51f515549d4657d0efc676defee">lua_compare</link>(L1,&#32;a,&#32;b,&#32;op));
01433 &#32;&#32;&#32;&#32;}
01434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;concat&quot;</emphasis>)&#32;{
01435 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a1de3afee1daece63d455f23818c883d9">lua_concat</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01436 &#32;&#32;&#32;&#32;}
01437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;copy&quot;</emphasis>)&#32;{
01438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;f&#32;=&#32;getindex;
01439 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a111bd3fa34fe656f415edae5e343e13e">lua_copy</link>(L1,&#32;f,&#32;getindex);
01440 &#32;&#32;&#32;&#32;}
01441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;func2num&quot;</emphasis>)&#32;{
01442 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a878b7e392e78661a374cf1c3073029b9">lua_CFunction</link>&#32;func&#32;=&#32;<link linkend="_lapi_8c_1ae790897a3311d599299895612986d850">lua_tocfunction</link>(L1,&#32;getindex);
01443 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a328625a03fbb5548f27b1af10f109f6a">lua_pushnumber</link>(L1,&#32;<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>(func));
01444 &#32;&#32;&#32;&#32;}
01445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;getfield&quot;</emphasis>)&#32;{
01446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01447 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a8b47f1b5685c3f8018ba926abb99af24">lua_getfield</link>(L1,&#32;t,&#32;getstring);
01448 &#32;&#32;&#32;&#32;}
01449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;getglobal&quot;</emphasis>)&#32;{
01450 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a8185a9c46d5930205f95beee4991e9f0">lua_getglobal</link>(L1,&#32;getstring);
01451 &#32;&#32;&#32;&#32;}
01452 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;getmetatable&quot;</emphasis>)&#32;{
01453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lapi_8c_1a4caa9ca5e47a30bd45e33d83bf2d6d6e">lua_getmetatable</link>(L1,&#32;getindex)&#32;==&#32;0)
01454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a1b4cd0d80f51e5545a97ca6c28c03c50">lua_pushnil</link>(L1);
01455 &#32;&#32;&#32;&#32;}
01456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;gettable&quot;</emphasis>)&#32;{
01457 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1aa572dbc6e86f796a3e82ffcae4478aeb">lua_gettable</link>(L1,&#32;getindex);
01458 &#32;&#32;&#32;&#32;}
01459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;gettop&quot;</emphasis>)&#32;{
01460 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L1,&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L1));
01461 &#32;&#32;&#32;&#32;}
01462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;gsub&quot;</emphasis>)&#32;{
01463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;a&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;&#32;<emphasis role="keywordtype">int</emphasis>&#32;b&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01464 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a65a9b27abc8408f98fbeac037a790ae9">luaL_gsub</link>(L1,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L1,&#32;a),
01465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L1,&#32;b),
01466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L1,&#32;c));
01467 &#32;&#32;&#32;&#32;}
01468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;insert&quot;</emphasis>)&#32;{
01469 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a1ba55afa0e7f756a4599e86cf46d92e0">lua_insert</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01470 &#32;&#32;&#32;&#32;}
01471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;iscfunction&quot;</emphasis>)&#32;{
01472 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lapi_8c_1a3b922032c9fe2930399186a3647cc3ad">lua_iscfunction</link>(L1,&#32;getindex));
01473 &#32;&#32;&#32;&#32;}
01474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;isfunction&quot;</emphasis>)&#32;{
01475 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lua_8h_1a7537af276c81906c144f29cd25b93315">lua_isfunction</link>(L1,&#32;getindex));
01476 &#32;&#32;&#32;&#32;}
01477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;isnil&quot;</emphasis>)&#32;{
01478 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lua_8h_1a86d737d7002e7e94023765397c6eef20">lua_isnil</link>(L1,&#32;getindex));
01479 &#32;&#32;&#32;&#32;}
01480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;isnull&quot;</emphasis>)&#32;{
01481 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lua_8h_1ad054300429f1094d3692313abc733ddf">lua_isnone</link>(L1,&#32;getindex));
01482 &#32;&#32;&#32;&#32;}
01483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;isnumber&quot;</emphasis>)&#32;{
01484 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lapi_8c_1a99451f234bf085c9c46c3d17a5aef905">lua_isnumber</link>(L1,&#32;getindex));
01485 &#32;&#32;&#32;&#32;}
01486 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;isstring&quot;</emphasis>)&#32;{
01487 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lapi_8c_1a9f20233199a414b04c1c4b43f5d040f3">lua_isstring</link>(L1,&#32;getindex));
01488 &#32;&#32;&#32;&#32;}
01489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;istable&quot;</emphasis>)&#32;{
01490 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lua_8h_1a161af51893c5f79dacc1c382416a5f27">lua_istable</link>(L1,&#32;getindex));
01491 &#32;&#32;&#32;&#32;}
01492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;isudataval&quot;</emphasis>)&#32;{
01493 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lua_8h_1a46c0d924f3492bbe10007a74e00b43aa">lua_islightuserdata</link>(L1,&#32;getindex));
01494 &#32;&#32;&#32;&#32;}
01495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;isuserdata&quot;</emphasis>)&#32;{
01496 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lapi_8c_1aa8a1dab86cfb4e0f9a4d1f699af0041b">lua_isuserdata</link>(L1,&#32;getindex));
01497 &#32;&#32;&#32;&#32;}
01498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;len&quot;</emphasis>)&#32;{
01499 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a28bdc8c01771ec2524b329a409a08040">lua_len</link>(L1,&#32;getindex);
01500 &#32;&#32;&#32;&#32;}
01501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;Llen&quot;</emphasis>)&#32;{
01502 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L1,&#32;<link linkend="_lauxlib_8c_1aa525c1b6aa90c90d684ef64cf2215e21">luaL_len</link>(L1,&#32;getindex));
01503 &#32;&#32;&#32;&#32;}
01504 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;loadfile&quot;</emphasis>)&#32;{
01505 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8h_1a023c745560d0ed613efb6eada57a3c13">luaL_loadfile</link>(L1,&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>));
01506 &#32;&#32;&#32;&#32;}
01507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;loadstring&quot;</emphasis>)&#32;{
01508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01509 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1ac1503e3f7db09148f426164834c37a57">luaL_loadstring</link>(L1,&#32;s);
01510 &#32;&#32;&#32;&#32;}
01511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;newmetatable&quot;</emphasis>)&#32;{
01512 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lauxlib_8c_1a2664eb7bcc85bbf6eeded2a81cf09b01">luaL_newmetatable</link>(L1,&#32;getstring));
01513 &#32;&#32;&#32;&#32;}
01514 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;newtable&quot;</emphasis>)&#32;{
01515 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1aa59db6b784aa1ec954599a44168c7761">lua_newtable</link>(L1);
01516 &#32;&#32;&#32;&#32;}
01517 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;newthread&quot;</emphasis>)&#32;{
01518 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lstate_8c_1a86b660d6f2b69734c35ec9fc718e4ca9">lua_newthread</link>(L1);
01519 &#32;&#32;&#32;&#32;}
01520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;resetthread&quot;</emphasis>)&#32;{
01521 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L1,&#32;<link linkend="_lstate_8c_1a0f2e0ad7529d8020c605508c159b90f4">lua_resetthread</link>(L1));
01522 &#32;&#32;&#32;&#32;}
01523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;newuserdata&quot;</emphasis>)&#32;{
01524 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a1123eb282211547f4951ae0d126708af">lua_newuserdata</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01525 &#32;&#32;&#32;&#32;}
01526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;next&quot;</emphasis>)&#32;{
01527 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1aa8bf464b98335a075732200ad91ce1de">lua_next</link>(L1,&#32;-2);
01528 &#32;&#32;&#32;&#32;}
01529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;objsize&quot;</emphasis>)&#32;{
01530 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L1,&#32;<link linkend="_lapi_8c_1a161e2baf3d7a6a84499f6a9010cf12c8">lua_rawlen</link>(L1,&#32;getindex));
01531 &#32;&#32;&#32;&#32;}
01532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pcall&quot;</emphasis>)&#32;{
01533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;narg&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nres&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01535 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_lua_8h_1a589d7e3fd4c388d64056c88bf4672431">lua_pcall</link>(L1,&#32;narg,&#32;nres,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01536 &#32;&#32;&#32;&#32;}
01537 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pcallk&quot;</emphasis>)&#32;{
01538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;narg&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nres&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;getindex;
01541 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_lapi_8c_1a624df4cb2312b762c4fb528ecc889385">lua_pcallk</link>(L1,&#32;narg,&#32;nres,&#32;0,&#32;i,&#32;Cfunck);
01542 &#32;&#32;&#32;&#32;}
01543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pop&quot;</emphasis>)&#32;{
01544 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01545 &#32;&#32;&#32;&#32;}
01546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;printstack&quot;</emphasis>)&#32;{
01547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;!=&#32;0)&#32;{
01549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;<link linkend="_lauxlib_8c_1a0d4cbfd194d1919b3ff84000c0644cc0">luaL_tolstring</link>(L1,&#32;n,&#32;NULL));
01550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L1,&#32;1);
01551 &#32;&#32;&#32;&#32;&#32;&#32;}
01552 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;printstack(L1);
01553 &#32;&#32;&#32;&#32;}
01554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;print&quot;</emphasis>)&#32;{
01555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg&#32;=&#32;getstring;
01556 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;msg);
01557 &#32;&#32;&#32;&#32;}
01558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;warningC&quot;</emphasis>)&#32;{
01559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg&#32;=&#32;getstring;
01560 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a383441029934d459d9b7cd89d3c851e8">lua_warning</link>(L1,&#32;msg,&#32;1);
01561 &#32;&#32;&#32;&#32;}
01562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;warning&quot;</emphasis>)&#32;{
01563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg&#32;=&#32;getstring;
01564 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a383441029934d459d9b7cd89d3c851e8">lua_warning</link>(L1,&#32;msg,&#32;0);
01565 &#32;&#32;&#32;&#32;}
01566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushbool&quot;</emphasis>)&#32;{
01567 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01568 &#32;&#32;&#32;&#32;}
01569 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushcclosure&quot;</emphasis>)&#32;{
01570 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a142802b91cdd22516b54599f51e101e4">lua_pushcclosure</link>(L1,&#32;testC,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01571 &#32;&#32;&#32;&#32;}
01572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushint&quot;</emphasis>)&#32;{
01573 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01574 &#32;&#32;&#32;&#32;}
01575 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushnil&quot;</emphasis>)&#32;{
01576 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a1b4cd0d80f51e5545a97ca6c28c03c50">lua_pushnil</link>(L1);
01577 &#32;&#32;&#32;&#32;}
01578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushnum&quot;</emphasis>)&#32;{
01579 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a328625a03fbb5548f27b1af10f109f6a">lua_pushnumber</link>(L1,&#32;(<link linkend="_lua_8h_1af0a6ed3b852d680769cfc410a0672172">lua_Number</link>)<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01580 &#32;&#32;&#32;&#32;}
01581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushstatus&quot;</emphasis>)&#32;{
01582 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L1,&#32;statcodes[status]);
01583 &#32;&#32;&#32;&#32;}
01584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushstring&quot;</emphasis>)&#32;{
01585 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L1,&#32;getstring);
01586 &#32;&#32;&#32;&#32;}
01587 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushupvalueindex&quot;</emphasis>)&#32;{
01588 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L1,&#32;<link linkend="_lua_8h_1ac3aa6665c25070f282c9827ec919fe6a">lua_upvalueindex</link>(<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>));
01589 &#32;&#32;&#32;&#32;}
01590 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushvalue&quot;</emphasis>)&#32;{
01591 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a602f61a9b583d69dc1c72c8970bd65e8">lua_pushvalue</link>(L1,&#32;getindex);
01592 &#32;&#32;&#32;&#32;}
01593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushfstringI&quot;</emphasis>)&#32;{
01594 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1ab190c226d38b289e6ca57683a9d4e0f0">lua_pushfstring</link>(L1,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L,&#32;-2),&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_lua_8h_1a1365e48377a3b567e9d88423b2a6345c">lua_tointeger</link>(L,&#32;-1));
01595 &#32;&#32;&#32;&#32;}
01596 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushfstringS&quot;</emphasis>)&#32;{
01597 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1ab190c226d38b289e6ca57683a9d4e0f0">lua_pushfstring</link>(L1,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L,&#32;-2),&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L,&#32;-1));
01598 &#32;&#32;&#32;&#32;}
01599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;pushfstringP&quot;</emphasis>)&#32;{
01600 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1ab190c226d38b289e6ca57683a9d4e0f0">lua_pushfstring</link>(L1,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L,&#32;-2),&#32;<link linkend="_lapi_8c_1a5b533fe96cb52b5415896d41daad374a">lua_topointer</link>(L,&#32;-1));
01601 &#32;&#32;&#32;&#32;}
01602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;rawget&quot;</emphasis>)&#32;{
01603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01604 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a52944e714d1c64bda7b83f511c14b2d3">lua_rawget</link>(L1,&#32;t);
01605 &#32;&#32;&#32;&#32;}
01606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;rawgeti&quot;</emphasis>)&#32;{
01607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01608 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1af8e4dc545cc83927d901d2f242489320">lua_rawgeti</link>(L1,&#32;t,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01609 &#32;&#32;&#32;&#32;}
01610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;rawgetp&quot;</emphasis>)&#32;{
01611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01612 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1acf10870c7165e0e440eb14827a52de93">lua_rawgetp</link>(L1,&#32;t,&#32;<link linkend="_llimits_8h_1a672c0fddf71f33d86ed8aa62ad914d52">cast_voidp</link>(<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>(<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>)));
01613 &#32;&#32;&#32;&#32;}
01614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;rawset&quot;</emphasis>)&#32;{
01615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01616 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1afb2d27f421677ef40425f9054ae216a7">lua_rawset</link>(L1,&#32;t);
01617 &#32;&#32;&#32;&#32;}
01618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;rawseti&quot;</emphasis>)&#32;{
01619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01620 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a757fd16e7e09280e2d4e4f9f77ba1099">lua_rawseti</link>(L1,&#32;t,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01621 &#32;&#32;&#32;&#32;}
01622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;rawsetp&quot;</emphasis>)&#32;{
01623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01624 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1aef5ff7d32a6e275fa0b8305f013bee9d">lua_rawsetp</link>(L1,&#32;t,&#32;<link linkend="_llimits_8h_1a672c0fddf71f33d86ed8aa62ad914d52">cast_voidp</link>(<link linkend="_llimits_8h_1a025d385a5ce274fa6eade82b6e1458d1">cast_sizet</link>(<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>)));
01625 &#32;&#32;&#32;&#32;}
01626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;remove&quot;</emphasis>)&#32;{
01627 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a7664dec8f7220c706b7e71ad3227cc78">lua_remove</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01628 &#32;&#32;&#32;&#32;}
01629 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;replace&quot;</emphasis>)&#32;{
01630 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a09daca42852c6356e4b415c46eba5955">lua_replace</link>(L1,&#32;getindex);
01631 &#32;&#32;&#32;&#32;}
01632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;resume&quot;</emphasis>)&#32;{
01633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;getindex;
01634 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nres;
01635 &#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_ldo_8c_1ad07756c576e4e989a7ca417c1d691d2a">lua_resume</link>(<link linkend="_lapi_8c_1ad1dcea410edb5c5595fc070f8bf2e9a0">lua_tothread</link>(L1,&#32;i),&#32;L,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>,&#32;&amp;nres);
01636 &#32;&#32;&#32;&#32;}
01637 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;return&quot;</emphasis>)&#32;{
01638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(L1&#32;!=&#32;L)&#32;{
01640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
01641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;i++)&#32;{
01642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx&#32;=&#32;-(n&#32;-&#32;i);
01643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_lapi_8c_1a652b273947f0656686f998d8e90cd3ea">lua_type</link>(L1,&#32;idx))&#32;{
01644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_lua_8h_1a611808ed12d4c2aee2a9e298a9d9a9bf">LUA_TBOOLEAN</link>:
01645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L,&#32;<link linkend="_lapi_8c_1a444aee9aa56b0b06175ee3c7bcf7927c">lua_toboolean</link>(L1,&#32;idx));
01646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
01648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L1,&#32;idx));
01649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01652 &#32;&#32;&#32;&#32;&#32;&#32;}
01653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
01654 &#32;&#32;&#32;&#32;}
01655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;rotate&quot;</emphasis>)&#32;{
01656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;getindex;
01657 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1af680e24129c0e021b4fbb7700cf185dc">lua_rotate</link>(L1,&#32;i,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01658 &#32;&#32;&#32;&#32;}
01659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;setfield&quot;</emphasis>)&#32;{
01660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;getstring;
01662 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a3f2f542ee6728d82e51b1c302f9606df">lua_setfield</link>(L1,&#32;t,&#32;s);
01663 &#32;&#32;&#32;&#32;}
01664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;seti&quot;</emphasis>)&#32;{
01665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01666 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a3f995c6cbc03d4cdebb2a6fc6fa11e59">lua_seti</link>(L1,&#32;t,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01667 &#32;&#32;&#32;&#32;}
01668 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;setglobal&quot;</emphasis>)&#32;{
01669 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;getstring;
01670 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1aecf388efaede9d97581335998dfa243b">lua_setglobal</link>(L1,&#32;s);
01671 &#32;&#32;&#32;&#32;}
01672 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;sethook&quot;</emphasis>)&#32;{
01673 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mask&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;getstring;
01676 &#32;&#32;&#32;&#32;&#32;&#32;sethookaux(L1,&#32;mask,&#32;count,&#32;s);
01677 &#32;&#32;&#32;&#32;}
01678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;setmetatable&quot;</emphasis>)&#32;{
01679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx&#32;=&#32;getindex;
01680 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a15719ea4119bdf5b3f2a406534431a7e">lua_setmetatable</link>(L1,&#32;idx);
01681 &#32;&#32;&#32;&#32;}
01682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;settable&quot;</emphasis>)&#32;{
01683 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a4ca492cf3d2194aec9a6292708bf66c8">lua_settable</link>(L1,&#32;getindex);
01684 &#32;&#32;&#32;&#32;}
01685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;settop&quot;</emphasis>)&#32;{
01686 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adaa30f0d34786144c94644039d1d1b6e">lua_settop</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01687 &#32;&#32;&#32;&#32;}
01688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;testudata&quot;</emphasis>)&#32;{
01689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;getindex;
01690 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lauxlib_8c_1af2ad56ae788ac3a59b4e0e29852ab460">luaL_testudata</link>(L1,&#32;i,&#32;getstring)&#32;!=&#32;NULL);
01691 &#32;&#32;&#32;&#32;}
01692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;error&quot;</emphasis>)&#32;{
01693 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a6ba7b91143fe8a03910420d800de8e97">lua_error</link>(L1);
01694 &#32;&#32;&#32;&#32;}
01695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;abort&quot;</emphasis>)&#32;{
01696 &#32;&#32;&#32;&#32;&#32;&#32;abort();
01697 &#32;&#32;&#32;&#32;}
01698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;throw&quot;</emphasis>)&#32;{
01699 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
01700 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>X&#32;{&#32;<emphasis role="keywordtype">int</emphasis>&#32;x;&#32;}&#32;x;
01701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;x;
01702 <emphasis role="preprocessor">#else</emphasis>
01703 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L1,&#32;<emphasis role="stringliteral">&quot;C++&quot;</emphasis>);
01704 <emphasis role="preprocessor">#endif</emphasis>
01705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01706 &#32;&#32;&#32;&#32;}
01707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;tobool&quot;</emphasis>)&#32;{
01708 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_lapi_8c_1a444aee9aa56b0b06175ee3c7bcf7927c">lua_toboolean</link>(L1,&#32;getindex));
01709 &#32;&#32;&#32;&#32;}
01710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;tocfunction&quot;</emphasis>)&#32;{
01711 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a2e4fbbe97182bf90004379202202f2b9">lua_pushcfunction</link>(L1,&#32;<link linkend="_lapi_8c_1ae790897a3311d599299895612986d850">lua_tocfunction</link>(L1,&#32;getindex));
01712 &#32;&#32;&#32;&#32;}
01713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;tointeger&quot;</emphasis>)&#32;{
01714 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L1,&#32;<link linkend="_lua_8h_1a1365e48377a3b567e9d88423b2a6345c">lua_tointeger</link>(L1,&#32;getindex));
01715 &#32;&#32;&#32;&#32;}
01716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;tonumber&quot;</emphasis>)&#32;{
01717 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a328625a03fbb5548f27b1af10f109f6a">lua_pushnumber</link>(L1,&#32;<link linkend="_lua_8h_1a3237a0507d51d772dadd4c560a75af17">lua_tonumber</link>(L1,&#32;getindex));
01718 &#32;&#32;&#32;&#32;}
01719 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;topointer&quot;</emphasis>)&#32;{
01720 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a85e3e3d32b068aef62426828a104b561">lua_pushlightuserdata</link>(L1,&#32;<link linkend="_llimits_8h_1a672c0fddf71f33d86ed8aa62ad914d52">cast_voidp</link>(<link linkend="_lapi_8c_1a5b533fe96cb52b5415896d41daad374a">lua_topointer</link>(L1,&#32;getindex)));
01721 &#32;&#32;&#32;&#32;}
01722 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;touserdata&quot;</emphasis>)&#32;{
01723 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a85e3e3d32b068aef62426828a104b561">lua_pushlightuserdata</link>(L1,&#32;<link linkend="_lapi_8c_1a0444ddf13e5618bca969e4b3b47bc0cc">lua_touserdata</link>(L1,&#32;getindex));
01724 &#32;&#32;&#32;&#32;}
01725 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;tostring&quot;</emphasis>)&#32;{
01726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L1,&#32;getindex);
01727 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s1&#32;=&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L1,&#32;s);
01728 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_llimits_8h_1a825f22ba1e16fd60e3aae8fe8efc1c4d">lua_longassert</link>((s&#32;==&#32;NULL&#32;&amp;&amp;&#32;s1&#32;==&#32;NULL)&#32;||&#32;strcmp(s,&#32;s1)&#32;==&#32;0);
01729 &#32;&#32;&#32;&#32;}
01730 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;type&quot;</emphasis>)&#32;{
01731 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L1,&#32;<link linkend="_lauxlib_8h_1a2bee94954917c5bccb05d6578f3c675b">luaL_typename</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>));
01732 &#32;&#32;&#32;&#32;}
01733 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;xmove&quot;</emphasis>)&#32;{
01734 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;f&#32;=&#32;getindex;
01735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t&#32;=&#32;getindex;
01736 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*fs&#32;=&#32;(f&#32;==&#32;0)&#32;?&#32;L1&#32;:&#32;<link linkend="_lapi_8c_1ad1dcea410edb5c5595fc070f8bf2e9a0">lua_tothread</link>(L1,&#32;f);
01737 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*ts&#32;=&#32;(t&#32;==&#32;0)&#32;?&#32;L1&#32;:&#32;<link linkend="_lapi_8c_1ad1dcea410edb5c5595fc070f8bf2e9a0">lua_tothread</link>(L1,&#32;t);
01738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;==&#32;0)&#32;n&#32;=&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(fs);
01740 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1ae27bb8d0218710bbbfefc1f573839d6d">lua_xmove</link>(fs,&#32;ts,&#32;n);
01741 &#32;&#32;&#32;&#32;}
01742 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;isyieldable&quot;</emphasis>)&#32;{
01743 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L1,&#32;<link linkend="_ldo_8c_1a490ddb801dda485ec5a94236d82477d2">lua_isyieldable</link>(<link linkend="_lapi_8c_1ad1dcea410edb5c5595fc070f8bf2e9a0">lua_tothread</link>(L1,&#32;getindex)));
01744 &#32;&#32;&#32;&#32;}
01745 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;yield&quot;</emphasis>)&#32;{
01746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_lua_8h_1a19e4e5528fbd5bf4c31e5ff6604e5a38">lua_yield</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01747 &#32;&#32;&#32;&#32;}
01748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;yieldk&quot;</emphasis>)&#32;{
01749 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nres&#32;=&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>;
01750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;getindex;
01751 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_ldo_8c_1a40d0ec26d9da8d2913c90158a788d019">lua_yieldk</link>(L1,&#32;nres,&#32;i,&#32;Cfunck);
01752 &#32;&#32;&#32;&#32;}
01753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;EQ(<emphasis role="stringliteral">&quot;toclose&quot;</emphasis>)&#32;{
01754 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a5101545bcd4222abe101836b7931bdf9">lua_toclose</link>(L1,&#32;<link linkend="_lstrlib_8c_1a22adbe647ff5710f14b6f6c18ae0d5a4">getnum</link>);
01755 &#32;&#32;&#32;&#32;}
01756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_lauxlib_8c_1a6c51d83d29244779392551388913e08a">luaL_error</link>(L,&#32;<emphasis role="stringliteral">&quot;unknown&#32;instruction&#32;%s&quot;</emphasis>,&#32;buff);
01757 &#32;&#32;}
01758 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01759 }
01760 
01761 
01762 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;testC&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01763 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*L1;
01764 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*pc;
01765 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lapi_8c_1aa8a1dab86cfb4e0f9a4d1f699af0041b">lua_isuserdata</link>(L,&#32;1))&#32;{
01766 &#32;&#32;&#32;&#32;L1&#32;=&#32;getstate(L);
01767 &#32;&#32;&#32;&#32;pc&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;2);
01768 &#32;&#32;}
01769 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lua_8h_1a0c346eeb2eee1d2e9b9920fb9b9d7fc9">lua_isthread</link>(L,&#32;1))&#32;{
01770 &#32;&#32;&#32;&#32;L1&#32;=&#32;<link linkend="_lapi_8c_1ad1dcea410edb5c5595fc070f8bf2e9a0">lua_tothread</link>(L,&#32;1);
01771 &#32;&#32;&#32;&#32;pc&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;2);
01772 &#32;&#32;}
01773 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01774 &#32;&#32;&#32;&#32;L1&#32;=&#32;L;
01775 &#32;&#32;&#32;&#32;pc&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;1);
01776 &#32;&#32;}
01777 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;runC(L,&#32;L1,&#32;pc);
01778 }
01779 
01780 
01781 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Cfunc&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01782 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;runC(L,&#32;L,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L,&#32;<link linkend="_lua_8h_1ac3aa6665c25070f282c9827ec919fe6a">lua_upvalueindex</link>(1)));
01783 }
01784 
01785 
01786 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Cfunck&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">int</emphasis>&#32;status,&#32;<link linkend="_lua_8h_1a0c565e13b66764da08aa2c68fe4365f0">lua_KContext</link>&#32;ctx)&#32;{
01787 &#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;statcodes[status]);
01788 &#32;&#32;<link linkend="_lapi_8c_1aecf388efaede9d97581335998dfa243b">lua_setglobal</link>(L,&#32;<emphasis role="stringliteral">&quot;status&quot;</emphasis>);
01789 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;ctx);
01790 &#32;&#32;<link linkend="_lapi_8c_1aecf388efaede9d97581335998dfa243b">lua_setglobal</link>(L,&#32;<emphasis role="stringliteral">&quot;ctx&quot;</emphasis>);
01791 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;runC(L,&#32;L,&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L,&#32;ctx));
01792 }
01793 
01794 
01795 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;makeCfunc&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01796 &#32;&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;1);
01797 &#32;&#32;<link linkend="_lapi_8c_1a142802b91cdd22516b54599f51e101e4">lua_pushcclosure</link>(L,&#32;Cfunc,&#32;<link linkend="_lapi_8c_1afbb08ecb69421875494105d4de68e5bf">lua_gettop</link>(L));
01798 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01799 }
01800 
01801 
01802 <emphasis role="comment">/*&#32;}======================================================&#32;*/</emphasis>
01803 
01804 
01805 <emphasis role="comment">/*</emphasis>
01806 <emphasis role="comment">**&#32;{======================================================</emphasis>
01807 <emphasis role="comment">**&#32;tests&#32;for&#32;C&#32;hooks</emphasis>
01808 <emphasis role="comment">**&#32;=======================================================</emphasis>
01809 <emphasis role="comment">*/</emphasis>
01810 
01811 <emphasis role="comment">/*</emphasis>
01812 <emphasis role="comment">**&#32;C&#32;hook&#32;that&#32;runs&#32;the&#32;C&#32;script&#32;stored&#32;in&#32;registry.C_HOOK[L]</emphasis>
01813 <emphasis role="comment">*/</emphasis>
01814 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Chook&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<link linkend="_structlua___debug">lua_Debug</link>&#32;*ar)&#32;{
01815 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*scpt;
01816 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;events&#32;[]&#32;=&#32;{<emphasis role="stringliteral">&quot;call&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ret&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;line&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;count&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;tailcall&quot;</emphasis>};
01817 &#32;&#32;<link linkend="_lapi_8c_1a8b47f1b5685c3f8018ba926abb99af24">lua_getfield</link>(L,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>,&#32;<emphasis role="stringliteral">&quot;C_HOOK&quot;</emphasis>);
01818 &#32;&#32;<link linkend="_lapi_8c_1a85e3e3d32b068aef62426828a104b561">lua_pushlightuserdata</link>(L,&#32;L);
01819 &#32;&#32;<link linkend="_lapi_8c_1aa572dbc6e86f796a3e82ffcae4478aeb">lua_gettable</link>(L,&#32;-2);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;C_HOOK[L]&#32;(script&#32;saved&#32;by&#32;sethookaux)&#32;*/</emphasis>
01820 &#32;&#32;scpt&#32;=&#32;<link linkend="_lua_8h_1ac813fc3bc1886ba17c363d5b4c6e7ef1">lua_tostring</link>(L,&#32;-1);&#32;&#32;<emphasis role="comment">/*&#32;not&#32;very&#32;religious&#32;(string&#32;will&#32;be&#32;popped)&#32;*/</emphasis>
01821 &#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L,&#32;2);&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;C_HOOK&#32;and&#32;script&#32;*/</emphasis>
01822 &#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;events[ar-&gt;<link linkend="_structlua___debug_1acafe4c229c051e50e7e55ba9ce3e5893">event</link>]);&#32;&#32;<emphasis role="comment">/*&#32;may&#32;be&#32;used&#32;by&#32;script&#32;*/</emphasis>
01823 &#32;&#32;<link linkend="_lapi_8c_1adcec46ff05dfee9a3c4c05828b40c213">lua_pushinteger</link>(L,&#32;ar-&gt;<link linkend="_structlua___debug_1a1be7dfac6c204d2592700475b5d73fd2">currentline</link>);&#32;&#32;<emphasis role="comment">/*&#32;may&#32;be&#32;used&#32;by&#32;script&#32;*/</emphasis>
01824 &#32;&#32;runC(L,&#32;L,&#32;scpt);&#32;&#32;<emphasis role="comment">/*&#32;run&#32;script&#32;from&#32;C_HOOK[L]&#32;*/</emphasis>
01825 }
01826 
01827 
01828 <emphasis role="comment">/*</emphasis>
01829 <emphasis role="comment">**&#32;sets&#32;&apos;registry.C_HOOK[L]&#32;=&#32;scpt&apos;&#32;and&#32;sets&#32;&apos;Chook&apos;&#32;as&#32;a&#32;hook</emphasis>
01830 <emphasis role="comment">*/</emphasis>
01831 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;sethookaux&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L,&#32;<emphasis role="keywordtype">int</emphasis>&#32;mask,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*scpt)&#32;{
01832 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*scpt&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{&#32;&#32;<emphasis role="comment">/*&#32;no&#32;script?&#32;*/</emphasis>
01833 &#32;&#32;&#32;&#32;<link linkend="_ldebug_8c_1ac9d3d168561f5c1a747a3ab198f0f092">lua_sethook</link>(L,&#32;NULL,&#32;0,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;turn&#32;off&#32;hooks&#32;*/</emphasis>
01834 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01835 &#32;&#32;}
01836 &#32;&#32;<link linkend="_lapi_8c_1a8b47f1b5685c3f8018ba926abb99af24">lua_getfield</link>(L,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>,&#32;<emphasis role="stringliteral">&quot;C_HOOK&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;get&#32;C_HOOK&#32;table&#32;*/</emphasis>
01837 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_lua_8h_1a161af51893c5f79dacc1c382416a5f27">lua_istable</link>(L,&#32;-1))&#32;{&#32;&#32;<emphasis role="comment">/*&#32;no&#32;hook&#32;table?&#32;*/</emphasis>
01838 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1abb8eae2164badeafdb037bc1e03cc822">lua_pop</link>(L,&#32;1);&#32;&#32;<emphasis role="comment">/*&#32;remove&#32;previous&#32;value&#32;*/</emphasis>
01839 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1aa59db6b784aa1ec954599a44168c7761">lua_newtable</link>(L);&#32;&#32;<emphasis role="comment">/*&#32;create&#32;new&#32;C_HOOK&#32;table&#32;*/</emphasis>
01840 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a602f61a9b583d69dc1c72c8970bd65e8">lua_pushvalue</link>(L,&#32;-1);
01841 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a3f2f542ee6728d82e51b1c302f9606df">lua_setfield</link>(L,&#32;<link linkend="_lua_8h_1a3524c2bbc8fcf847dc083246b62945dd">LUA_REGISTRYINDEX</link>,&#32;<emphasis role="stringliteral">&quot;C_HOOK&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;register&#32;it&#32;*/</emphasis>
01842 &#32;&#32;}
01843 &#32;&#32;<link linkend="_lapi_8c_1a85e3e3d32b068aef62426828a104b561">lua_pushlightuserdata</link>(L,&#32;L);
01844 &#32;&#32;<link linkend="_lapi_8c_1a771d300f2e64b2197d1df9bf31660ebf">lua_pushstring</link>(L,&#32;scpt);
01845 &#32;&#32;<link linkend="_lapi_8c_1a4ca492cf3d2194aec9a6292708bf66c8">lua_settable</link>(L,&#32;-3);&#32;&#32;<emphasis role="comment">/*&#32;C_HOOK[L]&#32;=&#32;script&#32;*/</emphasis>
01846 &#32;&#32;<link linkend="_ldebug_8c_1ac9d3d168561f5c1a747a3ab198f0f092">lua_sethook</link>(L,&#32;Chook,&#32;mask,&#32;count);
01847 }
01848 
01849 
01850 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;sethook&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01851 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_lua_8h_1af51702bb75a31bb4a279953ee386d533">lua_isnoneornil</link>(L,&#32;1))
01852 &#32;&#32;&#32;&#32;<link linkend="_ldebug_8c_1ac9d3d168561f5c1a747a3ab198f0f092">lua_sethook</link>(L,&#32;NULL,&#32;0,&#32;0);&#32;&#32;<emphasis role="comment">/*&#32;turn&#32;off&#32;hooks&#32;*/</emphasis>
01853 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01854 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*scpt&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;1);
01855 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*smask&#32;=&#32;<link linkend="_lauxlib_8h_1ad9917d22c79651fdd73d42c146b5056f">luaL_checkstring</link>(L,&#32;2);
01856 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;<link linkend="_llimits_8h_1a37a9e2c4b53433d34bad0f12a1500c08">cast_int</link>(<link linkend="_lauxlib_8c_1ab10ff110a5ba19b4385947de7834ee3c">luaL_optinteger</link>(L,&#32;3,&#32;0));
01857 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mask&#32;=&#32;0;
01858 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strchr(smask,&#32;<emphasis role="charliteral">&apos;c&apos;</emphasis>))&#32;mask&#32;|=&#32;<link linkend="_lua_8h_1a3b3ff95f914cf6ff4d46c87e8a648489">LUA_MASKCALL</link>;
01859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strchr(smask,&#32;<emphasis role="charliteral">&apos;r&apos;</emphasis>))&#32;mask&#32;|=&#32;<link linkend="_lua_8h_1af0345e20a0268525a82cd71ab3ecb5da">LUA_MASKRET</link>;
01860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strchr(smask,&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>))&#32;mask&#32;|=&#32;<link linkend="_lua_8h_1a671bc8ae0eddd679411c7f2401a594cf">LUA_MASKLINE</link>;
01861 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(count&#32;&gt;&#32;0)&#32;mask&#32;|=&#32;<link linkend="_lua_8h_1a29927bc26e642df4f842e0235d290c56">LUA_MASKCOUNT</link>;
01862 &#32;&#32;&#32;&#32;sethookaux(L,&#32;mask,&#32;count,&#32;scpt);
01863 &#32;&#32;}
01864 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01865 }
01866 
01867 
01868 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;coresume&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01869 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status,&#32;nres;
01870 &#32;&#32;<link linkend="_structlua___state">lua_State</link>&#32;*co&#32;=&#32;<link linkend="_lapi_8c_1ad1dcea410edb5c5595fc070f8bf2e9a0">lua_tothread</link>(L,&#32;1);
01871 &#32;&#32;<link linkend="_lauxlib_8h_1a48ce6cd86a7448e97f258097a7abc44d">luaL_argcheck</link>(L,&#32;co,&#32;1,&#32;<emphasis role="stringliteral">&quot;coroutine&#32;expected&quot;</emphasis>);
01872 &#32;&#32;status&#32;=&#32;<link linkend="_ldo_8c_1ad07756c576e4e989a7ca417c1d691d2a">lua_resume</link>(co,&#32;L,&#32;0,&#32;&amp;nres);
01873 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;<link linkend="_lua_8h_1ab969ff78cb1b63efa2bba3bdfa6fff5c">LUA_OK</link>&#32;&amp;&amp;&#32;status&#32;!=&#32;<link linkend="_lua_8h_1ab69f4bd0c0693d4c8fcfc0ebaeb2806b">LUA_YIELD</link>)&#32;{
01874 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L,&#32;0);
01875 &#32;&#32;&#32;&#32;<link linkend="_lua_8h_1a1ba55afa0e7f756a4599e86cf46d92e0">lua_insert</link>(L,&#32;-2);
01876 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;&#32;&#32;<emphasis role="comment">/*&#32;return&#32;false&#32;+&#32;error&#32;message&#32;*/</emphasis>
01877 &#32;&#32;}
01878 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01879 &#32;&#32;&#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L,&#32;1);
01880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01881 &#32;&#32;}
01882 }
01883 
01884 <emphasis role="comment">/*&#32;}======================================================&#32;*/</emphasis>
01885 
01886 
01887 
01888 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structlua_l___reg">luaL_Reg</link>&#32;tests_funcs[]&#32;=&#32;{
01889 &#32;&#32;{<emphasis role="stringliteral">&quot;checkmemory&quot;</emphasis>,&#32;<link linkend="_ltests_8h_1a749fe8c5cac80b7e60393e1a0e1934ab">lua_checkmemory</link>},
01890 &#32;&#32;{<emphasis role="stringliteral">&quot;closestate&quot;</emphasis>,&#32;closestate},
01891 &#32;&#32;{<emphasis role="stringliteral">&quot;d2s&quot;</emphasis>,&#32;d2s},
01892 &#32;&#32;{<emphasis role="stringliteral">&quot;doonnewstack&quot;</emphasis>,&#32;doonnewstack},
01893 &#32;&#32;{<emphasis role="stringliteral">&quot;doremote&quot;</emphasis>,&#32;doremote},
01894 &#32;&#32;{<emphasis role="stringliteral">&quot;gccolor&quot;</emphasis>,&#32;gc_color},
01895 &#32;&#32;{<emphasis role="stringliteral">&quot;gcage&quot;</emphasis>,&#32;gc_age},
01896 &#32;&#32;{<emphasis role="stringliteral">&quot;gcstate&quot;</emphasis>,&#32;gc_state},
01897 &#32;&#32;{<emphasis role="stringliteral">&quot;pobj&quot;</emphasis>,&#32;gc_printobj},
01898 &#32;&#32;{<emphasis role="stringliteral">&quot;getref&quot;</emphasis>,&#32;getref},
01899 &#32;&#32;{<emphasis role="stringliteral">&quot;hash&quot;</emphasis>,&#32;hash_query},
01900 &#32;&#32;{<emphasis role="stringliteral">&quot;log2&quot;</emphasis>,&#32;log2_aux},
01901 &#32;&#32;{<emphasis role="stringliteral">&quot;limits&quot;</emphasis>,&#32;get_limits},
01902 &#32;&#32;{<emphasis role="stringliteral">&quot;listcode&quot;</emphasis>,&#32;listcode},
01903 &#32;&#32;{<emphasis role="stringliteral">&quot;printcode&quot;</emphasis>,&#32;printcode},
01904 &#32;&#32;{<emphasis role="stringliteral">&quot;listk&quot;</emphasis>,&#32;listk},
01905 &#32;&#32;{<emphasis role="stringliteral">&quot;listabslineinfo&quot;</emphasis>,&#32;listabslineinfo},
01906 &#32;&#32;{<emphasis role="stringliteral">&quot;listlocals&quot;</emphasis>,&#32;listlocals},
01907 &#32;&#32;{<emphasis role="stringliteral">&quot;loadlib&quot;</emphasis>,&#32;loadlib},
01908 &#32;&#32;{<emphasis role="stringliteral">&quot;checkpanic&quot;</emphasis>,&#32;checkpanic},
01909 &#32;&#32;{<emphasis role="stringliteral">&quot;newstate&quot;</emphasis>,&#32;newstate},
01910 &#32;&#32;{<emphasis role="stringliteral">&quot;newuserdata&quot;</emphasis>,&#32;newuserdata},
01911 &#32;&#32;{<emphasis role="stringliteral">&quot;num2int&quot;</emphasis>,&#32;num2int},
01912 &#32;&#32;{<emphasis role="stringliteral">&quot;pushuserdata&quot;</emphasis>,&#32;pushuserdata},
01913 &#32;&#32;{<emphasis role="stringliteral">&quot;querystr&quot;</emphasis>,&#32;string_query},
01914 &#32;&#32;{<emphasis role="stringliteral">&quot;querytab&quot;</emphasis>,&#32;table_query},
01915 &#32;&#32;{<emphasis role="stringliteral">&quot;ref&quot;</emphasis>,&#32;tref},
01916 &#32;&#32;{<emphasis role="stringliteral">&quot;resume&quot;</emphasis>,&#32;coresume},
01917 &#32;&#32;{<emphasis role="stringliteral">&quot;s2d&quot;</emphasis>,&#32;s2d},
01918 &#32;&#32;{<emphasis role="stringliteral">&quot;sethook&quot;</emphasis>,&#32;sethook},
01919 &#32;&#32;{<emphasis role="stringliteral">&quot;stacklevel&quot;</emphasis>,&#32;<link linkend="_lparser_8c_1a7f8a29677082a5ef36452294a527d740">stacklevel</link>},
01920 &#32;&#32;{<emphasis role="stringliteral">&quot;testC&quot;</emphasis>,&#32;testC},
01921 &#32;&#32;{<emphasis role="stringliteral">&quot;makeCfunc&quot;</emphasis>,&#32;makeCfunc},
01922 &#32;&#32;{<emphasis role="stringliteral">&quot;totalmem&quot;</emphasis>,&#32;mem_query},
01923 &#32;&#32;{<emphasis role="stringliteral">&quot;alloccount&quot;</emphasis>,&#32;alloc_count},
01924 &#32;&#32;{<emphasis role="stringliteral">&quot;allocfailnext&quot;</emphasis>,&#32;alloc_failnext},
01925 &#32;&#32;{<emphasis role="stringliteral">&quot;trick&quot;</emphasis>,&#32;settrick},
01926 &#32;&#32;{<emphasis role="stringliteral">&quot;udataval&quot;</emphasis>,&#32;udataval},
01927 &#32;&#32;{<emphasis role="stringliteral">&quot;unref&quot;</emphasis>,&#32;unref},
01928 &#32;&#32;{<emphasis role="stringliteral">&quot;upvalue&quot;</emphasis>,&#32;upvalue},
01929 &#32;&#32;{NULL,&#32;NULL}
01930 };
01931 
01932 
01933 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;checkfinalmem&#32;(<emphasis role="keywordtype">void</emphasis>)&#32;{
01934 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1a2ca2fa3965761b33d18fa7544185571a">numblocks</link>&#32;==&#32;0);
01935 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>.<link linkend="_struct_memcontrol_1a5ec0dbf8c451bb8edbbd7f681d30dcb2">total</link>&#32;==&#32;0);
01936 }
01937 
01938 
01939 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_ltests_8h_1a939daca9bf454e4f374d1d04ff7b161c">luaB_opentests</link>&#32;(<link linkend="_structlua___state">lua_State</link>&#32;*L)&#32;{
01940 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*ud;
01941 &#32;&#32;<link linkend="_lapi_8c_1a90bf785da77985164dbe2eb0d64bf82e">lua_atpanic</link>(L,&#32;&amp;tpanic);
01942 &#32;&#32;<link linkend="_lapi_8c_1a708d3ea569d1e7174f06281ecba5a091">lua_setwarnf</link>(L,&#32;&amp;<link linkend="_lauxlib_8c_1acba9e22050fdbe52eb22f5f80cb809a4">warnf</link>,&#32;L);
01943 &#32;&#32;<link linkend="_lapi_8c_1a56bbb7479265e38da2e2596e6ec25faa">lua_pushboolean</link>(L,&#32;0);
01944 &#32;&#32;<link linkend="_lapi_8c_1aecf388efaede9d97581335998dfa243b">lua_setglobal</link>(L,&#32;<emphasis role="stringliteral">&quot;_WARN&quot;</emphasis>);&#32;&#32;<emphasis role="comment">/*&#32;_WARN&#32;=&#32;false&#32;*/</emphasis>
01945 &#32;&#32;regcodes(L);
01946 &#32;&#32;atexit(checkfinalmem);
01947 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(<link linkend="_lapi_8c_1a3dbff8747b32b799cf63603c46da06cc">lua_getallocf</link>(L,&#32;&amp;ud)&#32;==&#32;<link linkend="_ltests_8h_1a841f1ad3aefdf611dc771b4786868f59">debug_realloc</link>);
01948 &#32;&#32;<link linkend="_llimits_8h_1a5978f5fda715bd80e845df1e16ad7780">lua_assert</link>(ud&#32;==&#32;<link linkend="_llimits_8h_1a672c0fddf71f33d86ed8aa62ad914d52">cast_voidp</link>(&amp;<link linkend="_ltests_8h_1ad1e377d0e533a8cb13f2e8194142224f">l_memcontrol</link>));
01949 &#32;&#32;<link linkend="_lapi_8c_1ac890276f9590df6a4d6aabdad9c558f0">lua_setallocf</link>(L,&#32;<link linkend="_lapi_8c_1a3dbff8747b32b799cf63603c46da06cc">lua_getallocf</link>(L,&#32;NULL),&#32;ud);
01950 &#32;&#32;<link linkend="_lauxlib_8h_1a5088ff720ec66200d83eb78467b77239">luaL_newlib</link>(L,&#32;tests_funcs);
01951 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01952 }
01953 
01954 <emphasis role="preprocessor">#endif</emphasis>
01955 
</programlisting></section>
